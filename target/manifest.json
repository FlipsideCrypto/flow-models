{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v5.json", "dbt_version": "1.1.0", "generated_at": "2022-05-23T19:37:57.674748Z", "invocation_id": "24ceb93f-6a8f-4e41-8731-e21d9e12a1bc", "env": {}, "project_id": "208886b48445c6c994c154eb26fa0660", "user_id": "ae8c306c-329d-4e70-837c-2ce0da7e4f48", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.flow_models.core__fact_events": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nWITH events AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('gold__events') }}\n)\nSELECT\n    *\nFROM\n    events", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.flow_models.gold__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "core", "fqn": ["flow_models", "core", "core__fact_events"], "unique_id": "model.flow_models.core__fact_events", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "core/core__fact_events.sql", "original_file_path": "models/core/core__fact_events.sql", "name": "core__fact_events", "alias": "fact_events", "checksum": {"name": "sha256", "checksum": "da012bfc41bac21ed8a298965ebad78d38d2463a95d0e8539b81988d74580078"}, "tags": [], "refs": [["gold__events"]], "sources": [], "description": "This table records events from each transaction on the FLOW blockchain.", "columns": {"tx_id": {"name": "tx_id", "description": "ID for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The date and time for when the block was written.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_height": {"name": "block_height", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_succeeded": {"name": "tx_succeeded", "description": "Transaction status, if it succeeded or failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_index": {"name": "event_index", "description": "The index of the event within the transaction, i.e. in what order the events occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_contract": {"name": "event_contract", "description": "The contract called for this event. This is equivalent to the Contract column on Flowscan and is a concatenation of the contract's account address and primary name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "The type of method called on the event_contract. This is equivalent to the Type column on Flowscan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_data": {"name": "event_data", "description": "The data passed to the event, in the form of key-value pairs.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "flow_models://models/core/core__fact_events.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1653334539.192123}, "model.flow_models.core__fact_transactions": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nWITH txs AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('gold__transactions') }}\n)\nSELECT\n    *\nFROM\n    txs", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "core", "fqn": ["flow_models", "core", "core__fact_transactions"], "unique_id": "model.flow_models.core__fact_transactions", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "core/core__fact_transactions.sql", "original_file_path": "models/core/core__fact_transactions.sql", "name": "core__fact_transactions", "alias": "fact_transactions", "checksum": {"name": "sha256", "checksum": "20aae6feefac086e63605a4498361c839e7573d193f71eb45af54dc824212be5"}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "This table records all the transactions of the FLOW blockchain.", "columns": {"tx_id": {"name": "tx_id", "description": "ID for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The date and time for when the block was written.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_height": {"name": "block_height", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "The id for the chain of the network on which this block occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_index": {"name": "tx_index", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "proposer": {"name": "proposer", "description": "Address of the transaction proposer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payer": {"name": "payer", "description": "Address of the wallet paying for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "authorizers": {"name": "authorizers", "description": "Address(es) authorizing the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_authorizers": {"name": "count_authorizers", "description": "Number of authorizers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gas_limit": {"name": "gas_limit", "description": "Upper gas limit attached to the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_result": {"name": "transaction_result", "description": "Outcome of the transaction, including events that were called.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_succeeded": {"name": "tx_succeeded", "description": "Transaction status, if it succeeded or failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_msg": {"name": "error_msg", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "flow_models://models/core/core__fact_transactions.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1653334539.147744}, "model.flow_models.core__fact_blocks": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nWITH blocks AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('gold__blocks') }}\n)\nSELECT\n    *\nFROM\n    blocks", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.flow_models.gold__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "core", "fqn": ["flow_models", "core", "core__fact_blocks"], "unique_id": "model.flow_models.core__fact_blocks", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "core/core__fact_blocks.sql", "original_file_path": "models/core/core__fact_blocks.sql", "name": "core__fact_blocks", "alias": "fact_blocks", "checksum": {"name": "sha256", "checksum": "0e8e2a67213be7faf95e877b27080f4e60fc70ac61dfd43365fd734b08a24c76"}, "tags": [], "refs": [["gold__blocks"]], "sources": [], "description": "Information about blocks on the FLOW network and corresponding metadata.", "columns": {"block_height": {"name": "block_height", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The date and time for when the block was written.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The blockchain network the block or transaction occurred on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "The id for the chain of the network on which this block occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_count": {"name": "tx_count", "description": "The number of transactions in the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The block hash.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The block hash for the parent block.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "flow_models://models/core/core__fact_blocks.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1653334539.108906}, "model.flow_models.core__dim_labels": {"raw_sql": "{{ config (\n    materialized = 'view'\n) }}\n\nWITH contract_labels AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__contract_labels') }}\n)\nSELECT\n    event_contract,\n    contract_name,\n    account_address\nFROM\n    contract_labels", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["model.flow_models.silver__contract_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "core", "fqn": ["flow_models", "core", "core__dim_labels"], "unique_id": "model.flow_models.core__dim_labels", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "core/core__dim_labels.sql", "original_file_path": "models/core/core__dim_labels.sql", "name": "core__dim_labels", "alias": "dim_labels", "checksum": {"name": "sha256", "checksum": "44cb5e79c3a0554f4d929078757684f002b060b2cacf967dfc904a5d5f7a2a85"}, "tags": [], "refs": [["silver__contract_labels"]], "sources": [], "description": "This table extracts all contract labels referenced in the events item of a Flow transaction.", "columns": {"event_contract": {"name": "event_contract", "description": "The contract called for this event. This is equivalent to the Contract column on Flowscan and is a concatenation of the contract's account address and primary name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_name": {"name": "contract_name", "description": "The primary name of the contract, derived from the full contract address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_address": {"name": "account_address", "description": "The account address in 0x form that instantiated the contract called in the event. Note, on the Flow blockchain the account and the contract are separate as the account may have created more than one contract, in rare instances, such as the following FLOW address 0x8624b52f9ddcd04a.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "flow_models://models/core/core__dim_labels.yml", "compiled_path": "target/compiled/flow_models/models/core/core__dim_labels.sql", "build_path": "target/run/flow_models/models/core/core__dim_labels.sql", "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1653334539.219137, "compiled_sql": "\n\nWITH contract_labels AS (\n\n    SELECT\n        *\n    FROM\n        FLOW_DEV.silver.contract_labels\n)\nSELECT\n    event_contract,\n    contract_name,\n    account_address\nFROM\n    contract_labels", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "FLOW_DEV.core.dim_labels"}, "model.flow_models.bronze__labels": {"raw_sql": "{{ config (\n    materialized = 'view'\n) }}\n\nWITH labels AS (\n\n    SELECT\n        system_created_at AS _system_created_at,\n        insert_date AS _ingested_at,\n        blockchain,\n        address,\n        creator,\n        label_type,\n        label_subtype,\n        address_name,\n        project_name\n    FROM\n        {{ source(\n            'crosschain',\n            'address_labels'\n        ) }}\n    WHERE\n        blockchain = 'flow'\n)\nSELECT\n    *\nFROM\n    labels", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.flow_models.crosschain.address_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "bronze", "fqn": ["flow_models", "bronze", "bronze__labels"], "unique_id": "model.flow_models.bronze__labels", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "bronze/bronze__labels.sql", "original_file_path": "models/bronze/bronze__labels.sql", "name": "bronze__labels", "alias": "labels", "checksum": {"name": "sha256", "checksum": "192c5bf38039359e902b9d228347974b749826c81a300740397ab303f0dbfe68"}, "tags": [], "refs": [], "sources": [["crosschain", "address_labels"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1653334538.85816}, "model.flow_models.bronze__blocks": {"raw_sql": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT \n    record_id, \n    offset_id,\n    block_id,\n    block_timestamp, \n    network, \n    chain_id, \n    tx_count, \n    header, \n    ingested_at as _ingested_at\nFROM \n    {{ source(\n      'prod',\n      'flow_blocks'\n    ) }}", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.flow_models.prod.flow_blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "bronze", "fqn": ["flow_models", "bronze", "bronze__blocks"], "unique_id": "model.flow_models.bronze__blocks", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "bronze/bronze__blocks.sql", "original_file_path": "models/bronze/bronze__blocks.sql", "name": "bronze__blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "ee1b07ff3943e8c3050c73e465d67a27dea8fef911a949c333d12d3792f82cb5"}, "tags": [], "refs": [], "sources": [["prod", "flow_blocks"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1653334538.85924}, "model.flow_models.bronze__transactions": {"raw_sql": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT\n\n  record_id,\n  tx_id,\n  tx_block_index,\n  offset_id,\n  block_id,\n  block_timestamp,\n  network,\n  chain_id,\n  tx,\n  ingested_at as _ingested_at\n\nFROM\n  {{ source(\n    'prod',\n    'flow_txs'\n  ) }}", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.flow_models.prod.flow_txs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "bronze", "fqn": ["flow_models", "bronze", "bronze__transactions"], "unique_id": "model.flow_models.bronze__transactions", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "bronze/bronze__transactions.sql", "original_file_path": "models/bronze/bronze__transactions.sql", "name": "bronze__transactions", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "7df148fbc131022c3bb1ec5d7a28adbf721b689c32d8f16168e7275301d79e46"}, "tags": [], "refs": [], "sources": [["prod", "flow_txs"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1653334538.860228}, "model.flow_models.silver__events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  cluster_by = ['_ingested_at::DATE', 'block_timestamp::DATE'],\n  unique_key = 'event_id',\n  incremental_strategy = 'delete+insert'\n) }}\n\nWITH transactions AS (\n\n  SELECT\n    *\n  FROM\n    {{ ref('silver__transactions') }}\n\n{% if is_incremental() %}\nWHERE\n  _ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\nevents AS (\n  SELECT\n    tx_id,\n    block_timestamp,\n    block_height,\n    tx_succeeded,\n    COALESCE(\n      VALUE :event_index,\n      VALUE :eventIndex\n    ) :: NUMBER AS event_index,\n    SPLIT(\n      VALUE :type,\n      '.'\n    ) AS type_split,\n    ARRAY_TO_STRING(ARRAY_SLICE(type_split, 0, ARRAY_SIZE(type_split) -1), '.') AS event_contract,\n    type_split [array_size(type_split)-1] :: STRING AS event_type,\n    VALUE :value :: variant AS event_data,\n    COALESCE(\n      VALUE :value :EventType,\n      VALUE :value :eventType\n    ) :: variant AS event_data_type,\n    COALESCE(\n      VALUE :value :Fields,\n      VALUE :value :fields\n    ) :: variant AS event_data_fields,\n    concat_ws(\n      '-',\n      tx_id,\n      event_index\n    ) AS event_id,\n    _ingested_at\n  FROM\n    transactions,\n    LATERAL FLATTEN(\n      input => transaction_result :events\n    )\n),\nFINAL AS (\n  SELECT\n    event_id,\n    tx_id,\n    block_timestamp,\n    block_height,\n    tx_succeeded,\n    event_index,\n    event_contract,\n    event_type,\n    event_data,\n    event_data_type AS _event_data_type,\n    event_data_fields AS _event_data_fields,\n    _ingested_at\n  FROM\n    events\n)\nSELECT\n  *\nFROM\n  FINAL", "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "event_id", "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["_ingested_at::DATE", "block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "silver", "fqn": ["flow_models", "silver", "silver__events"], "unique_id": "model.flow_models.silver__events", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "silver/silver__events.sql", "original_file_path": "models/silver/silver__events.sql", "name": "silver__events", "alias": "events", "checksum": {"name": "sha256", "checksum": "04893b154d5c479d4cf721799022500d7e1961a7c081563c9023bf71296aa294"}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "This table records events from each transaction on the FLOW blockchain.", "columns": {"event_id": {"name": "event_id", "description": "The id for the event, which is a concatenation of tx_id-event_index.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_id": {"name": "tx_id", "description": "ID for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The date and time for when the block was written.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_height": {"name": "block_height", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_succeeded": {"name": "tx_succeeded", "description": "Transaction status, if it succeeded or failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_index": {"name": "event_index", "description": "The index of the event within the transaction, i.e. in what order the events occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_contract": {"name": "event_contract", "description": "The contract called for this event. This is equivalent to the Contract column on Flowscan and is a concatenation of the contract's account address and primary name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "The type of method called on the event_contract. This is equivalent to the Type column on Flowscan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_data": {"name": "event_data", "description": "The raw event data from the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_event_data_type": {"name": "_event_data_type", "description": "The type object from event_data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_event_data_fields": {"name": "_event_data_fields", "description": "The fields object from the event_data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_ingested_at": {"name": "_ingested_at", "description": "When the record was ingested by the chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "flow_models://models/silver/silver__events.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "cluster_by": ["_ingested_at::DATE", "block_timestamp::DATE"], "unique_key": "event_id", "incremental_strategy": "delete+insert"}, "created_at": 1653334539.264597}, "model.flow_models.silver__transactions": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  cluster_by = ['_ingested_at::DATE', 'block_timestamp::DATE'],\n  unique_key = 'tx_id',\n  incremental_strategy = 'delete+insert'\n) }}\n\nWITH bronze_txs AS (\n\n  SELECT\n    *\n  FROM\n    {{ ref('bronze__transactions') }}\n\n{% if is_incremental() %}\nWHERE\n  _ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n\nqualify ROW_NUMBER() over (\n  PARTITION BY tx_id\n  ORDER BY\n    _ingested_at DESC\n) = 1\n),\nFINAL AS (\n  SELECT\n    tx_id,\n    block_timestamp,\n    block_id AS block_height,\n    chain_id,\n    tx_block_index AS tx_index,\n    COALESCE(\n      tx :proposal_key :Address,\n      tx :proposalKeyAddress\n    ) :: STRING AS proposer,\n    tx :payer :: STRING AS payer,\n    tx :authorizers :: ARRAY AS authorizers,\n    ARRAY_SIZE(authorizers) AS count_authorizers,\n    COALESCE(\n      tx :gas_limit,\n      tx :gasLimit\n    ) :: NUMBER AS gas_limit,\n    COALESCE(\n      tx :transaction_result,\n      tx :result\n    ) :: variant AS transaction_result,\n    CASE\n      WHEN transaction_result :error = '' THEN TRUE\n      WHEN transaction_result :error :: STRING IS NULL THEN TRUE\n      ELSE FALSE\n    END AS tx_succeeded,\n    COALESCE(\n      transaction_result :error,\n      ''\n    ) :: STRING AS error_msg,\n    _ingested_at\n  FROM\n    bronze_txs\n)\nSELECT\n  *\nFROM\n  FINAL", "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.flow_models.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["_ingested_at::DATE", "block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "silver", "fqn": ["flow_models", "silver", "silver__transactions"], "unique_id": "model.flow_models.silver__transactions", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "silver/silver__transactions.sql", "original_file_path": "models/silver/silver__transactions.sql", "name": "silver__transactions", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "83624dbe1e5e65d466c20b980977a85cb2eda3821b3cb031464b41771d0b9ebe"}, "tags": [], "refs": [["bronze__transactions"]], "sources": [], "description": "This table records all the transactions of the FLOW blockchain.", "columns": {"tx_id": {"name": "tx_id", "description": "ID for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The date and time for when the block was written.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_height": {"name": "block_height", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "The id for the chain of the network on which this block occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_index": {"name": "tx_index", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "proposer": {"name": "proposer", "description": "Address of the transaction proposer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payer": {"name": "payer", "description": "Address of the wallet paying for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "authorizers": {"name": "authorizers", "description": "Address(es) authorizing the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_authorizers": {"name": "count_authorizers", "description": "Number of authorizers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gas_limit": {"name": "gas_limit", "description": "Upper gas limit attached to the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_result": {"name": "transaction_result", "description": "Outcome of the transaction, including events that were called.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_succeeded": {"name": "tx_succeeded", "description": "Transaction status, if it succeeded or failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_msg": {"name": "error_msg", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_ingested_at": {"name": "_ingested_at", "description": "When the record was ingested by the chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "flow_models://models/silver/silver__transactions.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "cluster_by": ["_ingested_at::DATE", "block_timestamp::DATE"], "unique_key": "tx_id", "incremental_strategy": "delete+insert"}, "created_at": 1653334539.302944}, "model.flow_models.silver__contract_labels": {"raw_sql": "{{ config(\n    materialized = 'table',\n    cluster_by = ['event_contract'],\n    unique_key = 'event_contract'\n) }}\n\nWITH splt AS (\n\n    SELECT\n        event_contract,\n        SPLIT(\n            event_contract,\n            '.'\n        ) AS ec_s\n    FROM\n        {{ ref('silver__events') }}\n)\nSELECT\n    DISTINCT event_contract,\n    ec_s [array_size(ec_s)-1] :: STRING AS contract_name,\n    CONCAT(\n        '0x',\n        ec_s [array_size(ec_s)-2] :: STRING\n    ) AS account_address\nFROM\n    splt\nWHERE\n    ec_s [0] != 'flow'", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "event_contract", "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["event_contract"], "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "silver", "fqn": ["flow_models", "silver", "silver__contract_labels"], "unique_id": "model.flow_models.silver__contract_labels", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "silver/silver__contract_labels.sql", "original_file_path": "models/silver/silver__contract_labels.sql", "name": "silver__contract_labels", "alias": "contract_labels", "checksum": {"name": "sha256", "checksum": "7ec3528bf6a646c1183862c537d038f19b52f5913b870eca7d3fd3e262819721"}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "This table extracts all contract labels referenced in the events item of a Flow transaction.", "columns": {"event_contract": {"name": "event_contract", "description": "The contract called for this event. This is equivalent to the Contract column on Flowscan and is a concatenation of the contract's account address and primary name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_name": {"name": "contract_name", "description": "The primary name of the contract, derived from the full contract address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_address": {"name": "account_address", "description": "The account address in 0x form that instantiated the contract called in the event. Note, on the Flow blockchain the account and the contract are separate as the account may have created more than one contract, in rare instances, such as the following FLOW address 0x8624b52f9ddcd04a.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "flow_models://models/silver/silver__contract_labels.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "table", "cluster_by": ["event_contract"], "unique_key": "event_contract"}, "created_at": 1653334539.3467321}, "model.flow_models.silver__blocks": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  cluster_by = ['_ingested_at::DATE', 'block_timestamp::DATE'],\n  unique_key = 'block_height',\n  incremental_strategy = 'delete+insert'\n) }}\n\nWITH bronze_blocks AS (\n\n  SELECT\n    *\n  FROM\n    {{ ref('bronze__blocks') }}\n\n{% if is_incremental() %}\nWHERE\n  _ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n\nqualify ROW_NUMBER() over (\n  PARTITION BY block_id\n  ORDER BY\n    _ingested_at DESC\n) = 1\n),\nsilver_blocks AS (\n  SELECT\n    block_id AS block_height,\n    block_timestamp,\n    network,\n    chain_id,\n    tx_count,\n    COALESCE(\n      header :block_id,\n      header :block_header :block_id,\n      header :id\n    ) :: STRING AS id,\n    COALESCE(\n      header :parent_id,\n      header :parentId,\n      header :block_header :parent_id\n    ) :: STRING AS parent_id,\n    _ingested_at\n  FROM\n    bronze_blocks\n)\nSELECT\n  *\nFROM\n  silver_blocks", "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.flow_models.bronze__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "block_height", "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["_ingested_at::DATE", "block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "silver", "fqn": ["flow_models", "silver", "silver__blocks"], "unique_id": "model.flow_models.silver__blocks", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "silver/silver__blocks.sql", "original_file_path": "models/silver/silver__blocks.sql", "name": "silver__blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "630c91697fb92facb17e9594045f28b0ffab240bab62d524bd810a94296e2c88"}, "tags": [], "refs": [["bronze__blocks"]], "sources": [], "description": "Information about blocks on the FLOW network and corresponding metadata.", "columns": {"block_height": {"name": "block_height", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The date and time for when the block was written.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The blockchain network the block or transaction occurred on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "The id for the chain of the network on which this block occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_count": {"name": "tx_count", "description": "The number of transactions in the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The block hash.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The block hash for the parent block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_ingested_at": {"name": "_ingested_at", "description": "When the record was ingested by the chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "flow_models://models/silver/silver__blocks.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "cluster_by": ["_ingested_at::DATE", "block_timestamp::DATE"], "unique_key": "block_height", "incremental_strategy": "delete+insert"}, "created_at": 1653334539.232199}, "model.flow_models.silver__event_attributes": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    cluster_by = ['_ingested_at::DATE', 'block_timestamp::DATE'],\n    unique_key = 'attribute_id',\n    incremental_strategy = 'delete+insert'\n) }}\n\nWITH events AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__events') }}\n\n{% if is_incremental() %}\nWHERE\n    _ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\nevents_data AS (\n    SELECT\n        event_id,\n        tx_id,\n        block_timestamp,\n        event_index,\n        event_contract,\n        event_type,\n        _event_data_type,\n        _event_data_fields,\n        _ingested_at,\n        COALESCE(\n            _event_data_type :fields,\n            _event_data_type :Fields\n        ) AS event_data_type_fields\n    FROM\n        events\n),\nattributes AS (\n    SELECT\n        event_id,\n        tx_id,\n        block_timestamp,\n        event_index,\n        event_contract,\n        event_type,\n        COALESCE(\n            VALUE :identifier,\n            VALUE :Identifier\n        ) :: STRING AS attribute_key,\n        COALESCE(\n            _event_data_fields [index] :Value,\n            _event_data_fields [index]\n        ) AS attribute_value,\n        concat_ws(\n            '-',\n            event_id,\n            INDEX\n        ) AS attribute_id,\n        INDEX AS attribute_index,\n        _ingested_at\n    FROM\n        events_data,\n        LATERAL FLATTEN(\n            input => event_data_type_fields\n        )\n),\nhandle_address_arrays AS (\n    SELECT\n        attribute_id,\n        b.index,\n        LPAD(TRIM(to_char(b.value :: INT, 'XXXXXXX')) :: STRING, 2, '0') AS hex\n    FROM\n        attributes A,\n        TABLE(FLATTEN(attribute_value, recursive => TRUE)) b\n    WHERE\n        IS_ARRAY(attribute_value) = TRUE\n    ORDER BY\n        1,\n        2\n),\nrecombine_address AS (\n    SELECT\n        attribute_id,\n        CONCAT(\n            '0x',\n            ARRAY_TO_STRING(ARRAY_AGG(hex) within GROUP (\n            ORDER BY\n                INDEX ASC), '')\n        ) AS decoded_address\n    FROM\n        handle_address_arrays\n    GROUP BY\n        1\n),\nreplace_arrays AS (\n    SELECT\n        A.attribute_id,\n        event_id,\n        tx_id,\n        block_timestamp,\n        event_index,\n        attribute_index,\n        event_contract,\n        event_type,\n        attribute_key,\n        attribute_value,\n        decoded_address,\n        COALESCE(\n            decoded_address,\n            attribute_value\n        ) :: STRING AS attribute_value_adj,\n        _ingested_at\n    FROM\n        attributes A\n        LEFT JOIN recombine_address USING (attribute_id)\n),\naddress_adjustment AS (\n    SELECT\n        attribute_id,\n        LENGTH(attribute_value_adj) AS ava_len,\n        CONCAT(\n            '0x',\n            LPAD(SPLIT(attribute_value_adj, '0x') [1], 16, '0') :: STRING\n        ) AS address_adj\n    FROM\n        replace_arrays\n    WHERE\n        attribute_value_adj LIKE '0x%'\n        AND ava_len < 19\n),\nFINAL AS (\n    SELECT\n        A.attribute_id,\n        event_id,\n        tx_id,\n        block_timestamp,\n        event_index,\n        attribute_index,\n        event_contract,\n        event_type,\n        attribute_key,\n        decoded_address,\n        attribute_value,\n        COALESCE(\n            address_adj,\n            attribute_value_adj\n        ) AS attribute_value_adj,\n        _ingested_at\n    FROM\n        replace_arrays A\n        LEFT JOIN address_adjustment USING (attribute_id)\n)\nSELECT\n    *\nFROM\n    FINAL", "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "attribute_id", "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["_ingested_at::DATE", "block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "silver", "fqn": ["flow_models", "silver", "silver__event_attributes"], "unique_id": "model.flow_models.silver__event_attributes", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "silver/silver__event_attributes.sql", "original_file_path": "models/silver/silver__event_attributes.sql", "name": "silver__event_attributes", "alias": "event_attributes", "checksum": {"name": "sha256", "checksum": "65df59847b36268e4582cfc1dfff08e82477c59982eff2ff42c56d94453608b4"}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "This table cleans and transform attributes from each event in the events table.", "columns": {"attribute_id": {"name": "attribute_id", "description": "ID for the attribute, which is a concatenation of tx_id-event_index-attribute_index.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "The id for the event, which is a concatenation of tx_id-event_index.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_id": {"name": "tx_id", "description": "ID for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The date and time for when the block was written.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_index": {"name": "event_index", "description": "The index of the event within the transaction, i.e. in what order the events occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attribute_index": {"name": "attribute_index", "description": "Index of the attribute within the event, corresponds with how the attributes are presented on the explorer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_contract": {"name": "event_contract", "description": "The contract called for this event. This is equivalent to the Contract column on Flowscan and is a concatenation of the contract's account address and primary name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "The type of method called on the event_contract. This is equivalent to the Type column on Flowscan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attribute_key": {"name": "attribute_key", "description": "The key of the attribute key-value pair. This is the label while attribute_value is the data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "decoded_address": {"name": "decoded_address", "description": "The decoded address, if applicable, for the attribute_value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attribute_value": {"name": "attribute_value", "description": "The value of the attribute key-value pair. This is the data that attribute_key labels.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attribute_value_adj": {"name": "attribute_value_adj", "description": "The adjusted attribute_value where an address from decoded_address is used in place of the encoded binary string, where applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_ingested_at": {"name": "_ingested_at", "description": "When the record was ingested by the chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "flow_models://models/silver/silver__event_attributes.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "cluster_by": ["_ingested_at::DATE", "block_timestamp::DATE"], "unique_key": "attribute_id", "incremental_strategy": "delete+insert"}, "created_at": 1653334539.360178}, "model.flow_models.silver__labels": {"raw_sql": "{{ config(\n    materialized = 'table',\n    cluster_by = ['address'],\n    unique_key = 'event_id',\n) }}\n\nWITH labels AS (\n\n    SELECT\n        _ingested_at,\n        blockchain,\n        address,\n        creator,\n        label_type,\n        label_subtype,\n        address_name,\n        project_name\n    FROM\n        {{ ref('bronze__labels') }}\n)\nSELECT\n    *\nFROM\n    labels", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.flow_models.bronze__labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "event_id", "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["address"], "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "silver", "fqn": ["flow_models", "silver", "silver__labels"], "unique_id": "model.flow_models.silver__labels", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "silver/silver__labels.sql", "original_file_path": "models/silver/silver__labels.sql", "name": "silver__labels", "alias": "labels", "checksum": {"name": "sha256", "checksum": "87e2216956fbf38e7e29352b340eabc8bc7c89a627082ccb646ce8349464d757"}, "tags": [], "refs": [["bronze__labels"]], "sources": [], "description": "This table provides labels for addresses on the Flow blockchain.", "columns": {"_ingested_at": {"name": "_ingested_at", "description": "When the record was ingested by the chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "blockchain": {"name": "blockchain", "description": "The name of the blockchain for this address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address": {"name": "address", "description": "The on-chain address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator": {"name": "creator", "description": "The source of the labeling information for the address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "label_type": {"name": "label_type", "description": "Predominant label categorization, such as CEX, Operator, NFT, etc.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "label_subtype": {"name": "label_subtype", "description": "The type of address, within the higher order label_type, such as hot wallet, deposit wallet, validator, etc.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address_name": {"name": "address_name", "description": "The name for a specific address, like Kraken or Huobi for CEX, or consensus vs verification for validator.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "The overarching project name, related to the address name. For example, Kraken (vs. Kraken Deposit Wallet for address_names).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "flow_models://models/silver/silver__labels.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "table", "cluster_by": ["address"], "unique_key": "event_id"}, "created_at": 1653334539.424413}, "model.flow_models.gold__blocks": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'delete+insert',\n    cluster_by = ['block_timestamp::DATE'],\n    unique_key = 'block_height'\n) }}\n\nWITH silver_blocks AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__blocks') }}\n    WHERE\n        block_timestamp >= '2022-05-09'\n\n{% if is_incremental() %}\nAND _ingested_at :: DATE >= CURRENT_DATE - 2\n{% endif %}\n),\ngold_blocks AS (\n    SELECT\n        block_height,\n        block_timestamp,\n        network,\n        chain_id,\n        tx_count,\n        id,\n        parent_id\n    FROM\n        silver_blocks\n)\nSELECT\n    *\nFROM\n    gold_blocks", "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.flow_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "block_height", "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "gold", "fqn": ["flow_models", "gold", "gold__blocks"], "unique_id": "model.flow_models.gold__blocks", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "gold/gold__blocks.sql", "original_file_path": "models/gold/gold__blocks.sql", "name": "gold__blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "86a3a6adeb066b5881e89c1d1b746917911c1b47ec7b1f9507bec1454bd563f1"}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "Information about blocks on the FLOW network and corresponding metadata.", "columns": {"block_height": {"name": "block_height", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The date and time for when the block was written.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The blockchain network the block or transaction occurred on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "The id for the chain of the network on which this block occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_count": {"name": "tx_count", "description": "The number of transactions in the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "The block hash.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The block hash for the parent block.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "flow_models://models/gold/gold__blocks.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"], "unique_key": "block_height"}, "created_at": 1653334539.470249}, "model.flow_models.gold__events": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'delete+insert',\n    cluster_by = ['block_timestamp::date'],\n    unique_key = \"CONCAT_WS('-', tx_id, event_index)\"\n) }}\n\nWITH silver_events AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__events') }}\n    WHERE\n        block_timestamp >= '2022-05-09'\n\n{% if is_incremental() %}\nAND _ingested_at :: DATE >= CURRENT_DATE -2\n{% endif %}\n),\nsilver_event_attributes AS (\n    SELECT\n        *\n    FROM\n        {{ ref('silver__event_attributes') }}\n    WHERE\n        block_timestamp >= '2022-05-09'\n\n{% if is_incremental() %}\nAND _ingested_at :: DATE >= CURRENT_DATE -2\n{% endif %}\n),\nobjs AS (\n    SELECT\n        event_id,\n        OBJECT_AGG(\n            attribute_key,\n            attribute_value_adj :: variant\n        ) AS event_data\n    FROM\n        silver_event_attributes\n    GROUP BY\n        1\n),\nlocation_object AS (\n    SELECT\n        event_id,\n        tx_id,\n        block_timestamp,\n        block_height,\n        tx_succeeded,\n        event_index,\n        event_contract,\n        event_type,\n        COALESCE(\n            _event_data_type :location,\n            _event_data_type :Location\n        ) AS event_data\n    FROM\n        silver_events\n    WHERE\n        _event_data_fields = '[]'\n),\ngold_events AS (\n    SELECT\n        e.event_id,\n        e.tx_id,\n        e.block_timestamp,\n        e.block_height,\n        e.tx_succeeded,\n        e.event_index,\n        e.event_contract,\n        e.event_type,\n        A.event_data\n    FROM\n        objs A\n        LEFT JOIN silver_events e USING (event_id)\n),\nFINAL AS (\n    SELECT\n        tx_id,\n        block_timestamp,\n        block_height,\n        tx_succeeded,\n        event_index,\n        event_contract,\n        event_type,\n        event_data\n    FROM\n        gold_events\n    UNION\n    SELECT\n        tx_id,\n        block_timestamp,\n        block_height,\n        tx_succeeded,\n        event_index,\n        event_contract,\n        event_type,\n        event_data\n    FROM\n        location_object\n)\nSELECT\n    *\nFROM\n    FINAL", "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.flow_models.silver__events", "model.flow_models.silver__event_attributes"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "CONCAT_WS('-', tx_id, event_index)", "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["block_timestamp::date"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "gold", "fqn": ["flow_models", "gold", "gold__events"], "unique_id": "model.flow_models.gold__events", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "gold/gold__events.sql", "original_file_path": "models/gold/gold__events.sql", "name": "gold__events", "alias": "events", "checksum": {"name": "sha256", "checksum": "8db8fa1946e8ace8e48e597ca1c87fe1f8743b95cd2d2ad00310e9ec0dff9563"}, "tags": [], "refs": [["silver__events"], ["silver__event_attributes"]], "sources": [], "description": "This table records events from each transaction on the FLOW blockchain.", "columns": {"tx_id": {"name": "tx_id", "description": "ID for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The date and time for when the block was written.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_height": {"name": "block_height", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_succeeded": {"name": "tx_succeeded", "description": "Transaction status, if it succeeded or failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_index": {"name": "event_index", "description": "The index of the event within the transaction, i.e. in what order the events occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_contract": {"name": "event_contract", "description": "The contract called for this event. This is equivalent to the Contract column on Flowscan and is a concatenation of the contract's account address and primary name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "The type of method called on the event_contract. This is equivalent to the Type column on Flowscan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_data": {"name": "event_data", "description": "The data passed to the event, in the form of key-value pairs.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "flow_models://models/gold/gold__events.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::date"], "unique_key": "CONCAT_WS('-', tx_id, event_index)"}, "created_at": 1653334539.443413}, "model.flow_models.gold__transactions": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    cluster_by = ['block_timestamp::DATE'],\n    unique_key = 'tx_id',\n    incremental_strategy = 'delete+insert'\n) }}\n\nWITH silver_txs AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__transactions') }}\n    WHERE\n        block_timestamp >= '2022-05-09'\n\n{% if is_incremental() %}\nAND _ingested_at :: DATE > CURRENT_DATE - 2\n{% endif %}\n),\ngold_txs AS (\n    SELECT\n        tx_id,\n        block_timestamp,\n        block_height,\n        chain_id,\n        tx_index,\n        proposer,\n        payer,\n        authorizers,\n        count_authorizers,\n        gas_limit,\n        transaction_result,\n        tx_succeeded,\n        error_msg\n    FROM\n        silver_txs\n)\nSELECT\n    *\nFROM\n    gold_txs", "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "ignore", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "gold", "fqn": ["flow_models", "gold", "gold__transactions"], "unique_id": "model.flow_models.gold__transactions", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "gold/gold__transactions.sql", "original_file_path": "models/gold/gold__transactions.sql", "name": "gold__transactions", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "4fa53f938acaea929c1fbfafcf95bb8ef2971615d6513748d246f99b68a21e80"}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "This table records all the transactions of the FLOW blockchain.", "columns": {"tx_id": {"name": "tx_id", "description": "ID for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The date and time for when the block was written.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_height": {"name": "block_height", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "The id for the chain of the network on which this block occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_index": {"name": "tx_index", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "proposer": {"name": "proposer", "description": "Address of the transaction proposer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payer": {"name": "payer", "description": "Address of the wallet paying for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "authorizers": {"name": "authorizers", "description": "Address(es) authorizing the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_authorizers": {"name": "count_authorizers", "description": "Number of authorizers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gas_limit": {"name": "gas_limit", "description": "Upper gas limit attached to the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_result": {"name": "transaction_result", "description": "Outcome of the transaction, including events that were called.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_succeeded": {"name": "tx_succeeded", "description": "Transaction status, if it succeeded or failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_msg": {"name": "error_msg", "description": "tbd", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "flow_models://models/gold/gold__transactions.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "cluster_by": ["block_timestamp::DATE"], "unique_key": "tx_id", "incremental_strategy": "delete+insert"}, "created_at": 1653334539.499851}, "operation.flow_models.flow_models-on-run-start-0": {"raw_sql": "{{create_sps()}}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.flow_models.create_sps"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "flow_models-on-run-start-0", "fqn": ["flow_models", "hooks", "flow_models-on-run-start-0"], "unique_id": "operation.flow_models.flow_models-on-run-start-0", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "hooks/flow_models-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "name": "flow_models-on-run-start-0", "alias": "", "checksum": {"name": "sha256", "checksum": "5957a5f01b29a2343a684dde70c2c1aebc038f5592024c8c91f86a9abd2f40d5"}, "tags": ["on-run-start"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/flow_models/./dbt_project.yml/hooks/flow_models-on-run-start-0.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1653334538.893462, "compiled_sql": "\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}, "operation.flow_models.flow_models-on-run-start-1": {"raw_sql": "{{create_tasks()}}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.flow_models.create_tasks"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "flow_models-on-run-start-1", "fqn": ["flow_models", "hooks", "flow_models-on-run-start-1"], "unique_id": "operation.flow_models.flow_models-on-run-start-1", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "hooks/flow_models-on-run-start-1.sql", "original_file_path": "./dbt_project.yml", "name": "flow_models-on-run-start-1", "alias": "", "checksum": {"name": "sha256", "checksum": "5957a5f01b29a2343a684dde70c2c1aebc038f5592024c8c91f86a9abd2f40d5"}, "tags": ["on-run-start"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/flow_models/./dbt_project.yml/hooks/flow_models-on-run-start-1.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1653334538.896306, "compiled_sql": "\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 1}, "model.re_data.re_data_columns_over_time": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        unique_key = 'id',\n        on_schema_change='sync_all_columns',\n    )\n}}\n\n\nwith columns as (\n\nselect\n    {{ full_table_name('cols.name', 'cols.schema', 'cols.database') }} as table_name,\n    cols.column_name,\n    cols.data_type,\n    cols.is_nullable,\n    cast ({{dbt_utils.current_timestamp_in_utc()}} as {{ timestamp_type() }} ) as detected_time\nfrom\n    {{ ref('re_data_columns')}} cols, {{ ref('re_data_monitored')}} tables\nwhere\n    cols.name = tables.name and cols.schema = tables.schema and cols.database = tables.database\n)\n\nselect\n    {{ dbt_utils.surrogate_key([\n      'table_name',\n      'column_name',\n      'detected_time'\n    ]) }} as id,\n    table_name,\n    column_name,\n    data_type,\n    is_nullable,\n    detected_time\nfrom columns", "resource_type": "model", "depends_on": {"macros": ["macro.re_data.full_table_name", "macro.dbt_utils.current_timestamp_in_utc", "macro.re_data.timestamp_type", "macro.dbt_utils.surrogate_key"], "nodes": ["model.re_data.re_data_columns", "model.re_data.re_data_monitored"]}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "sync_all_columns", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "re_data_columns_over_time", "fqn": ["re_data", "metrics", "types", "schema", "re_data_columns_over_time"], "unique_id": "model.re_data.re_data_columns_over_time", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "metrics/types/schema/re_data_columns_over_time.sql", "original_file_path": "models/metrics/types/schema/re_data_columns_over_time.sql", "name": "re_data_columns_over_time", "alias": "", "checksum": {"name": "sha256", "checksum": "9b693dc8da07d5db26a1a41fb533102aa084330d32f55e69c507c64e5f508706"}, "tags": [], "refs": [["re_data_columns"], ["re_data_monitored"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re", "materialized": "incremental", "unique_key": "id", "on_schema_change": "sync_all_columns", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1653334538.947168}, "model.re_data.re_data_base_metrics": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        unique_key = 'id',\n        on_schema_change='sync_all_columns',\n    )\n}}\n\n-- depends_on: {{ ref('re_data_columns') }}\n-- depends_on: {{ ref('re_data_last_base_metrics_thread0') }}\n-- depends_on: {{ ref('re_data_last_base_metrics_thread1') }}\n-- depends_on: {{ ref('re_data_last_base_metrics_thread2') }}\n-- depends_on: {{ ref('re_data_last_base_metrics_thread3') }}\n-- depends_on: {{ ref('re_data_last_base_metrics_part0') }}\n-- depends_on: {{ ref('re_data_last_base_metrics_part1') }}\n-- depends_on: {{ ref('re_data_last_base_metrics_part2') }}\n-- depends_on: {{ ref('re_data_last_base_metrics_part3') }}\n-- depends_on: {{ ref('re_data_run_started_at') }}\n-- depends_on: {{ ref('re_data_monitored') }}\n\nwith \n\nwith_time_window as (\n    {% set parts = ['0','1','2','3'] %}\n    {% for part in parts %}\n        {% set ref_name = 're_data_last_base_metrics_part' + part %}\n        select\n            *,\n            {{ time_window_start() }} as time_window_start,\n            {{ time_window_end() }} as time_window_end\n        from {{ ref(ref_name) }}\n        {%- if not loop.last %} union all {%- endif %}\n    {% endfor %}\n)\nselect\n    {{ dbt_utils.surrogate_key([\n        'table_name',\n        'column_name',\n        'metric',\n        'time_window_start',\n        'time_window_end'\n    ]) }} as id,\n    cast (table_name as {{ string_type() }} ) as table_name,\n    cast (column_name as {{ string_type() }} ) as column_name,\n    cast (metric as {{ string_type() }} ) as metric,\n    cast (value as {{ numeric_type() }} ) as value,\n    cast (time_window_start as {{ timestamp_type() }} ) as time_window_start,\n    cast (time_window_end as {{ timestamp_type() }} ) as time_window_end,\n    cast (\n        {{ interval_length_sec('time_window_start', 'time_window_end') }} as {{ integer_type() }}\n    ) as interval_length_sec,\n    {{- dbt_utils.current_timestamp_in_utc() -}} as computed_on\nfrom with_time_window", "resource_type": "model", "depends_on": {"macros": ["macro.re_data.time_window_start", "macro.re_data.time_window_end", "macro.dbt_utils.surrogate_key", "macro.re_data.string_type", "macro.re_data.numeric_type", "macro.re_data.timestamp_type", "macro.re_data.interval_length_sec", "macro.re_data.integer_type", "macro.dbt_utils.current_timestamp_in_utc"], "nodes": ["model.re_data.re_data_columns", "model.re_data.re_data_last_base_metrics_thread0", "model.re_data.re_data_last_base_metrics_thread1", "model.re_data.re_data_last_base_metrics_thread2", "model.re_data.re_data_last_base_metrics_thread3", "model.re_data.re_data_last_base_metrics_part0", "model.re_data.re_data_last_base_metrics_part1", "model.re_data.re_data_last_base_metrics_part2", "model.re_data.re_data_last_base_metrics_part3", "model.re_data.re_data_run_started_at", "model.re_data.re_data_monitored", "model.re_data.re_data_last_base_metrics_part0", "model.re_data.re_data_last_base_metrics_part1", "model.re_data.re_data_last_base_metrics_part2", "model.re_data.re_data_last_base_metrics_part3"]}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "sync_all_columns", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "re_data_base_metrics", "fqn": ["re_data", "metrics", "types", "base", "re_data_base_metrics"], "unique_id": "model.re_data.re_data_base_metrics", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "metrics/types/base/re_data_base_metrics.sql", "original_file_path": "models/metrics/types/base/re_data_base_metrics.sql", "name": "re_data_base_metrics", "alias": "", "checksum": {"name": "sha256", "checksum": "c3214900559459705f8131207e5eaff5af3a852994c6035a9af176f2d1d7b021"}, "tags": [], "refs": [["re_data_columns"], ["re_data_last_base_metrics_thread0"], ["re_data_last_base_metrics_thread1"], ["re_data_last_base_metrics_thread2"], ["re_data_last_base_metrics_thread3"], ["re_data_last_base_metrics_part0"], ["re_data_last_base_metrics_part1"], ["re_data_last_base_metrics_part2"], ["re_data_last_base_metrics_part3"], ["re_data_run_started_at"], ["re_data_monitored"], ["re_data_last_base_metrics_part0"], ["re_data_last_base_metrics_part1"], ["re_data_last_base_metrics_part2"], ["re_data_last_base_metrics_part3"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re", "materialized": "incremental", "unique_key": "id", "on_schema_change": "sync_all_columns", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1653334538.962199}, "model.re_data.re_data_last_stats": {"raw_sql": "{% set metrics_tables = ['re_data_base_metrics'] %}\n{% set columns_to_group_by = 'table_name, column_name, metric, interval_length_sec' %}\n\n{%- for table_name in metrics_tables %}\n\n    with median_value as (\n        select distinct\n            table_name,\n            column_name,\n            metric,\n            interval_length_sec,\n            avg(value) {% if target.type != 'postgres' %} over(partition by {{ columns_to_group_by }}) {% endif %} as last_avg,\n            {{ fivetran_utils.percentile(percentile_field='value', partition_field=columns_to_group_by, percent='0.25') }} as last_first_quartile,\n            {{ fivetran_utils.percentile(percentile_field='value', partition_field=columns_to_group_by, percent='0.5') }} as last_median,\n            {{ fivetran_utils.percentile(percentile_field='value', partition_field=columns_to_group_by, percent='0.75') }} as last_third_quartile\n        from\n            {{ ref(table_name) }}\n        where\n            time_window_end > {{- anamaly_detection_time_window_start() -}} and\n            time_window_end <= {{- time_window_end() -}}\n        {% if target.type == 'postgres' %} \n            group by\n                {{ columns_to_group_by }}\n        {% endif %}\n        \n    ), abs_deviation as (\n        select \n            s.table_name,\n            s.column_name,\n            s.metric,\n            s.interval_length_sec,\n            abs( s.value - mv.last_avg ) as absolute_deviation_from_mean,\n            abs( s.value - mv.last_median ) as absolute_deviation_from_median\n        from\n            {{ ref(table_name) }} s\n        left join \n            median_value mv\n            on\n                s.table_name = mv.table_name and\n                s.column_name = mv.column_name and\n                s.metric = mv.metric and\n                s.interval_length_sec = mv.interval_length_sec\n        where\n            s.time_window_end > {{- anamaly_detection_time_window_start() -}} and\n            s.time_window_end <= {{- time_window_end() -}}\n    ), median_abs_deviation as (\n        select distinct\n            table_name,\n            column_name,\n            metric,\n            interval_length_sec,\n            avg(absolute_deviation_from_mean) {% if target.type != 'postgres' %} over(partition by {{ columns_to_group_by }}) {% endif %} as mean_absolute_deviation,\n            {{ fivetran_utils.percentile(percentile_field='absolute_deviation_from_median', partition_field=columns_to_group_by, percent='0.5') }} as median_absolute_deviation\n        from\n            abs_deviation\n        {% if target.type == 'postgres' %} \n            group by\n                {{ columns_to_group_by }}\n        {% endif %}\n    ), stats as (\n        select\n            table_name,\n            column_name,\n            metric,\n            stddev(value) as last_stddev,\n            max(time_window_end) as last_metric_time,\n            interval_length_sec,\n            max(computed_on) as computed_on\n        from\n            {{ ref(table_name) }}\n        where\n            time_window_end > {{- anamaly_detection_time_window_start() -}} and\n            time_window_end <= {{- time_window_end() -}}\n        group by\n            {{ columns_to_group_by }}\n    )\n    select\n        s.table_name,\n        s.column_name,\n        s.metric,\n        mv.last_avg,\n        s.last_stddev,\n        s.last_metric_time,\n        s.interval_length_sec,\n        s.computed_on,\n        mv.last_median,\n        mv.last_first_quartile,\n        mv.last_third_quartile,\n        md.median_absolute_deviation last_median_absolute_deviation,\n        md.mean_absolute_deviation last_mean_absolute_deviation\n    from\n        stats s\n    left join\n        median_value mv\n        on\n            s.table_name = mv.table_name and\n            s.column_name = mv.column_name and\n            s.metric = mv.metric and\n            s.interval_length_sec = mv.interval_length_sec\n    left join\n        median_abs_deviation md\n        on \n            s.table_name = md.table_name and\n            s.column_name = md.column_name and\n            s.metric = md.metric and\n            s.interval_length_sec = md.interval_length_sec\n\n    {%- if not loop.last %} union all {%- endif %}    \n\n{% endfor %}", "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.percentile", "macro.re_data.anamaly_detection_time_window_start", "macro.re_data.time_window_end"], "nodes": ["model.re_data.re_data_base_metrics", "model.re_data.re_data_base_metrics", "model.re_data.re_data_base_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "re_data_last_stats", "fqn": ["re_data", "metrics", "for_anomalies", "re_data_last_stats"], "unique_id": "model.re_data.re_data_last_stats", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "metrics/for_anomalies/re_data_last_stats.sql", "original_file_path": "models/metrics/for_anomalies/re_data_last_stats.sql", "name": "re_data_last_stats", "alias": "", "checksum": {"name": "sha256", "checksum": "0320397e4cc533cffb0a08b72a05f2c33c3d340b8cff7d8d3e601b41f525f121"}, "tags": [], "refs": [["re_data_base_metrics"], ["re_data_base_metrics"], ["re_data_base_metrics"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1653334538.9768682}, "model.re_data.re_data_last_metrics": {"raw_sql": "{% set metrics_tables =  ['re_data_base_metrics'] %}\n\n{%- for table_name in metrics_tables %}\n\n    select\n        table_name,\n        column_name,\n        metric,\n        value as last_value,\n        interval_length_sec,\n        computed_on\n    from \n        {{ ref(table_name) }}\n    where\n        time_window_end = {{- time_window_end() -}}\n\n    {%- if not loop.last %} union all {%- endif %}\n\n{% endfor %}", "resource_type": "model", "depends_on": {"macros": ["macro.re_data.time_window_end"], "nodes": ["model.re_data.re_data_base_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "re_data_last_metrics", "fqn": ["re_data", "metrics", "for_anomalies", "re_data_last_metrics"], "unique_id": "model.re_data.re_data_last_metrics", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "metrics/for_anomalies/re_data_last_metrics.sql", "original_file_path": "models/metrics/for_anomalies/re_data_last_metrics.sql", "name": "re_data_last_metrics", "alias": "", "checksum": {"name": "sha256", "checksum": "d1045609f4c59b1a01fb4472b422e39c4990959f70d9691a3b66136fe6b70df4"}, "tags": [], "refs": [["re_data_base_metrics"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1653334538.9889941}, "model.re_data.re_data_metrics": {"raw_sql": "select * from {{ ref('re_data_base_metrics') }}", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.re_data.re_data_base_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "re_data_metrics", "fqn": ["re_data", "metrics", "final", "re_data_metrics"], "unique_id": "model.re_data.re_data_metrics", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "metrics/final/re_data_metrics.sql", "original_file_path": "models/metrics/final/re_data_metrics.sql", "name": "re_data_metrics", "alias": "", "checksum": {"name": "sha256", "checksum": "035c9fce751ff39b423bed0790f8e00d8de07dfdb32b4c4d0e3cc3996728e8f4"}, "tags": [], "refs": [["re_data_base_metrics"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1653334538.9924679}, "model.re_data.re_data_run_started_at": {"raw_sql": "{{\n    config(\n        materialized='table',\n    )\n}}\n\nselect {{ run_started_at.timestamp() * 1000000 }} as run_started_at", "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "re_internal", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "re_data_run_started_at", "fqn": ["re_data", "internal", "re_data_run_started_at"], "unique_id": "model.re_data.re_data_run_started_at", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "internal/re_data_run_started_at.sql", "original_file_path": "models/internal/re_data_run_started_at.sql", "name": "re_data_run_started_at", "alias": "", "checksum": {"name": "sha256", "checksum": "9eff211f9f07f1678f1b085deab95fc6d74bd74f79014f2f111e2eba01516421"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re_internal", "materialized": "table", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1653334538.993479}, "model.re_data.re_data_last_base_metrics_thread0": {"raw_sql": "{{ re_data_last_base_metrics_thread(0)}}", "resource_type": "model", "depends_on": {"macros": ["macro.re_data.re_data_last_base_metrics_thread"], "nodes": ["model.re_data.re_data_monitored", "model.re_data.re_data_columns", "model.re_data.re_data_run_started_at", "model.re_data.re_data_last_base_metrics_part0"]}, "config": {"enabled": true, "alias": null, "schema": "re_internal", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "re_data_last_base_metrics_thread0", "fqn": ["re_data", "internal", "metrics", "base", "re_data_last_base_metrics_thread0"], "unique_id": "model.re_data.re_data_last_base_metrics_thread0", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "internal/metrics/base/re_data_last_base_metrics_thread0.sql", "original_file_path": "models/internal/metrics/base/re_data_last_base_metrics_thread0.sql", "name": "re_data_last_base_metrics_thread0", "alias": "", "checksum": {"name": "sha256", "checksum": "712c8a9dbf0b14ed9ea070c13489b1966f748e4b57ccc23a75428de29a100f4c"}, "tags": [], "refs": [["re_data_monitored"], ["re_data_columns"], ["re_data_run_started_at"], ["re_data_last_base_metrics_part0"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re_internal", "materialized": "table", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1653334538.996303}, "model.re_data.re_data_last_base_metrics_thread1": {"raw_sql": "{{ re_data_last_base_metrics_thread(1)}}", "resource_type": "model", "depends_on": {"macros": ["macro.re_data.re_data_last_base_metrics_thread"], "nodes": ["model.re_data.re_data_monitored", "model.re_data.re_data_columns", "model.re_data.re_data_run_started_at", "model.re_data.re_data_last_base_metrics_part1"]}, "config": {"enabled": true, "alias": null, "schema": "re_internal", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "re_data_last_base_metrics_thread1", "fqn": ["re_data", "internal", "metrics", "base", "re_data_last_base_metrics_thread1"], "unique_id": "model.re_data.re_data_last_base_metrics_thread1", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "internal/metrics/base/re_data_last_base_metrics_thread1.sql", "original_file_path": "models/internal/metrics/base/re_data_last_base_metrics_thread1.sql", "name": "re_data_last_base_metrics_thread1", "alias": "", "checksum": {"name": "sha256", "checksum": "9d31906e3cef0a10ade87631d4b46f7a3ff8d83c6e240335d2adf6a0eace88fb"}, "tags": [], "refs": [["re_data_monitored"], ["re_data_columns"], ["re_data_run_started_at"], ["re_data_last_base_metrics_part1"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re_internal", "materialized": "table", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1653334539.009068}, "model.re_data.re_data_last_base_metrics_thread3": {"raw_sql": "{{ re_data_last_base_metrics_thread(3)}}", "resource_type": "model", "depends_on": {"macros": ["macro.re_data.re_data_last_base_metrics_thread"], "nodes": ["model.re_data.re_data_monitored", "model.re_data.re_data_columns", "model.re_data.re_data_run_started_at", "model.re_data.re_data_last_base_metrics_part3"]}, "config": {"enabled": true, "alias": null, "schema": "re_internal", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "re_data_last_base_metrics_thread3", "fqn": ["re_data", "internal", "metrics", "base", "re_data_last_base_metrics_thread3"], "unique_id": "model.re_data.re_data_last_base_metrics_thread3", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "internal/metrics/base/re_data_last_base_metrics_thread3.sql", "original_file_path": "models/internal/metrics/base/re_data_last_base_metrics_thread3.sql", "name": "re_data_last_base_metrics_thread3", "alias": "", "checksum": {"name": "sha256", "checksum": "260166d3d7120fdda5b8c28c2a6de356155cc7aad7058cd8e90b31ad0d5b2762"}, "tags": [], "refs": [["re_data_monitored"], ["re_data_columns"], ["re_data_run_started_at"], ["re_data_last_base_metrics_part3"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re_internal", "materialized": "table", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1653334539.012397}, "model.re_data.re_data_last_base_metrics_thread2": {"raw_sql": "{{ re_data_last_base_metrics_thread(2)}}", "resource_type": "model", "depends_on": {"macros": ["macro.re_data.re_data_last_base_metrics_thread"], "nodes": ["model.re_data.re_data_monitored", "model.re_data.re_data_columns", "model.re_data.re_data_run_started_at", "model.re_data.re_data_last_base_metrics_part2"]}, "config": {"enabled": true, "alias": null, "schema": "re_internal", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "re_data_last_base_metrics_thread2", "fqn": ["re_data", "internal", "metrics", "base", "re_data_last_base_metrics_thread2"], "unique_id": "model.re_data.re_data_last_base_metrics_thread2", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "internal/metrics/base/re_data_last_base_metrics_thread2.sql", "original_file_path": "models/internal/metrics/base/re_data_last_base_metrics_thread2.sql", "name": "re_data_last_base_metrics_thread2", "alias": "", "checksum": {"name": "sha256", "checksum": "1ef292e43baeb737bdab647664e7e0d99cf698424f0767bad3dc9172caafd6d9"}, "tags": [], "refs": [["re_data_monitored"], ["re_data_columns"], ["re_data_run_started_at"], ["re_data_last_base_metrics_part2"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re_internal", "materialized": "table", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1653334539.015832}, "model.re_data.re_data_last_base_metrics_part0": {"raw_sql": "{{ re_data_last_base_metrics_part() }}", "resource_type": "model", "depends_on": {"macros": ["macro.re_data.re_data_last_base_metrics_part"], "nodes": ["model.re_data.re_data_columns"]}, "config": {"enabled": true, "alias": null, "schema": "re_internal", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "re_data_last_base_metrics_part0", "fqn": ["re_data", "internal", "metrics", "base", "re_data_last_base_metrics_part0"], "unique_id": "model.re_data.re_data_last_base_metrics_part0", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "internal/metrics/base/re_data_last_base_metrics_part0.sql", "original_file_path": "models/internal/metrics/base/re_data_last_base_metrics_part0.sql", "name": "re_data_last_base_metrics_part0", "alias": "", "checksum": {"name": "sha256", "checksum": "3b165368a21099a738af4fa48ef0cdc5e65757334cbc7efb6401ce2fd4990f42"}, "tags": [], "refs": [["re_data_columns"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re_internal", "materialized": "table", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1653334539.019603}, "model.re_data.re_data_last_base_metrics_part1": {"raw_sql": "{{ re_data_last_base_metrics_part() }}", "resource_type": "model", "depends_on": {"macros": ["macro.re_data.re_data_last_base_metrics_part"], "nodes": ["model.re_data.re_data_columns"]}, "config": {"enabled": true, "alias": null, "schema": "re_internal", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "re_data_last_base_metrics_part1", "fqn": ["re_data", "internal", "metrics", "base", "re_data_last_base_metrics_part1"], "unique_id": "model.re_data.re_data_last_base_metrics_part1", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "internal/metrics/base/re_data_last_base_metrics_part1.sql", "original_file_path": "models/internal/metrics/base/re_data_last_base_metrics_part1.sql", "name": "re_data_last_base_metrics_part1", "alias": "", "checksum": {"name": "sha256", "checksum": "3b165368a21099a738af4fa48ef0cdc5e65757334cbc7efb6401ce2fd4990f42"}, "tags": [], "refs": [["re_data_columns"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re_internal", "materialized": "table", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1653334539.023368}, "model.re_data.re_data_last_base_metrics_part3": {"raw_sql": "{{ re_data_last_base_metrics_part() }}", "resource_type": "model", "depends_on": {"macros": ["macro.re_data.re_data_last_base_metrics_part"], "nodes": ["model.re_data.re_data_columns"]}, "config": {"enabled": true, "alias": null, "schema": "re_internal", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "re_data_last_base_metrics_part3", "fqn": ["re_data", "internal", "metrics", "base", "re_data_last_base_metrics_part3"], "unique_id": "model.re_data.re_data_last_base_metrics_part3", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "internal/metrics/base/re_data_last_base_metrics_part3.sql", "original_file_path": "models/internal/metrics/base/re_data_last_base_metrics_part3.sql", "name": "re_data_last_base_metrics_part3", "alias": "", "checksum": {"name": "sha256", "checksum": "3b165368a21099a738af4fa48ef0cdc5e65757334cbc7efb6401ce2fd4990f42"}, "tags": [], "refs": [["re_data_columns"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re_internal", "materialized": "table", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1653334539.026591}, "model.re_data.re_data_last_base_metrics_part2": {"raw_sql": "{{ re_data_last_base_metrics_part() }}", "resource_type": "model", "depends_on": {"macros": ["macro.re_data.re_data_last_base_metrics_part"], "nodes": ["model.re_data.re_data_columns"]}, "config": {"enabled": true, "alias": null, "schema": "re_internal", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "re_data_last_base_metrics_part2", "fqn": ["re_data", "internal", "metrics", "base", "re_data_last_base_metrics_part2"], "unique_id": "model.re_data.re_data_last_base_metrics_part2", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "internal/metrics/base/re_data_last_base_metrics_part2.sql", "original_file_path": "models/internal/metrics/base/re_data_last_base_metrics_part2.sql", "name": "re_data_last_base_metrics_part2", "alias": "", "checksum": {"name": "sha256", "checksum": "3b165368a21099a738af4fa48ef0cdc5e65757334cbc7efb6401ce2fd4990f42"}, "tags": [], "refs": [["re_data_columns"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re_internal", "materialized": "table", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1653334539.0297139}, "model.re_data.re_data_columns": {"raw_sql": "{{\n    config(\n        materialized='table',\n    )\n}}\n\n-- depends_on: {{ ref('re_data_run_started_at') }}\n-- depends_on: {{ ref('re_data_monitored') }}\n\n{% if execute %}\n    {% set schemas = run_query(re_data.get_schemas()) %}\n    {% if schemas %}\n\n    with columns_from_select as (\n        {% for row in schemas %}\n            {% set schema_name = re_data.name_in_db(re_data.row_value(row, 'schema')) %}\n            {{ get_monitored_columns(schema_name, re_data.row_value(row, 'database')) }}\n        {%- if not loop.last %} union all {%- endif %}\n        {% endfor %}\n    )\n\n    select\n        cast (table_name as {{ string_type() }} ) as name,\n        cast (table_schema as {{ string_type() }} ) as schema,\n        cast (table_catalog as {{ string_type() }} ) as database,\n        cast (column_name as {{ string_type() }} ) as column_name,\n        cast (data_type as {{ string_type() }} ) as data_type,\n        cast (case is_nullable when 'YES' then 1 else 0 end as {{ boolean_type() }} ) as is_nullable,\n        {{- dbt_utils.current_timestamp_in_utc() -}} as computed_on\n    from columns_from_select\n\n    {% else %}\n        {{ empty_columns_table() }}\n    {% endif %}\n\n{% else %}\n    {{ empty_columns_table() }}\n{% endif %}", "resource_type": "model", "depends_on": {"macros": ["macro.re_data.empty_columns_table"], "nodes": ["model.re_data.re_data_run_started_at", "model.re_data.re_data_monitored"]}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "re_data_columns", "fqn": ["re_data", "meta", "re_data_columns"], "unique_id": "model.re_data.re_data_columns", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "meta/re_data_columns.sql", "original_file_path": "models/meta/re_data_columns.sql", "name": "re_data_columns", "alias": "", "checksum": {"name": "sha256", "checksum": "878d5ee2946dc4191a3a18e89bc5cbd41b56abd36f5b4e9dce7b28ca64b97287"}, "tags": [], "refs": [["re_data_run_started_at"], ["re_data_monitored"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re", "materialized": "table", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1653334539.033417}, "model.re_data.re_data_monitored": {"raw_sql": "{{\n    config(\n        materialized='table',\n        unique_key = 'table_name',\n        post_hook=\"{% if execute %}{{ pub_insert_into_re_data_monitored() }}{% endif %}\"\n    )\n}}\n\n{{\n    re_data.empty_table_generic([\n        ('name', 'string'),\n        ('schema', 'string'),\n        ('database', 'string'),\n        ('time_filter', 'string'),\n        ('metrics', 'string'),\n        ('columns', 'string'),\n        ('anomaly_detector', 'string'),\n        ('owners', 'string')\n    ])\n}}", "resource_type": "model", "depends_on": {"macros": ["macro.re_data.empty_table_generic"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "table_name", "on_schema_change": "ignore", "copy_grants": true, "post-hook": [{"sql": "{% if execute %}{{ pub_insert_into_re_data_monitored() }}{% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "FLOW_DEV", "schema": "re_data_monitored", "fqn": ["re_data", "meta", "re_data_monitored"], "unique_id": "model.re_data.re_data_monitored", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "meta/re_data_monitored.sql", "original_file_path": "models/meta/re_data_monitored.sql", "name": "re_data_monitored", "alias": "", "checksum": {"name": "sha256", "checksum": "5eeb7ee72f06f9219cd27167eccdcf62d0851c1ea5c023bfcf43210ad2c9c5de"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re", "materialized": "table", "unique_key": "table_name", "post-hook": ["{% if execute %}{{ pub_insert_into_re_data_monitored() }}{% endif %}"], "copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1653334539.039825}, "model.re_data.re_data_z_score": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        unique_key = 'id',\n        on_schema_change='sync_all_columns',\n    )\n}}\n\nwith z_score_without_id as (\n\n    select\n        stats.table_name as table_name,\n        stats.column_name as column_name,\n        stats.metric as metric,\n        stats.interval_length_sec,\n        (last_metric.last_value - stats.last_avg) / (stats.last_stddev + 0.0000000001) as z_score_value,\n        case\n            when stats.last_median_absolute_deviation = 0 then\n                (last_metric.last_value - stats.last_median) / (1.253314 * (stats.last_mean_absolute_deviation + 0.0000000001))\n            else\n                (0.6745 * (last_metric.last_value - stats.last_median)) / (stats.last_median_absolute_deviation + 0.0000000001) \n        end as modified_z_score_value,\n        last_metric.last_value as last_value,\n        stats.last_avg as last_avg,\n        stats.last_median as last_median,\n        stats.last_stddev as last_stddev,\n        stats.last_median_absolute_deviation,\n        stats.last_mean_absolute_deviation,\n        stats.last_third_quartile - stats.last_first_quartile as last_iqr,\n        stats.last_first_quartile,\n        stats.last_third_quartile,\n        {{ time_window_end() }} as time_window_end,\n        {{dbt_utils.current_timestamp_in_utc()}} as computed_on\n    from\n        {{ ref('re_data_last_stats') }} as stats,\n        {{ ref('re_data_last_metrics') }} as last_metric\n    where\n        stats.table_name = last_metric.table_name and\n        stats.column_name = last_metric.column_name and\n        stats.metric = last_metric.metric and\n        (\n            stats.interval_length_sec = last_metric.interval_length_sec or\n            (stats.interval_length_sec is null and last_metric.interval_length_sec is null)\n        ) and\n        last_metric.last_value is not null and\n        stats.last_avg is not null and\n        stats.last_stddev is not null\n    )\n\nselect\n    {{ dbt_utils.surrogate_key([\n      'table_name',\n      'column_name',\n      'metric',\n      'interval_length_sec',\n      'time_window_end'\n    ]) }} as id,\n    table_name,\n    column_name,\n    metric,\n    z_score_value,\n    modified_z_score_value,\n    last_value,\n    last_avg,\n    last_median,\n    last_stddev,\n    last_median_absolute_deviation,\n    last_mean_absolute_deviation,\n    last_iqr,\n    last_first_quartile,\n    last_third_quartile,\n    time_window_end,\n    interval_length_sec,\n    computed_on\n\nfrom z_score_without_id", "resource_type": "model", "depends_on": {"macros": ["macro.re_data.time_window_end", "macro.dbt_utils.current_timestamp_in_utc", "macro.dbt_utils.surrogate_key"], "nodes": ["model.re_data.re_data_last_stats", "model.re_data.re_data_last_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "sync_all_columns", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "re_data_z_score", "fqn": ["re_data", "alerts", "re_data_z_score"], "unique_id": "model.re_data.re_data_z_score", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "alerts/re_data_z_score.sql", "original_file_path": "models/alerts/re_data_z_score.sql", "name": "re_data_z_score", "alias": "", "checksum": {"name": "sha256", "checksum": "45ac17a3e95445668c964635de2d7095af1e9e2010ab2b7977559a2ff7384390"}, "tags": [], "refs": [["re_data_last_stats"], ["re_data_last_metrics"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re", "materialized": "incremental", "unique_key": "id", "on_schema_change": "sync_all_columns", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1653334539.044288}, "model.re_data.re_data_anomalies": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\nselect\n    z.id,\n    z.table_name,\n    z.column_name,\n    z.metric,\n    z.z_score_value,\n    z.modified_z_score_value,\n    m.anomaly_detector,\n    z.last_value,\n    z.last_avg,\n    z.last_median,\n    z.last_stddev,\n    z.last_median_absolute_deviation,\n    z.last_mean_absolute_deviation,\n    z.last_iqr,\n    z.last_first_quartile - (cast( {{ fivetran_utils.json_extract('m.anomaly_detector', 'whisker_boundary_multiplier') }} as {{numeric_type()}} ) * z.last_iqr) lower_bound,\n    z.last_third_quartile + (cast( {{ fivetran_utils.json_extract('m.anomaly_detector', 'whisker_boundary_multiplier') }} as {{numeric_type()}} ) * z.last_iqr) upper_bound,\n    z.last_first_quartile,\n    z.last_third_quartile,\n    z.time_window_end,\n    z.interval_length_sec,\n    z.computed_on,\n    {{ re_data.generate_anomaly_message('z.column_name', 'z.metric', 'z.last_value', 'z.last_avg') }} as message,\n    {{ re_data.generate_metric_value_text('z.metric', 'z.last_value') }} as last_value_text\nfrom\n    {{ ref('re_data_z_score')}} z \nleft join {{ ref('re_data_monitored') }} m \non {{ split_and_return_nth_value('table_name', '.', 1) }} = m.database\nand {{ split_and_return_nth_value('table_name', '.', 2) }} = m.schema\nand {{ split_and_return_nth_value('table_name', '.', 3) }} = m.name\nwhere\n    case \n        when {{ fivetran_utils.json_extract('m.anomaly_detector', 'name') }} = 'z_score' \n            then abs(z_score_value) > cast({{ fivetran_utils.json_extract('m.anomaly_detector', 'threshold') }} as {{ numeric_type() }})\n        when {{ fivetran_utils.json_extract('m.anomaly_detector', 'name') }} = 'modified_z_score' \n            then abs(modified_z_score_value) > cast( {{ fivetran_utils.json_extract('m.anomaly_detector', 'threshold') }} as {{numeric_type()}} )\n        when {{ fivetran_utils.json_extract('m.anomaly_detector', 'name') }} = 'boxplot' \n            then (\n                z.last_value < z.last_first_quartile - (cast( {{ fivetran_utils.json_extract('m.anomaly_detector', 'whisker_boundary_multiplier') }} as {{numeric_type()}} ) * z.last_iqr)\n                or \n                z.last_value > z.last_third_quartile + (cast( {{ fivetran_utils.json_extract('m.anomaly_detector', 'whisker_boundary_multiplier') }} as {{numeric_type()}} ) * z.last_iqr)\n            )\n        else false\n    end", "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.json_extract", "macro.re_data.numeric_type", "macro.re_data.generate_anomaly_message", "macro.re_data.generate_metric_value_text", "macro.re_data.split_and_return_nth_value"], "nodes": ["model.re_data.re_data_z_score", "model.re_data.re_data_monitored"]}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "re_data_anomalies", "fqn": ["re_data", "alerts", "re_data_anomalies"], "unique_id": "model.re_data.re_data_anomalies", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "alerts/re_data_anomalies.sql", "original_file_path": "models/alerts/re_data_anomalies.sql", "name": "re_data_anomalies", "alias": "", "checksum": {"name": "sha256", "checksum": "f46ef99df133003b2cf3e738a97e86ac57ace36a92286b11a524cc759aa97169"}, "tags": [], "refs": [["re_data_z_score"], ["re_data_monitored"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re", "materialized": "view", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1653334539.0495548}, "model.re_data.re_data_test_runs": {"raw_sql": "{{\n    config(\n        materialized='view'\n    )\n}}\n\nselect \n    sum(case when status = 'Fail' then 1 else 0 end) as failed,\n    sum(case when status = 'Pass' then 1 else 0 end) as passed,\n    run_at\nfrom {{ ref ('re_data_test_history') }}\ngroup by run_at\norder by run_at desc", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.re_data.re_data_test_history"]}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "re_data_test_runs", "fqn": ["re_data", "alerts", "re_data_test_runs"], "unique_id": "model.re_data.re_data_test_runs", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "alerts/re_data_test_runs.sql", "original_file_path": "models/alerts/re_data_test_runs.sql", "name": "re_data_test_runs", "alias": "", "checksum": {"name": "sha256", "checksum": "9d0e3fd6a05b5b18dc9da7471a34871402b68acc230f69a771b2c351ec16f6e1"}, "tags": [], "refs": [["re_data_test_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re", "materialized": "view", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1653334539.0679522}, "model.re_data.re_data_alerts": {"raw_sql": "select\n    'anomaly' as type,\n    {{ re_data.clean_blacklist('table_name', ['\"', '`'], '') }} as model,\n    message,\n    last_value_text as value,\n    time_window_end\nfrom\n    {{ ref('re_data_anomalies') }}\nunion all\n\nselect\n    'schema_change' as type,\n    {{ re_data.clean_blacklist('table_name', ['\"', '`'], '') }} as model,\n    {{ generate_schema_change_message('operation', 'column_name', 'prev_column_name', 'prev_data_type', 'data_type', 'detected_time') }} as message,\n    '' as value,\n    detected_time as time_window_end\nfrom {{ ref('re_data_schema_changes') }}\n\nunion all\n\nselect\n    'test' as type,\n    table_name as model,\n    {{ generate_failed_test_message('test_name', 'column_name') }},\n    status as value,\n    run_at as time_window_end\n\nfrom {{ ref('re_data_test_history') }}\nwhere status = 'Fail' or status = 'Error'", "resource_type": "model", "depends_on": {"macros": ["macro.re_data.clean_blacklist", "macro.re_data.generate_schema_change_message", "macro.re_data.generate_failed_test_message"], "nodes": ["model.re_data.re_data_anomalies", "model.re_data.re_data_schema_changes", "model.re_data.re_data_test_history"]}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "re_data_alerts", "fqn": ["re_data", "alerts", "re_data_alerts"], "unique_id": "model.re_data.re_data_alerts", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "alerts/re_data_alerts.sql", "original_file_path": "models/alerts/re_data_alerts.sql", "name": "re_data_alerts", "alias": "", "checksum": {"name": "sha256", "checksum": "16f169160f635e8d919d7707991a9341a9df664b2021e0124ca93ef75495287e"}, "tags": [], "refs": [["re_data_anomalies"], ["re_data_schema_changes"], ["re_data_test_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1653334539.069077}, "model.re_data.re_data_schema_changes": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        unique_key = 'id',\n        on_schema_change='sync_all_columns',\n    )\n}}\n\n-- depends_on: {{ ref('re_data_run_started_at') }}\n-- depends_on: {{ ref('re_data_columns_over_time') }}\n-- depends_on: {{ ref('re_data_monitored') }}\n\n{% if execute and not re_data.in_compile() %}\n    {% set last_data_points %} \n        select\n            distinct detected_time\n        from {{ ref('re_data_columns_over_time') }}\n        order by\n        detected_time desc limit 2;\n    {% endset %}\n\n    {% set detected_times = run_query(last_data_points) %}\n\n    {% set times_list = detected_times.columns[0].values() %}\n    {% set most_recent_time = times_list[0] %}\n\n    {% if times_list | length > 1 %}\n        {% set prev_most_recent = times_list[1] %}\n    {% else %}\n        {% set prev_most_recent = times_list[0] %}\n    {% endif %}\n{% else %}\n    {% set times_list = () %}\n{% endif %}\n\n{% if times_list == () %}\n    {{\n        re_data.empty_table_generic([\n            ('id', 'string'),\n            ('table_name', 'string'),\n            ('operation', 'string'),\n            ('column_name', 'string'),\n            ('data_type', 'string'),\n            ('is_nullable', 'boolean'),\n            ('prev_column_name', 'string'),\n            ('prev_data_type', 'string'),\n            ('prev_is_nullable', 'boolean'),\n            ('detected_time', 'timestamp')\n            ])\n    }}\n{% else %}\n\n    with curr_monitored_schema as (\n        select * from {{ ref('re_data_columns_over_time')}}\n        where detected_time = '{{ most_recent_time }}'\n        and table_name in (\n            select {{ full_table_name('name', 'schema', 'database') }} from {{ ref('re_data_monitored')}}\n        )\n    ),\n\n\n    prev_monitored_schema as (\n        select * from {{ ref('re_data_columns_over_time')}}\n        where detected_time = '{{ prev_most_recent}}'\n        and table_name in (\n            select {{ full_table_name('name', 'schema', 'database') }} from {{ ref('re_data_monitored')}}\n        )\n    ),\n\n    all_changes as (\n            (\n            select\n                curr.table_name as table_name,\n                'type_change' as operation,\n                curr.column_name as column_name,\n                curr.data_type as data_type,\n                curr.is_nullable as is_nullable,\n\n                prev.column_name as prev_column_name,\n                prev.data_type as prev_data_type,\n                prev.is_nullable as prev_is_nullable\n            \n            from curr_monitored_schema curr inner join prev_monitored_schema prev on (curr.table_name = prev.table_name and curr.column_name = prev.column_name)\n            where\n                curr.data_type != prev.data_type or \n                curr.is_nullable != prev.is_nullable\n            )\n\n        union all\n\n        (\n\n            select\n                curr.table_name as table_name,\n                'column_added' as operation,\n                curr.column_name as column_name,\n                curr.data_type as data_type,\n                curr.is_nullable as is_nullable,\n\n                null as prev_column_name,\n                null as prev_data_type,\n                null as prev_is_nullable\n            \n            from curr_monitored_schema curr left join prev_monitored_schema prev on (curr.table_name = prev.table_name and curr.column_name = prev.column_name)\n            where prev.table_name is null and prev.column_name is null\n            {# note: when a column is added, make sure we only detect for models that were previously monitored,\n            this avoids a situation where a newly monitored model has all its columns detected with 'column_added' operation#}\n            and curr.table_name in (\n                select table_name from prev_monitored_schema\n            )\n        \n        )\n\n        union all\n\n        (\n\n            select\n                prev.table_name as table_name,\n                'column_removed' as operation,\n                null as column_name,\n                null as data_type,\n                null as is_nullable,\n\n                prev.column_name as prev_column_name,\n                prev.data_type as prev_data_type,\n                prev.is_nullable as prev_is_nullable\n            \n            from prev_monitored_schema prev left join curr_monitored_schema curr on (curr.table_name = prev.table_name and curr.column_name = prev.column_name)\n            where curr.table_name is null and curr.column_name is null\n\n        )\n    ),\n\n    all_with_time as (\n        select\n            all_changes.table_name,\n            all_changes.operation,\n            all_changes.column_name,\n            all_changes.data_type,\n            all_changes.is_nullable,\n            all_changes.prev_column_name,\n            all_changes.prev_data_type,\n            all_changes.prev_is_nullable,\n            {{dbt_utils.current_timestamp_in_utc()}} as detected_time\n        from all_changes\n    )\n\n    select \n        {{ dbt_utils.surrogate_key([\n        'table_name',\n        'column_name',\n        'detected_time'\n        ]) }} as id,\n        table_name,\n        operation,\n        column_name,\n        data_type,\n        is_nullable,\n        prev_column_name,\n        prev_data_type,\n        prev_is_nullable,\n        detected_time\n    from all_with_time\n    \n{% endif %}", "resource_type": "model", "depends_on": {"macros": ["macro.re_data.empty_table_generic"], "nodes": ["model.re_data.re_data_run_started_at", "model.re_data.re_data_columns_over_time", "model.re_data.re_data_monitored"]}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "sync_all_columns", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "re_data_schema_changes", "fqn": ["re_data", "alerts", "re_data_schema_changes"], "unique_id": "model.re_data.re_data_schema_changes", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "alerts/re_data_schema_changes.sql", "original_file_path": "models/alerts/re_data_schema_changes.sql", "name": "re_data_schema_changes", "alias": "", "checksum": {"name": "sha256", "checksum": "12fb3a65d481f40d5fff087e729fba0e3ecdd7e6a0995fc059be03fe9a34c4eb"}, "tags": [], "refs": [["re_data_run_started_at"], ["re_data_columns_over_time"], ["re_data_monitored"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re", "materialized": "incremental", "unique_key": "id", "on_schema_change": "sync_all_columns", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1653334539.0744221}, "model.re_data.re_data_test_history": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        on_schema_change='sync_all_columns',\n    )\n}}\n\n{{\n    re_data.empty_table_generic([\n        ('table_name', 'string'),\n        ('column_name', 'string'),\n        ('test_name', 'string'),\n        ('status', 'string'),\n        ('execution_time', 'numeric'),\n        ('message', 'string'),\n        ('failures_count', 'numeric'),\n        ('failures_json', 'long_string'),\n        ('failures_table', 'long_string'),\n        ('severity', 'string'),\n        ('compiled_sql', 'long_string'),\n        ('run_at', 'timestamp')\n    ])\n}}", "resource_type": "model", "depends_on": {"macros": ["macro.re_data.empty_table_generic"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "re_data_test_history", "fqn": ["re_data", "logs", "re_data_test_history"], "unique_id": "model.re_data.re_data_test_history", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "logs/re_data_test_history.sql", "original_file_path": "models/logs/re_data_test_history.sql", "name": "re_data_test_history", "alias": "", "checksum": {"name": "sha256", "checksum": "e73d55ac2c224a95a19f06fc98acd14e23536048131384e4f043dfe312c86a1d"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re", "materialized": "incremental", "on_schema_change": "sync_all_columns", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1653334539.0823119}, "operation.re_data.re_data-on-run-end-0": {"raw_sql": "{% if var('re_data:save_test_history') %} {{ re_data.save_test_history(results) }} {% endif %}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "re", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "FLOW_DEV", "schema": "re_data-on-run-end-0", "fqn": ["re_data", "hooks", "re_data-on-run-end-0"], "unique_id": "operation.re_data.re_data-on-run-end-0", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "hooks/re_data-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "name": "re_data-on-run-end-0", "alias": "", "checksum": {"name": "sha256", "checksum": "170865b31c903520aaa07b92b7a9935b60bd708c12dfe19822986c37fe954c0d"}, "tags": ["on-run-end"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "re", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1653334539.090134, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}, "test.flow_models.not_null_core__fact_blocks_block_height.69ece9390c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_height", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_blocks_block_height"], "unique_id": "test.flow_models.not_null_core__fact_blocks_block_height.69ece9390c", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_blocks_block_height.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_block_height", "alias": "fact_blocks_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.112581, "column_name": "block_height", "file_key_name": "models.core__fact_blocks"}, "test.flow_models.unique_core__fact_blocks_block_height.cf41b05a2d": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "block_height", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.flow_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "unique_core", "fqn": ["flow_models", "core", "unique_core__fact_blocks_block_height"], "unique_id": "test.flow_models.unique_core__fact_blocks_block_height.cf41b05a2d", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "unique_core__fact_blocks_block_height.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "unique_core__fact_blocks_block_height", "alias": "fact_blocks_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.113429, "column_name": "block_height", "file_key_name": "models.core__fact_blocks"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_block_height__NUMBER__FLOAT.c551ea53de": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_260bc5a99a933e66a4eb827527e2b686\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "block_height", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_260bc5a99a933e66a4eb827527e2b686", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_block_height__NUMBER__FLOAT"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_block_height__NUMBER__FLOAT.c551ea53de", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_260bc5a99a933e66a4eb827527e2b686.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_block_height__NUMBER__FLOAT", "alias": "fact_blocks_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_260bc5a99a933e66a4eb827527e2b686"}, "created_at": 1653334539.114202, "column_name": "block_height", "file_key_name": "models.core__fact_blocks"}, "test.flow_models.not_null_core__fact_blocks_block_timestamp.19853d3758": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_blocks_block_timestamp"], "unique_id": "test.flow_models.not_null_core__fact_blocks_block_timestamp.19853d3758", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_blocks_block_timestamp.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_block_timestamp", "alias": "fact_blocks_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.11987, "column_name": "block_timestamp", "file_key_name": "models.core__fact_blocks"}, "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_block_timestamp__day__1.5ba40a446b": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_d247dc3a8e9b2d385ce445b0e87585c7\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_d247dc3a8e9b2d385ce445b0e87585c7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_block_timestamp__day__1"], "unique_id": "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_block_timestamp__day__1.5ba40a446b", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_row_va_d247dc3a8e9b2d385ce445b0e87585c7.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_block_timestamp__day__1", "alias": "fact_blocks_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_d247dc3a8e9b2d385ce445b0e87585c7"}, "created_at": 1653334539.1206348, "column_name": "block_timestamp", "file_key_name": "models.core__fact_blocks"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_block_timestamp__TIMESTAMP_NTZ.d2fe6e451c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_54dbaeb3f53b8506693602a1a9d86e6d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_54dbaeb3f53b8506693602a1a9d86e6d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_block_timestamp__TIMESTAMP_NTZ"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_block_timestamp__TIMESTAMP_NTZ.d2fe6e451c", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_54dbaeb3f53b8506693602a1a9d86e6d.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_block_timestamp__TIMESTAMP_NTZ", "alias": "fact_blocks_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_54dbaeb3f53b8506693602a1a9d86e6d"}, "created_at": 1653334539.1292632, "column_name": "block_timestamp", "file_key_name": "models.core__fact_blocks"}, "test.flow_models.not_null_core__fact_blocks_network.2708505a8a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "network", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_blocks_network"], "unique_id": "test.flow_models.not_null_core__fact_blocks_network.2708505a8a", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_blocks_network.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_network", "alias": "fact_blocks_network", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.131271, "column_name": "network", "file_key_name": "models.core__fact_blocks"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_network__STRING__VARCHAR.68dc7d044a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f0e3df2b03d75265156192eccab4de46\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "network", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f0e3df2b03d75265156192eccab4de46", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_network__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_network__STRING__VARCHAR.68dc7d044a", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_f0e3df2b03d75265156192eccab4de46.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_network__STRING__VARCHAR", "alias": "fact_blocks_network", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f0e3df2b03d75265156192eccab4de46"}, "created_at": 1653334539.132041, "column_name": "network", "file_key_name": "models.core__fact_blocks"}, "test.flow_models.not_null_core__fact_blocks_chain_id.dda8c73722": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "chain_id", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_blocks_chain_id"], "unique_id": "test.flow_models.not_null_core__fact_blocks_chain_id.dda8c73722", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_blocks_chain_id.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_chain_id", "alias": "fact_blocks_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.134194, "column_name": "chain_id", "file_key_name": "models.core__fact_blocks"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_chain_id__STRING__VARCHAR.ccd79281c7": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4b69ce0944df6569d9798383d0ec3446\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "chain_id", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4b69ce0944df6569d9798383d0ec3446", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_chain_id__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_chain_id__STRING__VARCHAR.ccd79281c7", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_4b69ce0944df6569d9798383d0ec3446.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_chain_id__STRING__VARCHAR", "alias": "fact_blocks_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_4b69ce0944df6569d9798383d0ec3446"}, "created_at": 1653334539.1349618, "column_name": "chain_id", "file_key_name": "models.core__fact_blocks"}, "test.flow_models.not_null_core__fact_blocks_tx_count.168249e174": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_count", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_blocks_tx_count"], "unique_id": "test.flow_models.not_null_core__fact_blocks_tx_count.168249e174", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_blocks_tx_count.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_tx_count", "alias": "fact_blocks_tx_count", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.1371012, "column_name": "tx_count", "file_key_name": "models.core__fact_blocks"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_tx_count__NUMBER.7f70f6af70": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a1980e3c1a5100a654027c786d939251\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "tx_count", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a1980e3c1a5100a654027c786d939251", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_tx_count__NUMBER"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_tx_count__NUMBER.7f70f6af70", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_a1980e3c1a5100a654027c786d939251.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_tx_count__NUMBER", "alias": "fact_blocks_tx_count", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a1980e3c1a5100a654027c786d939251"}, "created_at": 1653334539.1378639, "column_name": "tx_count", "file_key_name": "models.core__fact_blocks"}, "test.flow_models.not_null_core__fact_blocks_id.88f5737541": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_blocks_id"], "unique_id": "test.flow_models.not_null_core__fact_blocks_id.88f5737541", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_blocks_id.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_id", "alias": "fact_blocks_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.139864, "column_name": "id", "file_key_name": "models.core__fact_blocks"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_id__STRING__VARCHAR.b957f32491": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_21bc299a2ff05472d30d5ca71699f1cd\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "id", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_21bc299a2ff05472d30d5ca71699f1cd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_id__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_id__STRING__VARCHAR.b957f32491", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_21bc299a2ff05472d30d5ca71699f1cd.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_id__STRING__VARCHAR", "alias": "fact_blocks_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_21bc299a2ff05472d30d5ca71699f1cd"}, "created_at": 1653334539.140625, "column_name": "id", "file_key_name": "models.core__fact_blocks"}, "test.flow_models.not_null_core__fact_blocks_parent_id.a9c18dafa8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "parent_id", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_blocks_parent_id"], "unique_id": "test.flow_models.not_null_core__fact_blocks_parent_id.a9c18dafa8", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_blocks_parent_id.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_parent_id", "alias": "fact_blocks_parent_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.1427488, "column_name": "parent_id", "file_key_name": "models.core__fact_blocks"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_parent_id__STRING__VARCHAR.9494ae2ff5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_38a83937755e9d905548132a104d98ec\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "parent_id", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_38a83937755e9d905548132a104d98ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_parent_id__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_parent_id__STRING__VARCHAR.9494ae2ff5", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_38a83937755e9d905548132a104d98ec.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_parent_id__STRING__VARCHAR", "alias": "fact_blocks_parent_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_38a83937755e9d905548132a104d98ec"}, "created_at": 1653334539.143507, "column_name": "parent_id", "file_key_name": "models.core__fact_blocks"}, "test.flow_models.not_null_core__fact_transactions_tx_id.dd94c1ac9e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_id", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_transactions_tx_id"], "unique_id": "test.flow_models.not_null_core__fact_transactions_tx_id.dd94c1ac9e", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_transactions_tx_id.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_tx_id", "alias": "fact_transactions_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.148129, "column_name": "tx_id", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.unique_core__fact_transactions_tx_id.211ea20522": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "tx_id", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "unique_core", "fqn": ["flow_models", "core", "unique_core__fact_transactions_tx_id"], "unique_id": "test.flow_models.unique_core__fact_transactions_tx_id.211ea20522", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "unique_core__fact_transactions_tx_id.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "unique_core__fact_transactions_tx_id", "alias": "fact_transactions_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.1489012, "column_name": "tx_id", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.not_null_core__fact_transactions_block_timestamp.32cc47fbb2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_transactions_block_timestamp"], "unique_id": "test.flow_models.not_null_core__fact_transactions_block_timestamp.32cc47fbb2", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_transactions_block_timestamp.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_block_timestamp", "alias": "fact_transactions_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.150038, "column_name": "block_timestamp", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_block_timestamp__day__1.7e1b77d1c2": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_adab143db73fcddd15bcfb64c7902075\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_adab143db73fcddd15bcfb64c7902075", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_block_timestamp__day__1"], "unique_id": "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_block_timestamp__day__1.7e1b77d1c2", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_row_va_adab143db73fcddd15bcfb64c7902075.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_block_timestamp__day__1", "alias": "fact_transactions_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_adab143db73fcddd15bcfb64c7902075"}, "created_at": 1653334539.1508029, "column_name": "block_timestamp", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_timestamp__TIMESTAMP_NTZ.4c087aa60b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2809782f3f590041385eab8bd583f3da\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2809782f3f590041385eab8bd583f3da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_timestamp__TIMESTAMP_NTZ"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_timestamp__TIMESTAMP_NTZ.4c087aa60b", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_2809782f3f590041385eab8bd583f3da.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_timestamp__TIMESTAMP_NTZ", "alias": "fact_transactions_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2809782f3f590041385eab8bd583f3da"}, "created_at": 1653334539.153356, "column_name": "block_timestamp", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.not_null_core__fact_transactions_block_height.b73a6596e7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_height", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_transactions_block_height"], "unique_id": "test.flow_models.not_null_core__fact_transactions_block_height.b73a6596e7", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_transactions_block_height.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_block_height", "alias": "fact_transactions_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.1553311, "column_name": "block_height", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_height__NUMBER__FLOAT.5fa2b2e8e3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8f536c0d7c468d7991761cbccc9e544a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "block_height", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8f536c0d7c468d7991761cbccc9e544a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_height__NUMBER__FLOAT"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_height__NUMBER__FLOAT.5fa2b2e8e3", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_8f536c0d7c468d7991761cbccc9e544a.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_height__NUMBER__FLOAT", "alias": "fact_transactions_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8f536c0d7c468d7991761cbccc9e544a"}, "created_at": 1653334539.156076, "column_name": "block_height", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.not_null_core__fact_transactions_chain_id.e687eaeb3e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "chain_id", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_transactions_chain_id"], "unique_id": "test.flow_models.not_null_core__fact_transactions_chain_id.e687eaeb3e", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_transactions_chain_id.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_chain_id", "alias": "fact_transactions_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.158187, "column_name": "chain_id", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_chain_id__STRING__VARCHAR.5f1f4feacd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3c746f0b700b44431e84404ddb30a21d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "chain_id", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3c746f0b700b44431e84404ddb30a21d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_chain_id__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_chain_id__STRING__VARCHAR.5f1f4feacd", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_3c746f0b700b44431e84404ddb30a21d.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_chain_id__STRING__VARCHAR", "alias": "fact_transactions_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_3c746f0b700b44431e84404ddb30a21d"}, "created_at": 1653334539.158937, "column_name": "chain_id", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.not_null_core__fact_transactions_tx_index.4b4bf18757": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_index", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_transactions_tx_index"], "unique_id": "test.flow_models.not_null_core__fact_transactions_tx_index.4b4bf18757", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_transactions_tx_index.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_tx_index", "alias": "fact_transactions_tx_index", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.161061, "column_name": "tx_index", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_index__NUMBER.8612fa3af5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d938b9cf661a27b6709c0412bb2dc4c4\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "tx_index", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d938b9cf661a27b6709c0412bb2dc4c4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_index__NUMBER"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_index__NUMBER.8612fa3af5", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_d938b9cf661a27b6709c0412bb2dc4c4.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_index__NUMBER", "alias": "fact_transactions_tx_index", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d938b9cf661a27b6709c0412bb2dc4c4"}, "created_at": 1653334539.161817, "column_name": "tx_index", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.not_null_core__fact_transactions_proposer.990b43a37e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "proposer", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_transactions_proposer"], "unique_id": "test.flow_models.not_null_core__fact_transactions_proposer.990b43a37e", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_transactions_proposer.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_proposer", "alias": "fact_transactions_proposer", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.163796, "column_name": "proposer", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_proposer__STRING__VARCHAR.3162d546cc": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_92e499eed487c2b11e18d8deb95f17d9\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "proposer", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_92e499eed487c2b11e18d8deb95f17d9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_proposer__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_proposer__STRING__VARCHAR.3162d546cc", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_92e499eed487c2b11e18d8deb95f17d9.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_proposer__STRING__VARCHAR", "alias": "fact_transactions_proposer", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_92e499eed487c2b11e18d8deb95f17d9"}, "created_at": 1653334539.164547, "column_name": "proposer", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.not_null_core__fact_transactions_payer.ca8c699f21": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payer", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_transactions_payer"], "unique_id": "test.flow_models.not_null_core__fact_transactions_payer.ca8c699f21", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_transactions_payer.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_payer", "alias": "fact_transactions_payer", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.16667, "column_name": "payer", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_payer__STRING__VARCHAR.7f4eda4774": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b2ef60ba4c3119d95704cf2188c716b1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "payer", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b2ef60ba4c3119d95704cf2188c716b1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_payer__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_payer__STRING__VARCHAR.7f4eda4774", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_b2ef60ba4c3119d95704cf2188c716b1.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_payer__STRING__VARCHAR", "alias": "fact_transactions_payer", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b2ef60ba4c3119d95704cf2188c716b1"}, "created_at": 1653334539.167424, "column_name": "payer", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.not_null_core__fact_transactions_authorizers.1c6d0dc6dd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "authorizers", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_transactions_authorizers"], "unique_id": "test.flow_models.not_null_core__fact_transactions_authorizers.1c6d0dc6dd", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_transactions_authorizers.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_authorizers", "alias": "fact_transactions_authorizers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.169566, "column_name": "authorizers", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_authorizers__ARRAY.40cd40c72c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_514e0d16c0be849611973b01304d8139\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY"], "column_name": "authorizers", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_514e0d16c0be849611973b01304d8139", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_authorizers__ARRAY"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_authorizers__ARRAY.40cd40c72c", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_514e0d16c0be849611973b01304d8139.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_authorizers__ARRAY", "alias": "fact_transactions_authorizers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_514e0d16c0be849611973b01304d8139"}, "created_at": 1653334539.1703198, "column_name": "authorizers", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.not_null_core__fact_transactions_count_authorizers.b2e0d7cb4a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "count_authorizers", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_transactions_count_authorizers"], "unique_id": "test.flow_models.not_null_core__fact_transactions_count_authorizers.b2e0d7cb4a", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_transactions_count_authorizers.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_count_authorizers", "alias": "fact_transactions_count_authorizers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.172308, "column_name": "count_authorizers", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_count_authorizers__NUMBER.56bac6ce9a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_732f9d68ddecaa61d82e3b958a336cc6\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "count_authorizers", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_732f9d68ddecaa61d82e3b958a336cc6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_count_authorizers__NUMBER"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_count_authorizers__NUMBER.56bac6ce9a", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_732f9d68ddecaa61d82e3b958a336cc6.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_count_authorizers__NUMBER", "alias": "fact_transactions_count_authorizers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_732f9d68ddecaa61d82e3b958a336cc6"}, "created_at": 1653334539.1730618, "column_name": "count_authorizers", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.not_null_core__fact_transactions_gas_limit.c3fb97a749": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gas_limit", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_transactions_gas_limit"], "unique_id": "test.flow_models.not_null_core__fact_transactions_gas_limit.c3fb97a749", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_transactions_gas_limit.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_gas_limit", "alias": "fact_transactions_gas_limit", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.175062, "column_name": "gas_limit", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_gas_limit__NUMBER.86a8eb924d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e82d6a4482a136f3db15a1c431193eeb\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "gas_limit", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e82d6a4482a136f3db15a1c431193eeb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_gas_limit__NUMBER"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_gas_limit__NUMBER.86a8eb924d", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_e82d6a4482a136f3db15a1c431193eeb.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_gas_limit__NUMBER", "alias": "fact_transactions_gas_limit", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e82d6a4482a136f3db15a1c431193eeb"}, "created_at": 1653334539.175811, "column_name": "gas_limit", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.not_null_core__fact_transactions_transaction_result.6b64c04382": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_result", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_transactions_transaction_result"], "unique_id": "test.flow_models.not_null_core__fact_transactions_transaction_result.6b64c04382", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_transactions_transaction_result.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_transaction_result", "alias": "fact_transactions_transaction_result", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.177805, "column_name": "transaction_result", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_transaction_result__VARIANT.24fe91c33c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_73c56c1d1d1145366866aac67072799b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARIANT"], "column_name": "transaction_result", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_73c56c1d1d1145366866aac67072799b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_transaction_result__VARIANT"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_transaction_result__VARIANT.24fe91c33c", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_73c56c1d1d1145366866aac67072799b.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_transaction_result__VARIANT", "alias": "fact_transactions_transaction_result", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_73c56c1d1d1145366866aac67072799b"}, "created_at": 1653334539.17856, "column_name": "transaction_result", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.not_null_core__fact_transactions_tx_succeeded.85fd90691c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_transactions_tx_succeeded"], "unique_id": "test.flow_models.not_null_core__fact_transactions_tx_succeeded.85fd90691c", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_transactions_tx_succeeded.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_tx_succeeded", "alias": "fact_transactions_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.180547, "column_name": "tx_succeeded", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_succeeded__BOOLEAN.0243d3b703": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_04419e0c3827544c62a872c3ffcf7357\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_04419e0c3827544c62a872c3ffcf7357", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_succeeded__BOOLEAN"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_succeeded__BOOLEAN.0243d3b703", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_04419e0c3827544c62a872c3ffcf7357.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_succeeded__BOOLEAN", "alias": "fact_transactions_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_04419e0c3827544c62a872c3ffcf7357"}, "created_at": 1653334539.181299, "column_name": "tx_succeeded", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.not_null_core__fact_transactions_error_msg.63392f4710": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "error_msg", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_transactions_error_msg"], "unique_id": "test.flow_models.not_null_core__fact_transactions_error_msg.63392f4710", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_transactions_error_msg.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_error_msg", "alias": "fact_transactions_error_msg", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.183574, "column_name": "error_msg", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_error_msg__STRING__VARCHAR.e752ab1a51": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e33a0df6d9b7a951ec6bbc171be6e8de\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "error_msg", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e33a0df6d9b7a951ec6bbc171be6e8de", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_error_msg__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_error_msg__STRING__VARCHAR.e752ab1a51", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_e33a0df6d9b7a951ec6bbc171be6e8de.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_error_msg__STRING__VARCHAR", "alias": "fact_transactions_error_msg", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e33a0df6d9b7a951ec6bbc171be6e8de"}, "created_at": 1653334539.1843169, "column_name": "error_msg", "file_key_name": "models.core__fact_transactions"}, "test.flow_models.dbt_utils_unique_combination_of_columns_core__fact_transactions_tx_id__block_height.3964206ae1": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_dedb756c38ae0c981db303110accb927\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["tx_id", "block_height"], "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_utils"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_dedb756c38ae0c981db303110accb927", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["flow_models", "core", "dbt_utils_unique_combination_of_columns_core__fact_transactions_tx_id__block_height"], "unique_id": "test.flow_models.dbt_utils_unique_combination_of_columns_core__fact_transactions_tx_id__block_height.3964206ae1", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_utils_unique_combination_o_dedb756c38ae0c981db303110accb927.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_utils_unique_combination_of_columns_core__fact_transactions_tx_id__block_height", "alias": "fact_transactions_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_dedb756c38ae0c981db303110accb927"}, "created_at": 1653334539.18642, "column_name": null, "file_key_name": "models.core__fact_transactions"}, "test.flow_models.not_null_core__fact_events_tx_id.a75802bdbe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_id", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_events_tx_id"], "unique_id": "test.flow_models.not_null_core__fact_events_tx_id.a75802bdbe", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_events_tx_id.sql", "original_file_path": "models/core/core__fact_events.yml", "name": "not_null_core__fact_events_tx_id", "alias": "fact_events_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.192605, "column_name": "tx_id", "file_key_name": "models.core__fact_events"}, "test.flow_models.not_null_core__fact_events_block_timestamp.d98411a5a4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_events_block_timestamp"], "unique_id": "test.flow_models.not_null_core__fact_events_block_timestamp.d98411a5a4", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_events_block_timestamp.sql", "original_file_path": "models/core/core__fact_events.yml", "name": "not_null_core__fact_events_block_timestamp", "alias": "fact_events_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.19337, "column_name": "block_timestamp", "file_key_name": "models.core__fact_events"}, "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_events_block_timestamp__day__1.964ce35cb0": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_deebe87ac6fa3c848c8ef787354a5d94\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_deebe87ac6fa3c848c8ef787354a5d94", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_events_block_timestamp__day__1"], "unique_id": "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_events_block_timestamp__day__1.964ce35cb0", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_row_va_deebe87ac6fa3c848c8ef787354a5d94.sql", "original_file_path": "models/core/core__fact_events.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_events_block_timestamp__day__1", "alias": "fact_events_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_deebe87ac6fa3c848c8ef787354a5d94"}, "created_at": 1653334539.19412, "column_name": "block_timestamp", "file_key_name": "models.core__fact_events"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_block_timestamp__TIMESTAMP_NTZ.6ae335d7ec": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_49b1b5f9b0b616e9e270c1e4d36614a9\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_49b1b5f9b0b616e9e270c1e4d36614a9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_block_timestamp__TIMESTAMP_NTZ"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_block_timestamp__TIMESTAMP_NTZ.6ae335d7ec", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_49b1b5f9b0b616e9e270c1e4d36614a9.sql", "original_file_path": "models/core/core__fact_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_block_timestamp__TIMESTAMP_NTZ", "alias": "fact_events_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_49b1b5f9b0b616e9e270c1e4d36614a9"}, "created_at": 1653334539.1967099, "column_name": "block_timestamp", "file_key_name": "models.core__fact_events"}, "test.flow_models.not_null_core__fact_events_block_height.b32a201e7c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_height", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_events_block_height"], "unique_id": "test.flow_models.not_null_core__fact_events_block_height.b32a201e7c", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_events_block_height.sql", "original_file_path": "models/core/core__fact_events.yml", "name": "not_null_core__fact_events_block_height", "alias": "fact_events_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.198685, "column_name": "block_height", "file_key_name": "models.core__fact_events"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_block_height__NUMBER__FLOAT.fe6965678e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b9b76796379a97de199adb91acb39f6f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "block_height", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b9b76796379a97de199adb91acb39f6f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_block_height__NUMBER__FLOAT"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_block_height__NUMBER__FLOAT.fe6965678e", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_b9b76796379a97de199adb91acb39f6f.sql", "original_file_path": "models/core/core__fact_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_block_height__NUMBER__FLOAT", "alias": "fact_events_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b9b76796379a97de199adb91acb39f6f"}, "created_at": 1653334539.199434, "column_name": "block_height", "file_key_name": "models.core__fact_events"}, "test.flow_models.not_null_core__fact_events_tx_succeeded.a025fdaade": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_events_tx_succeeded"], "unique_id": "test.flow_models.not_null_core__fact_events_tx_succeeded.a025fdaade", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_events_tx_succeeded.sql", "original_file_path": "models/core/core__fact_events.yml", "name": "not_null_core__fact_events_tx_succeeded", "alias": "fact_events_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.201559, "column_name": "tx_succeeded", "file_key_name": "models.core__fact_events"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_tx_succeeded__BOOLEAN.45ed5180fb": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c9c0ebbf65aa5accc026d464f435d6e4\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c9c0ebbf65aa5accc026d464f435d6e4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_tx_succeeded__BOOLEAN"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_tx_succeeded__BOOLEAN.45ed5180fb", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_c9c0ebbf65aa5accc026d464f435d6e4.sql", "original_file_path": "models/core/core__fact_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_tx_succeeded__BOOLEAN", "alias": "fact_events_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c9c0ebbf65aa5accc026d464f435d6e4"}, "created_at": 1653334539.202312, "column_name": "tx_succeeded", "file_key_name": "models.core__fact_events"}, "test.flow_models.not_null_core__fact_events_event_index.6ef75550ae": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_index", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_events_event_index"], "unique_id": "test.flow_models.not_null_core__fact_events_event_index.6ef75550ae", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_events_event_index.sql", "original_file_path": "models/core/core__fact_events.yml", "name": "not_null_core__fact_events_event_index", "alias": "fact_events_event_index", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.2042959, "column_name": "event_index", "file_key_name": "models.core__fact_events"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_index__NUMBER.97adfdc32e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_15c783b75ff7677c1e5721721a6bf7c8\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "event_index", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_15c783b75ff7677c1e5721721a6bf7c8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_index__NUMBER"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_index__NUMBER.97adfdc32e", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_15c783b75ff7677c1e5721721a6bf7c8.sql", "original_file_path": "models/core/core__fact_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_index__NUMBER", "alias": "fact_events_event_index", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_15c783b75ff7677c1e5721721a6bf7c8"}, "created_at": 1653334539.205048, "column_name": "event_index", "file_key_name": "models.core__fact_events"}, "test.flow_models.not_null_core__fact_events_event_contract.10b5644238": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_contract", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_events_event_contract"], "unique_id": "test.flow_models.not_null_core__fact_events_event_contract.10b5644238", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_events_event_contract.sql", "original_file_path": "models/core/core__fact_events.yml", "name": "not_null_core__fact_events_event_contract", "alias": "fact_events_event_contract", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.2070541, "column_name": "event_contract", "file_key_name": "models.core__fact_events"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_contract__STRING__VARCHAR.71773095a7": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c099e3e53d7b1336eb352df479ee74ca\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "event_contract", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c099e3e53d7b1336eb352df479ee74ca", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_contract__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_contract__STRING__VARCHAR.71773095a7", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_c099e3e53d7b1336eb352df479ee74ca.sql", "original_file_path": "models/core/core__fact_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_contract__STRING__VARCHAR", "alias": "fact_events_event_contract", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c099e3e53d7b1336eb352df479ee74ca"}, "created_at": 1653334539.207834, "column_name": "event_contract", "file_key_name": "models.core__fact_events"}, "test.flow_models.not_null_core__fact_events_event_type.d865a2b006": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_type", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_events_event_type"], "unique_id": "test.flow_models.not_null_core__fact_events_event_type.d865a2b006", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_events_event_type.sql", "original_file_path": "models/core/core__fact_events.yml", "name": "not_null_core__fact_events_event_type", "alias": "fact_events_event_type", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.210104, "column_name": "event_type", "file_key_name": "models.core__fact_events"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_type__STRING__VARCHAR.7f1b318eb5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_20d6bd155395ffd91b62dfa67e8ed490\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "event_type", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_20d6bd155395ffd91b62dfa67e8ed490", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_type__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_type__STRING__VARCHAR.7f1b318eb5", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_20d6bd155395ffd91b62dfa67e8ed490.sql", "original_file_path": "models/core/core__fact_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_type__STRING__VARCHAR", "alias": "fact_events_event_type", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_20d6bd155395ffd91b62dfa67e8ed490"}, "created_at": 1653334539.2108958, "column_name": "event_type", "file_key_name": "models.core__fact_events"}, "test.flow_models.not_null_core__fact_events_event_data.ed27e5dfa3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_data", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__fact_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__fact_events_event_data"], "unique_id": "test.flow_models.not_null_core__fact_events_event_data.ed27e5dfa3", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__fact_events_event_data.sql", "original_file_path": "models/core/core__fact_events.yml", "name": "not_null_core__fact_events_event_data", "alias": "fact_events_event_data", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.213162, "column_name": "event_data", "file_key_name": "models.core__fact_events"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_data__OBJECT.e938d8505a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ef1700159542758631ae9bea35c8dc2c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["OBJECT"], "column_name": "event_data", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ef1700159542758631ae9bea35c8dc2c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_data__OBJECT"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_data__OBJECT.e938d8505a", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_ef1700159542758631ae9bea35c8dc2c.sql", "original_file_path": "models/core/core__fact_events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_data__OBJECT", "alias": "fact_events_event_data", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ef1700159542758631ae9bea35c8dc2c"}, "created_at": 1653334539.2139509, "column_name": "event_data", "file_key_name": "models.core__fact_events"}, "test.flow_models.dbt_utils_unique_combination_of_columns_core__fact_events_tx_id__event_index.094fa0d9a0": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a5b5bced5890b51c5f97e0e6bfba9ad6\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["tx_id", "event_index"], "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": "dbt_utils"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__fact_events"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a5b5bced5890b51c5f97e0e6bfba9ad6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["flow_models", "core", "dbt_utils_unique_combination_of_columns_core__fact_events_tx_id__event_index"], "unique_id": "test.flow_models.dbt_utils_unique_combination_of_columns_core__fact_events_tx_id__event_index.094fa0d9a0", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_utils_unique_combination_o_a5b5bced5890b51c5f97e0e6bfba9ad6.sql", "original_file_path": "models/core/core__fact_events.yml", "name": "dbt_utils_unique_combination_of_columns_core__fact_events_tx_id__event_index", "alias": "fact_events_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a5b5bced5890b51c5f97e0e6bfba9ad6"}, "created_at": 1653334539.2160761, "column_name": null, "file_key_name": "models.core__fact_events"}, "test.flow_models.not_null_core__dim_labels_event_contract.c70a664b67": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_contract", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__dim_labels_event_contract"], "unique_id": "test.flow_models.not_null_core__dim_labels_event_contract.c70a664b67", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__dim_labels_event_contract.sql", "original_file_path": "models/core/core__dim_labels.yml", "name": "not_null_core__dim_labels_event_contract", "alias": "dim_labels_event_contract", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.2195342, "column_name": "event_contract", "file_key_name": "models.core__dim_labels"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_event_contract__STRING__VARCHAR.cd982a2f62": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f4760789a177ad675e99ea1fb56ade30\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "event_contract", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f4760789a177ad675e99ea1fb56ade30", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_event_contract__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_event_contract__STRING__VARCHAR.cd982a2f62", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_f4760789a177ad675e99ea1fb56ade30.sql", "original_file_path": "models/core/core__dim_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_event_contract__STRING__VARCHAR", "alias": "dim_labels_event_contract", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f4760789a177ad675e99ea1fb56ade30"}, "created_at": 1653334539.220358, "column_name": "event_contract", "file_key_name": "models.core__dim_labels"}, "test.flow_models.not_null_core__dim_labels_contract_name.d1c9ccfd7a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contract_name", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__dim_labels_contract_name"], "unique_id": "test.flow_models.not_null_core__dim_labels_contract_name.d1c9ccfd7a", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__dim_labels_contract_name.sql", "original_file_path": "models/core/core__dim_labels.yml", "name": "not_null_core__dim_labels_contract_name", "alias": "dim_labels_contract_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.2226229, "column_name": "contract_name", "file_key_name": "models.core__dim_labels"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_contract_name__STRING__VARCHAR.37bd52ee24": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ea4eef0bb6e0bcb3e3f5c6713e7084ef\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "contract_name", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ea4eef0bb6e0bcb3e3f5c6713e7084ef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_contract_name__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_contract_name__STRING__VARCHAR.37bd52ee24", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_ea4eef0bb6e0bcb3e3f5c6713e7084ef.sql", "original_file_path": "models/core/core__dim_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_contract_name__STRING__VARCHAR", "alias": "dim_labels_contract_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ea4eef0bb6e0bcb3e3f5c6713e7084ef"}, "created_at": 1653334539.223404, "column_name": "contract_name", "file_key_name": "models.core__dim_labels"}, "test.flow_models.not_null_core__dim_labels_account_address.fc9945d183": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_address", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_core", "fqn": ["flow_models", "core", "not_null_core__dim_labels_account_address"], "unique_id": "test.flow_models.not_null_core__dim_labels_account_address.fc9945d183", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_core__dim_labels_account_address.sql", "original_file_path": "models/core/core__dim_labels.yml", "name": "not_null_core__dim_labels_account_address", "alias": "dim_labels_account_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.225627, "column_name": "account_address", "file_key_name": "models.core__dim_labels"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_account_address__STRING__VARCHAR.4b53ffd7f1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_04f058904a4870013e91bb3548ff97fc\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "account_address", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_04f058904a4870013e91bb3548ff97fc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["flow_models", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_account_address__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_account_address__STRING__VARCHAR.4b53ffd7f1", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_04f058904a4870013e91bb3548ff97fc.sql", "original_file_path": "models/core/core__dim_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_account_address__STRING__VARCHAR", "alias": "dim_labels_account_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_04f058904a4870013e91bb3548ff97fc"}, "created_at": 1653334539.226402, "column_name": "account_address", "file_key_name": "models.core__dim_labels"}, "test.flow_models.dbt_utils_unique_combination_of_columns_core__dim_labels_event_contract__contract_name.061b59b87d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_fdbbebf6f7ccec59c30e3050b387d2b5\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["event_contract", "contract_name"], "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_utils"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_fdbbebf6f7ccec59c30e3050b387d2b5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["flow_models", "core", "dbt_utils_unique_combination_of_columns_core__dim_labels_event_contract__contract_name"], "unique_id": "test.flow_models.dbt_utils_unique_combination_of_columns_core__dim_labels_event_contract__contract_name.061b59b87d", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_utils_unique_combination_o_fdbbebf6f7ccec59c30e3050b387d2b5.sql", "original_file_path": "models/core/core__dim_labels.yml", "name": "dbt_utils_unique_combination_of_columns_core__dim_labels_event_contract__contract_name", "alias": "dim_labels_event_contract", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_fdbbebf6f7ccec59c30e3050b387d2b5"}, "created_at": 1653334539.228605, "column_name": null, "file_key_name": "models.core__dim_labels"}, "test.flow_models.not_null_silver__blocks_block_height.02ee14acf0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_height", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__blocks_block_height"], "unique_id": "test.flow_models.not_null_silver__blocks_block_height.02ee14acf0", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__blocks_block_height.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_block_height", "alias": "blocks_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.2325902, "column_name": "block_height", "file_key_name": "models.silver__blocks"}, "test.flow_models.unique_silver__blocks_block_height.478ce02832": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "block_height", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.flow_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "unique_silver", "fqn": ["flow_models", "silver", "unique_silver__blocks_block_height"], "unique_id": "test.flow_models.unique_silver__blocks_block_height.478ce02832", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "unique_silver__blocks_block_height.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "unique_silver__blocks_block_height", "alias": "blocks_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.233381, "column_name": "block_height", "file_key_name": "models.silver__blocks"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_height__NUMBER__FLOAT.08d0d3007d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8d9ba6000505b85e43c4cca58e4fd480\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "block_height", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8d9ba6000505b85e43c4cca58e4fd480", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_height__NUMBER__FLOAT"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_height__NUMBER__FLOAT.08d0d3007d", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_8d9ba6000505b85e43c4cca58e4fd480.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_height__NUMBER__FLOAT", "alias": "blocks_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8d9ba6000505b85e43c4cca58e4fd480"}, "created_at": 1653334539.234153, "column_name": "block_height", "file_key_name": "models.silver__blocks"}, "test.flow_models.not_null_silver__blocks_block_timestamp.0920efa41b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__blocks_block_timestamp"], "unique_id": "test.flow_models.not_null_silver__blocks_block_timestamp.0920efa41b", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__blocks_block_timestamp.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_block_timestamp", "alias": "blocks_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.2363431, "column_name": "block_timestamp", "file_key_name": "models.silver__blocks"}, "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_block_timestamp__day__1.21cac2f295": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_f8c7cb807bf5527b93589f5606885739\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_f8c7cb807bf5527b93589f5606885739", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_block_timestamp__day__1"], "unique_id": "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_block_timestamp__day__1.21cac2f295", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_row_va_f8c7cb807bf5527b93589f5606885739.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_block_timestamp__day__1", "alias": "blocks_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_f8c7cb807bf5527b93589f5606885739"}, "created_at": 1653334539.237111, "column_name": "block_timestamp", "file_key_name": "models.silver__blocks"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_timestamp__TIMESTAMP_NTZ.a690d9e325": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_48f7fbc31e0abd10b3a5ed647d44f893\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_48f7fbc31e0abd10b3a5ed647d44f893", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_timestamp__TIMESTAMP_NTZ"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_timestamp__TIMESTAMP_NTZ.a690d9e325", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_48f7fbc31e0abd10b3a5ed647d44f893.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_timestamp__TIMESTAMP_NTZ", "alias": "blocks_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_48f7fbc31e0abd10b3a5ed647d44f893"}, "created_at": 1653334539.239765, "column_name": "block_timestamp", "file_key_name": "models.silver__blocks"}, "test.flow_models.not_null_silver__blocks_network.2020ad46b9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "network", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__blocks_network"], "unique_id": "test.flow_models.not_null_silver__blocks_network.2020ad46b9", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__blocks_network.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_network", "alias": "blocks_network", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.2418072, "column_name": "network", "file_key_name": "models.silver__blocks"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_network__STRING__VARCHAR.26015d603d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6ce2617efc68e1ea8aec0fc45e0b4ac1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "network", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6ce2617efc68e1ea8aec0fc45e0b4ac1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_network__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_network__STRING__VARCHAR.26015d603d", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_6ce2617efc68e1ea8aec0fc45e0b4ac1.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_network__STRING__VARCHAR", "alias": "blocks_network", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6ce2617efc68e1ea8aec0fc45e0b4ac1"}, "created_at": 1653334539.242576, "column_name": "network", "file_key_name": "models.silver__blocks"}, "test.flow_models.not_null_silver__blocks_chain_id.e394116ffd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "chain_id", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__blocks_chain_id"], "unique_id": "test.flow_models.not_null_silver__blocks_chain_id.e394116ffd", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__blocks_chain_id.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_chain_id", "alias": "blocks_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.244787, "column_name": "chain_id", "file_key_name": "models.silver__blocks"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_chain_id__STRING__VARCHAR.584a39c0cd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d363e95fdd4f6eac4459965af4d4b68e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "chain_id", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d363e95fdd4f6eac4459965af4d4b68e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_chain_id__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_chain_id__STRING__VARCHAR.584a39c0cd", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_d363e95fdd4f6eac4459965af4d4b68e.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_chain_id__STRING__VARCHAR", "alias": "blocks_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d363e95fdd4f6eac4459965af4d4b68e"}, "created_at": 1653334539.245558, "column_name": "chain_id", "file_key_name": "models.silver__blocks"}, "test.flow_models.not_null_silver__blocks_tx_count.94a4655c16": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_count", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__blocks_tx_count"], "unique_id": "test.flow_models.not_null_silver__blocks_tx_count.94a4655c16", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__blocks_tx_count.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_tx_count", "alias": "blocks_tx_count", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.2479591, "column_name": "tx_count", "file_key_name": "models.silver__blocks"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_tx_count__NUMBER.1cb989a05c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e46175e725b11de66317d10c04b3eba2\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "tx_count", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e46175e725b11de66317d10c04b3eba2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_tx_count__NUMBER"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_tx_count__NUMBER.1cb989a05c", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_e46175e725b11de66317d10c04b3eba2.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_tx_count__NUMBER", "alias": "blocks_tx_count", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e46175e725b11de66317d10c04b3eba2"}, "created_at": 1653334539.248907, "column_name": "tx_count", "file_key_name": "models.silver__blocks"}, "test.flow_models.not_null_silver__blocks_id.b40d544128": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__blocks_id"], "unique_id": "test.flow_models.not_null_silver__blocks_id.b40d544128", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__blocks_id.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_id", "alias": "blocks_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.250944, "column_name": "id", "file_key_name": "models.silver__blocks"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_id__STRING__VARCHAR.8bb956333b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e52839f96189e2588cd49f7b3d94c101\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "id", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e52839f96189e2588cd49f7b3d94c101", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_id__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_id__STRING__VARCHAR.8bb956333b", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_e52839f96189e2588cd49f7b3d94c101.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_id__STRING__VARCHAR", "alias": "blocks_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e52839f96189e2588cd49f7b3d94c101"}, "created_at": 1653334539.252121, "column_name": "id", "file_key_name": "models.silver__blocks"}, "test.flow_models.not_null_silver__blocks_parent_id.af2d66dc40": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "parent_id", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__blocks_parent_id"], "unique_id": "test.flow_models.not_null_silver__blocks_parent_id.af2d66dc40", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__blocks_parent_id.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_parent_id", "alias": "blocks_parent_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.2542238, "column_name": "parent_id", "file_key_name": "models.silver__blocks"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_parent_id__STRING__VARCHAR.7766b9947a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ef5ad2056578d02115f04a085e4ba84c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "parent_id", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ef5ad2056578d02115f04a085e4ba84c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_parent_id__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_parent_id__STRING__VARCHAR.7766b9947a", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_ef5ad2056578d02115f04a085e4ba84c.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_parent_id__STRING__VARCHAR", "alias": "blocks_parent_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ef5ad2056578d02115f04a085e4ba84c"}, "created_at": 1653334539.255127, "column_name": "parent_id", "file_key_name": "models.silver__blocks"}, "test.flow_models.not_null_silver__blocks__ingested_at.1c6c52802e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_ingested_at", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__blocks__ingested_at"], "unique_id": "test.flow_models.not_null_silver__blocks__ingested_at.1c6c52802e", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__blocks__ingested_at.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks__ingested_at", "alias": "blocks", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.257191, "column_name": "_ingested_at", "file_key_name": "models.silver__blocks"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__ingested_at__TIMESTAMP_NTZ.09b669eb41": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bc73b9e4faeef7ce8f8d898b455c8e81\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_ingested_at", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bc73b9e4faeef7ce8f8d898b455c8e81", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__ingested_at__TIMESTAMP_NTZ"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__ingested_at__TIMESTAMP_NTZ.09b669eb41", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_bc73b9e4faeef7ce8f8d898b455c8e81.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__ingested_at__TIMESTAMP_NTZ", "alias": "blocks", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_bc73b9e4faeef7ce8f8d898b455c8e81"}, "created_at": 1653334539.258112, "column_name": "_ingested_at", "file_key_name": "models.silver__blocks"}, "test.flow_models.dbt_utils_unique_combination_of_columns_silver__blocks_block_height.856e4b724d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7b1f5b6ed9ce9877c70c9cc986c947f6\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_height"], "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_utils"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7b1f5b6ed9ce9877c70c9cc986c947f6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["flow_models", "silver", "dbt_utils_unique_combination_of_columns_silver__blocks_block_height"], "unique_id": "test.flow_models.dbt_utils_unique_combination_of_columns_silver__blocks_block_height.856e4b724d", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_utils_unique_combination_o_7b1f5b6ed9ce9877c70c9cc986c947f6.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_utils_unique_combination_of_columns_silver__blocks_block_height", "alias": "blocks_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7b1f5b6ed9ce9877c70c9cc986c947f6"}, "created_at": 1653334539.260261, "column_name": null, "file_key_name": "models.silver__blocks"}, "test.flow_models.not_null_silver__events_event_id.c5f00655c1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__events_event_id"], "unique_id": "test.flow_models.not_null_silver__events_event_id.c5f00655c1", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__events_event_id.sql", "original_file_path": "models/silver/silver__events.yml", "name": "not_null_silver__events_event_id", "alias": "events_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.265013, "column_name": "event_id", "file_key_name": "models.silver__events"}, "test.flow_models.unique_silver__events_event_id.c34161972a": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "unique_silver", "fqn": ["flow_models", "silver", "unique_silver__events_event_id"], "unique_id": "test.flow_models.unique_silver__events_event_id.c34161972a", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "unique_silver__events_event_id.sql", "original_file_path": "models/silver/silver__events.yml", "name": "unique_silver__events_event_id", "alias": "events_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.265862, "column_name": "event_id", "file_key_name": "models.silver__events"}, "test.flow_models.not_null_silver__events_tx_id.2724c3889b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_id", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__events_tx_id"], "unique_id": "test.flow_models.not_null_silver__events_tx_id.2724c3889b", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__events_tx_id.sql", "original_file_path": "models/silver/silver__events.yml", "name": "not_null_silver__events_tx_id", "alias": "events_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.266638, "column_name": "tx_id", "file_key_name": "models.silver__events"}, "test.flow_models.not_null_silver__events_block_timestamp.0d672756c9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__events_block_timestamp"], "unique_id": "test.flow_models.not_null_silver__events_block_timestamp.0d672756c9", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__events_block_timestamp.sql", "original_file_path": "models/silver/silver__events.yml", "name": "not_null_silver__events_block_timestamp", "alias": "events_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.26754, "column_name": "block_timestamp", "file_key_name": "models.silver__events"}, "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__events_block_timestamp__day__1.e66863d1b6": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_1c5589da757435406908297f9363cbe0\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_1c5589da757435406908297f9363cbe0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__events_block_timestamp__day__1"], "unique_id": "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__events_block_timestamp__day__1.e66863d1b6", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_row_va_1c5589da757435406908297f9363cbe0.sql", "original_file_path": "models/silver/silver__events.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__events_block_timestamp__day__1", "alias": "events_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_1c5589da757435406908297f9363cbe0"}, "created_at": 1653334539.268346, "column_name": "block_timestamp", "file_key_name": "models.silver__events"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_block_timestamp__TIMESTAMP_NTZ.b8159b300f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_73cddc455e64e69abd404cf8fad83d91\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_73cddc455e64e69abd404cf8fad83d91", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_block_timestamp__TIMESTAMP_NTZ"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_block_timestamp__TIMESTAMP_NTZ.b8159b300f", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_73cddc455e64e69abd404cf8fad83d91.sql", "original_file_path": "models/silver/silver__events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_block_timestamp__TIMESTAMP_NTZ", "alias": "events_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_73cddc455e64e69abd404cf8fad83d91"}, "created_at": 1653334539.271234, "column_name": "block_timestamp", "file_key_name": "models.silver__events"}, "test.flow_models.not_null_silver__events_block_height.7977589637": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_height", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__events_block_height"], "unique_id": "test.flow_models.not_null_silver__events_block_height.7977589637", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__events_block_height.sql", "original_file_path": "models/silver/silver__events.yml", "name": "not_null_silver__events_block_height", "alias": "events_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.273254, "column_name": "block_height", "file_key_name": "models.silver__events"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_block_height__NUMBER__FLOAT.638b29edb1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_692b835c226209a476c88646f66b5283\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "block_height", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_692b835c226209a476c88646f66b5283", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_block_height__NUMBER__FLOAT"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_block_height__NUMBER__FLOAT.638b29edb1", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_692b835c226209a476c88646f66b5283.sql", "original_file_path": "models/silver/silver__events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_block_height__NUMBER__FLOAT", "alias": "events_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_692b835c226209a476c88646f66b5283"}, "created_at": 1653334539.274008, "column_name": "block_height", "file_key_name": "models.silver__events"}, "test.flow_models.not_null_silver__events_tx_succeeded.ab918b04f1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__events_tx_succeeded"], "unique_id": "test.flow_models.not_null_silver__events_tx_succeeded.ab918b04f1", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__events_tx_succeeded.sql", "original_file_path": "models/silver/silver__events.yml", "name": "not_null_silver__events_tx_succeeded", "alias": "events_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.276151, "column_name": "tx_succeeded", "file_key_name": "models.silver__events"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_tx_succeeded__BOOLEAN.eeaef620f9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_86d75de89b36aa53343ff2c1db53d2b5\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_86d75de89b36aa53343ff2c1db53d2b5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_tx_succeeded__BOOLEAN"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_tx_succeeded__BOOLEAN.eeaef620f9", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_86d75de89b36aa53343ff2c1db53d2b5.sql", "original_file_path": "models/silver/silver__events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_tx_succeeded__BOOLEAN", "alias": "events_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_86d75de89b36aa53343ff2c1db53d2b5"}, "created_at": 1653334539.276911, "column_name": "tx_succeeded", "file_key_name": "models.silver__events"}, "test.flow_models.not_null_silver__events_event_index.4e05dcc574": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_index", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__events_event_index"], "unique_id": "test.flow_models.not_null_silver__events_event_index.4e05dcc574", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__events_event_index.sql", "original_file_path": "models/silver/silver__events.yml", "name": "not_null_silver__events_event_index", "alias": "events_event_index", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.278909, "column_name": "event_index", "file_key_name": "models.silver__events"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_index__NUMBER.bb1ee7bb7a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_399c3d967ee5e584a257ed0247390d44\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "event_index", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_399c3d967ee5e584a257ed0247390d44", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_index__NUMBER"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_index__NUMBER.bb1ee7bb7a", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_399c3d967ee5e584a257ed0247390d44.sql", "original_file_path": "models/silver/silver__events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_index__NUMBER", "alias": "events_event_index", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_399c3d967ee5e584a257ed0247390d44"}, "created_at": 1653334539.279661, "column_name": "event_index", "file_key_name": "models.silver__events"}, "test.flow_models.not_null_silver__events_event_contract.d88483871a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_contract", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__events_event_contract"], "unique_id": "test.flow_models.not_null_silver__events_event_contract.d88483871a", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__events_event_contract.sql", "original_file_path": "models/silver/silver__events.yml", "name": "not_null_silver__events_event_contract", "alias": "events_event_contract", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.281661, "column_name": "event_contract", "file_key_name": "models.silver__events"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_contract__STRING__VARCHAR.ed992b96f4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a79461e873cd6a0b7a56c73ec15b691d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "event_contract", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a79461e873cd6a0b7a56c73ec15b691d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_contract__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_contract__STRING__VARCHAR.ed992b96f4", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_a79461e873cd6a0b7a56c73ec15b691d.sql", "original_file_path": "models/silver/silver__events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_contract__STRING__VARCHAR", "alias": "events_event_contract", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a79461e873cd6a0b7a56c73ec15b691d"}, "created_at": 1653334539.28241, "column_name": "event_contract", "file_key_name": "models.silver__events"}, "test.flow_models.not_null_silver__events_event_type.e87e1cd6bf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_type", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__events_event_type"], "unique_id": "test.flow_models.not_null_silver__events_event_type.e87e1cd6bf", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__events_event_type.sql", "original_file_path": "models/silver/silver__events.yml", "name": "not_null_silver__events_event_type", "alias": "events_event_type", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.2845418, "column_name": "event_type", "file_key_name": "models.silver__events"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_type__STRING__VARCHAR.12fbcff915": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8a67767c13639fc4367a7c51331c48a0\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "event_type", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8a67767c13639fc4367a7c51331c48a0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_type__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_type__STRING__VARCHAR.12fbcff915", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_8a67767c13639fc4367a7c51331c48a0.sql", "original_file_path": "models/silver/silver__events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_type__STRING__VARCHAR", "alias": "events_event_type", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8a67767c13639fc4367a7c51331c48a0"}, "created_at": 1653334539.285295, "column_name": "event_type", "file_key_name": "models.silver__events"}, "test.flow_models.not_null_silver__events_event_data.b8ca9adb1b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_data", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__events_event_data"], "unique_id": "test.flow_models.not_null_silver__events_event_data.b8ca9adb1b", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__events_event_data.sql", "original_file_path": "models/silver/silver__events.yml", "name": "not_null_silver__events_event_data", "alias": "events_event_data", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.2876449, "column_name": "event_data", "file_key_name": "models.silver__events"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_data__VARIANT.7e8a001808": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fa06e988dbe04f2fbdf94789c95e25ea\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARIANT"], "column_name": "event_data", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fa06e988dbe04f2fbdf94789c95e25ea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_data__VARIANT"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_data__VARIANT.7e8a001808", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_fa06e988dbe04f2fbdf94789c95e25ea.sql", "original_file_path": "models/silver/silver__events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_data__VARIANT", "alias": "events_event_data", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_fa06e988dbe04f2fbdf94789c95e25ea"}, "created_at": 1653334539.288387, "column_name": "event_data", "file_key_name": "models.silver__events"}, "test.flow_models.not_null_silver__events__event_data_type.db25419673": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_event_data_type", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__events__event_data_type"], "unique_id": "test.flow_models.not_null_silver__events__event_data_type.db25419673", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__events__event_data_type.sql", "original_file_path": "models/silver/silver__events.yml", "name": "not_null_silver__events__event_data_type", "alias": "events", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.290356, "column_name": "_event_data_type", "file_key_name": "models.silver__events"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events__event_data_type__VARIANT.6a1896af64": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_87e252b7a7bd010b6e62ba24c26cd68b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARIANT"], "column_name": "_event_data_type", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_87e252b7a7bd010b6e62ba24c26cd68b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__events__event_data_type__VARIANT"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events__event_data_type__VARIANT.6a1896af64", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_87e252b7a7bd010b6e62ba24c26cd68b.sql", "original_file_path": "models/silver/silver__events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__events__event_data_type__VARIANT", "alias": "events", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_87e252b7a7bd010b6e62ba24c26cd68b"}, "created_at": 1653334539.2911081, "column_name": "_event_data_type", "file_key_name": "models.silver__events"}, "test.flow_models.not_null_silver__events__event_data_fields.32c9e3af8c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_event_data_fields", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__events__event_data_fields"], "unique_id": "test.flow_models.not_null_silver__events__event_data_fields.32c9e3af8c", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__events__event_data_fields.sql", "original_file_path": "models/silver/silver__events.yml", "name": "not_null_silver__events__event_data_fields", "alias": "events", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.29308, "column_name": "_event_data_fields", "file_key_name": "models.silver__events"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events__event_data_fields__VARIANT.8f36b05ba8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5b29ef3b5e8402e5f8f07150913d6c51\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARIANT"], "column_name": "_event_data_fields", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5b29ef3b5e8402e5f8f07150913d6c51", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__events__event_data_fields__VARIANT"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events__event_data_fields__VARIANT.8f36b05ba8", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_5b29ef3b5e8402e5f8f07150913d6c51.sql", "original_file_path": "models/silver/silver__events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__events__event_data_fields__VARIANT", "alias": "events", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_5b29ef3b5e8402e5f8f07150913d6c51"}, "created_at": 1653334539.293835, "column_name": "_event_data_fields", "file_key_name": "models.silver__events"}, "test.flow_models.not_null_silver__events__ingested_at.0281fcdbea": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_ingested_at", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__events__ingested_at"], "unique_id": "test.flow_models.not_null_silver__events__ingested_at.0281fcdbea", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__events__ingested_at.sql", "original_file_path": "models/silver/silver__events.yml", "name": "not_null_silver__events__ingested_at", "alias": "events", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.295808, "column_name": "_ingested_at", "file_key_name": "models.silver__events"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events__ingested_at__TIMESTAMP_NTZ.0bf7d77559": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c6e793f319b3ed1ee467223b202d3159\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_ingested_at", "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c6e793f319b3ed1ee467223b202d3159", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__events__ingested_at__TIMESTAMP_NTZ"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events__ingested_at__TIMESTAMP_NTZ.0bf7d77559", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_c6e793f319b3ed1ee467223b202d3159.sql", "original_file_path": "models/silver/silver__events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__events__ingested_at__TIMESTAMP_NTZ", "alias": "events", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c6e793f319b3ed1ee467223b202d3159"}, "created_at": 1653334539.296556, "column_name": "_ingested_at", "file_key_name": "models.silver__events"}, "test.flow_models.dbt_utils_unique_combination_of_columns_silver__events_tx_id__event_index.5975227b3b": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8f41430c9e7c236eba8f9a800b3d18ad\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["tx_id", "event_index"], "model": "{{ get_where_subquery(ref('silver__events')) }}"}, "namespace": "dbt_utils"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__events"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8f41430c9e7c236eba8f9a800b3d18ad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["flow_models", "silver", "dbt_utils_unique_combination_of_columns_silver__events_tx_id__event_index"], "unique_id": "test.flow_models.dbt_utils_unique_combination_of_columns_silver__events_tx_id__event_index.5975227b3b", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_utils_unique_combination_o_8f41430c9e7c236eba8f9a800b3d18ad.sql", "original_file_path": "models/silver/silver__events.yml", "name": "dbt_utils_unique_combination_of_columns_silver__events_tx_id__event_index", "alias": "events_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8f41430c9e7c236eba8f9a800b3d18ad"}, "created_at": 1653334539.2985432, "column_name": null, "file_key_name": "models.silver__events"}, "test.flow_models.not_null_silver__transactions_tx_id.e15d9d9f4f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_id", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__transactions_tx_id"], "unique_id": "test.flow_models.not_null_silver__transactions_tx_id.e15d9d9f4f", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__transactions_tx_id.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_tx_id", "alias": "transactions_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.303328, "column_name": "tx_id", "file_key_name": "models.silver__transactions"}, "test.flow_models.unique_silver__transactions_tx_id.dbbd06c169": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "tx_id", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "unique_silver", "fqn": ["flow_models", "silver", "unique_silver__transactions_tx_id"], "unique_id": "test.flow_models.unique_silver__transactions_tx_id.dbbd06c169", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "unique_silver__transactions_tx_id.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "unique_silver__transactions_tx_id", "alias": "transactions_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.304102, "column_name": "tx_id", "file_key_name": "models.silver__transactions"}, "test.flow_models.not_null_silver__transactions_block_timestamp.1554985986": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__transactions_block_timestamp"], "unique_id": "test.flow_models.not_null_silver__transactions_block_timestamp.1554985986", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__transactions_block_timestamp.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_block_timestamp", "alias": "transactions_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.3048441, "column_name": "block_timestamp", "file_key_name": "models.silver__transactions"}, "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_block_timestamp__day__1.bdc2ddbf00": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_5d2004d0f76917aee39e225642f78757\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_5d2004d0f76917aee39e225642f78757", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_block_timestamp__day__1"], "unique_id": "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_block_timestamp__day__1.bdc2ddbf00", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_row_va_5d2004d0f76917aee39e225642f78757.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_block_timestamp__day__1", "alias": "transactions_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_5d2004d0f76917aee39e225642f78757"}, "created_at": 1653334539.305689, "column_name": "block_timestamp", "file_key_name": "models.silver__transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_block_timestamp__TIMESTAMP_NTZ.f416456b03": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8035146711011cfa5b59349a671995e0\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8035146711011cfa5b59349a671995e0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_block_timestamp__TIMESTAMP_NTZ"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_block_timestamp__TIMESTAMP_NTZ.f416456b03", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_8035146711011cfa5b59349a671995e0.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_block_timestamp__TIMESTAMP_NTZ", "alias": "transactions_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8035146711011cfa5b59349a671995e0"}, "created_at": 1653334539.3082721, "column_name": "block_timestamp", "file_key_name": "models.silver__transactions"}, "test.flow_models.not_null_silver__transactions_block_height.52f8623258": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_height", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__transactions_block_height"], "unique_id": "test.flow_models.not_null_silver__transactions_block_height.52f8623258", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__transactions_block_height.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_block_height", "alias": "transactions_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.31026, "column_name": "block_height", "file_key_name": "models.silver__transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_block_height__NUMBER__FLOAT.15ef7838a0": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7becf5ebb9283b3fd6b804a7d71953db\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "block_height", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7becf5ebb9283b3fd6b804a7d71953db", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_block_height__NUMBER__FLOAT"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_block_height__NUMBER__FLOAT.15ef7838a0", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_7becf5ebb9283b3fd6b804a7d71953db.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_block_height__NUMBER__FLOAT", "alias": "transactions_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_7becf5ebb9283b3fd6b804a7d71953db"}, "created_at": 1653334539.3110201, "column_name": "block_height", "file_key_name": "models.silver__transactions"}, "test.flow_models.not_null_silver__transactions_chain_id.e843c29add": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "chain_id", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__transactions_chain_id"], "unique_id": "test.flow_models.not_null_silver__transactions_chain_id.e843c29add", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__transactions_chain_id.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_chain_id", "alias": "transactions_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.3131561, "column_name": "chain_id", "file_key_name": "models.silver__transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_chain_id__STRING__VARCHAR.315ac9801c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9e816c1c82c3d4f36c18fac8ed695b82\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "chain_id", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9e816c1c82c3d4f36c18fac8ed695b82", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_chain_id__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_chain_id__STRING__VARCHAR.315ac9801c", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_9e816c1c82c3d4f36c18fac8ed695b82.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_chain_id__STRING__VARCHAR", "alias": "transactions_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_9e816c1c82c3d4f36c18fac8ed695b82"}, "created_at": 1653334539.3139079, "column_name": "chain_id", "file_key_name": "models.silver__transactions"}, "test.flow_models.not_null_silver__transactions_tx_index.60e196ac6c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_index", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__transactions_tx_index"], "unique_id": "test.flow_models.not_null_silver__transactions_tx_index.60e196ac6c", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__transactions_tx_index.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_tx_index", "alias": "transactions_tx_index", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.3160372, "column_name": "tx_index", "file_key_name": "models.silver__transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_tx_index__NUMBER.67298552e6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7454c5b178655aafc16c26a6acc4e563\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "tx_index", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7454c5b178655aafc16c26a6acc4e563", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_tx_index__NUMBER"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_tx_index__NUMBER.67298552e6", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_7454c5b178655aafc16c26a6acc4e563.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_tx_index__NUMBER", "alias": "transactions_tx_index", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_7454c5b178655aafc16c26a6acc4e563"}, "created_at": 1653334539.3167841, "column_name": "tx_index", "file_key_name": "models.silver__transactions"}, "test.flow_models.not_null_silver__transactions_proposer.e5fd969e80": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "proposer", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__transactions_proposer"], "unique_id": "test.flow_models.not_null_silver__transactions_proposer.e5fd969e80", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__transactions_proposer.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_proposer", "alias": "transactions_proposer", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.3190851, "column_name": "proposer", "file_key_name": "models.silver__transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_proposer__STRING__VARCHAR.1db13669d4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4a1beae08ec9b59cc8e861563724ad71\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "proposer", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4a1beae08ec9b59cc8e861563724ad71", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_proposer__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_proposer__STRING__VARCHAR.1db13669d4", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_4a1beae08ec9b59cc8e861563724ad71.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_proposer__STRING__VARCHAR", "alias": "transactions_proposer", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_4a1beae08ec9b59cc8e861563724ad71"}, "created_at": 1653334539.319828, "column_name": "proposer", "file_key_name": "models.silver__transactions"}, "test.flow_models.not_null_silver__transactions_payer.af7cfd0161": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payer", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__transactions_payer"], "unique_id": "test.flow_models.not_null_silver__transactions_payer.af7cfd0161", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__transactions_payer.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_payer", "alias": "transactions_payer", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.3219562, "column_name": "payer", "file_key_name": "models.silver__transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_payer__STRING__VARCHAR.93acfcdcf9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b0147d4baf1cfe05bf3ca359e05199df\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "payer", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b0147d4baf1cfe05bf3ca359e05199df", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_payer__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_payer__STRING__VARCHAR.93acfcdcf9", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_b0147d4baf1cfe05bf3ca359e05199df.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_payer__STRING__VARCHAR", "alias": "transactions_payer", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b0147d4baf1cfe05bf3ca359e05199df"}, "created_at": 1653334539.3227022, "column_name": "payer", "file_key_name": "models.silver__transactions"}, "test.flow_models.not_null_silver__transactions_authorizers.10e420e01d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "authorizers", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__transactions_authorizers"], "unique_id": "test.flow_models.not_null_silver__transactions_authorizers.10e420e01d", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__transactions_authorizers.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_authorizers", "alias": "transactions_authorizers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.324816, "column_name": "authorizers", "file_key_name": "models.silver__transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_authorizers__ARRAY.5bba01f26d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6991d529925fc95a84bb0d83a503f34f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY"], "column_name": "authorizers", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6991d529925fc95a84bb0d83a503f34f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_authorizers__ARRAY"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_authorizers__ARRAY.5bba01f26d", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_6991d529925fc95a84bb0d83a503f34f.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_authorizers__ARRAY", "alias": "transactions_authorizers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6991d529925fc95a84bb0d83a503f34f"}, "created_at": 1653334539.325569, "column_name": "authorizers", "file_key_name": "models.silver__transactions"}, "test.flow_models.not_null_silver__transactions_count_authorizers.5865533a1a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "count_authorizers", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__transactions_count_authorizers"], "unique_id": "test.flow_models.not_null_silver__transactions_count_authorizers.5865533a1a", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__transactions_count_authorizers.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_count_authorizers", "alias": "transactions_count_authorizers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.327552, "column_name": "count_authorizers", "file_key_name": "models.silver__transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_count_authorizers__NUMBER.52b7f94171": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_58ee99ce633582efe95d7ae3fa4feac0\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "count_authorizers", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_58ee99ce633582efe95d7ae3fa4feac0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_count_authorizers__NUMBER"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_count_authorizers__NUMBER.52b7f94171", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_58ee99ce633582efe95d7ae3fa4feac0.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_count_authorizers__NUMBER", "alias": "transactions_count_authorizers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_58ee99ce633582efe95d7ae3fa4feac0"}, "created_at": 1653334539.328301, "column_name": "count_authorizers", "file_key_name": "models.silver__transactions"}, "test.flow_models.not_null_silver__transactions_gas_limit.3b80819045": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gas_limit", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__transactions_gas_limit"], "unique_id": "test.flow_models.not_null_silver__transactions_gas_limit.3b80819045", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__transactions_gas_limit.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_gas_limit", "alias": "transactions_gas_limit", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.330291, "column_name": "gas_limit", "file_key_name": "models.silver__transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_gas_limit__NUMBER.e4dc03e938": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ea75452c86dbac25c09ae432c3ed57bb\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "gas_limit", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ea75452c86dbac25c09ae432c3ed57bb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_gas_limit__NUMBER"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_gas_limit__NUMBER.e4dc03e938", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_ea75452c86dbac25c09ae432c3ed57bb.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_gas_limit__NUMBER", "alias": "transactions_gas_limit", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ea75452c86dbac25c09ae432c3ed57bb"}, "created_at": 1653334539.3310452, "column_name": "gas_limit", "file_key_name": "models.silver__transactions"}, "test.flow_models.not_null_silver__transactions_transaction_result.a6300f1512": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_result", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__transactions_transaction_result"], "unique_id": "test.flow_models.not_null_silver__transactions_transaction_result.a6300f1512", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__transactions_transaction_result.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_transaction_result", "alias": "transactions_transaction_result", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.3330271, "column_name": "transaction_result", "file_key_name": "models.silver__transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_transaction_result__VARIANT.58a529e183": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c508518787128faee7c2fbd8da10cd49\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARIANT"], "column_name": "transaction_result", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c508518787128faee7c2fbd8da10cd49", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_transaction_result__VARIANT"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_transaction_result__VARIANT.58a529e183", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_c508518787128faee7c2fbd8da10cd49.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_transaction_result__VARIANT", "alias": "transactions_transaction_result", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c508518787128faee7c2fbd8da10cd49"}, "created_at": 1653334539.333771, "column_name": "transaction_result", "file_key_name": "models.silver__transactions"}, "test.flow_models.not_null_silver__transactions_tx_succeeded.71f19b6d4a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__transactions_tx_succeeded"], "unique_id": "test.flow_models.not_null_silver__transactions_tx_succeeded.71f19b6d4a", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__transactions_tx_succeeded.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_tx_succeeded", "alias": "transactions_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.335745, "column_name": "tx_succeeded", "file_key_name": "models.silver__transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_tx_succeeded__BOOLEAN.b3ac73b814": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_812e47b41972fb5dcaeb0b679ac6f500\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_812e47b41972fb5dcaeb0b679ac6f500", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_tx_succeeded__BOOLEAN"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_tx_succeeded__BOOLEAN.b3ac73b814", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_812e47b41972fb5dcaeb0b679ac6f500.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_tx_succeeded__BOOLEAN", "alias": "transactions_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_812e47b41972fb5dcaeb0b679ac6f500"}, "created_at": 1653334539.336494, "column_name": "tx_succeeded", "file_key_name": "models.silver__transactions"}, "test.flow_models.not_null_silver__transactions_error_msg.e518b36eb2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "error_msg", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__transactions_error_msg"], "unique_id": "test.flow_models.not_null_silver__transactions_error_msg.e518b36eb2", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__transactions_error_msg.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_error_msg", "alias": "transactions_error_msg", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.338489, "column_name": "error_msg", "file_key_name": "models.silver__transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_error_msg__STRING__VARCHAR.825ab1f029": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_845721d81b3a7f929e684dfbd000a890\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "error_msg", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_845721d81b3a7f929e684dfbd000a890", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_error_msg__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_error_msg__STRING__VARCHAR.825ab1f029", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_845721d81b3a7f929e684dfbd000a890.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_error_msg__STRING__VARCHAR", "alias": "transactions_error_msg", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_845721d81b3a7f929e684dfbd000a890"}, "created_at": 1653334539.339236, "column_name": "error_msg", "file_key_name": "models.silver__transactions"}, "test.flow_models.not_null_silver__transactions__ingested_at.954d945cd8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_ingested_at", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__transactions__ingested_at"], "unique_id": "test.flow_models.not_null_silver__transactions__ingested_at.954d945cd8", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__transactions__ingested_at.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions__ingested_at", "alias": "transactions", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.341354, "column_name": "_ingested_at", "file_key_name": "models.silver__transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__ingested_at__TIMESTAMP_NTZ.e7fa39cc53": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1b451730bab7952ba49a815bdcc98c78\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_ingested_at", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1b451730bab7952ba49a815bdcc98c78", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__ingested_at__TIMESTAMP_NTZ"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__ingested_at__TIMESTAMP_NTZ.e7fa39cc53", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_1b451730bab7952ba49a815bdcc98c78.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__ingested_at__TIMESTAMP_NTZ", "alias": "transactions", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1b451730bab7952ba49a815bdcc98c78"}, "created_at": 1653334539.3421068, "column_name": "_ingested_at", "file_key_name": "models.silver__transactions"}, "test.flow_models.dbt_utils_unique_combination_of_columns_silver__transactions_tx_id__block_height.0a9bd5af5a": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e159f09f9ccea774c4ab64d7e71f0076\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["tx_id", "block_height"], "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_utils"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e159f09f9ccea774c4ab64d7e71f0076", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["flow_models", "silver", "dbt_utils_unique_combination_of_columns_silver__transactions_tx_id__block_height"], "unique_id": "test.flow_models.dbt_utils_unique_combination_of_columns_silver__transactions_tx_id__block_height.0a9bd5af5a", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_utils_unique_combination_o_e159f09f9ccea774c4ab64d7e71f0076.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_utils_unique_combination_of_columns_silver__transactions_tx_id__block_height", "alias": "transactions_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e159f09f9ccea774c4ab64d7e71f0076"}, "created_at": 1653334539.344162, "column_name": null, "file_key_name": "models.silver__transactions"}, "test.flow_models.not_null_silver__contract_labels_event_contract.7bbcf32a3b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_contract", "model": "{{ get_where_subquery(ref('silver__contract_labels')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__contract_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__contract_labels_event_contract"], "unique_id": "test.flow_models.not_null_silver__contract_labels_event_contract.7bbcf32a3b", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__contract_labels_event_contract.sql", "original_file_path": "models/silver/silver__contract_labels.yml", "name": "not_null_silver__contract_labels_event_contract", "alias": "contract_labels_event_contract", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contract_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.347106, "column_name": "event_contract", "file_key_name": "models.silver__contract_labels"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contract_labels_event_contract__STRING__VARCHAR.1566d40837": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8c4d15aa66f4f332a37b4b2433c5c8a4\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "event_contract", "model": "{{ get_where_subquery(ref('silver__contract_labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__contract_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8c4d15aa66f4f332a37b4b2433c5c8a4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contract_labels_event_contract__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contract_labels_event_contract__STRING__VARCHAR.1566d40837", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_8c4d15aa66f4f332a37b4b2433c5c8a4.sql", "original_file_path": "models/silver/silver__contract_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contract_labels_event_contract__STRING__VARCHAR", "alias": "contract_labels_event_contract", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contract_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8c4d15aa66f4f332a37b4b2433c5c8a4"}, "created_at": 1653334539.347873, "column_name": "event_contract", "file_key_name": "models.silver__contract_labels"}, "test.flow_models.not_null_silver__contract_labels_contract_name.282cfdc77e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contract_name", "model": "{{ get_where_subquery(ref('silver__contract_labels')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__contract_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__contract_labels_contract_name"], "unique_id": "test.flow_models.not_null_silver__contract_labels_contract_name.282cfdc77e", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__contract_labels_contract_name.sql", "original_file_path": "models/silver/silver__contract_labels.yml", "name": "not_null_silver__contract_labels_contract_name", "alias": "contract_labels_contract_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contract_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.3499992, "column_name": "contract_name", "file_key_name": "models.silver__contract_labels"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contract_labels_contract_name__STRING__VARCHAR.45ed943358": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e4f1c20d9a214d62cbcfbd05d2a4b671\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "contract_name", "model": "{{ get_where_subquery(ref('silver__contract_labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__contract_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e4f1c20d9a214d62cbcfbd05d2a4b671", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contract_labels_contract_name__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contract_labels_contract_name__STRING__VARCHAR.45ed943358", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_e4f1c20d9a214d62cbcfbd05d2a4b671.sql", "original_file_path": "models/silver/silver__contract_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contract_labels_contract_name__STRING__VARCHAR", "alias": "contract_labels_contract_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contract_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e4f1c20d9a214d62cbcfbd05d2a4b671"}, "created_at": 1653334539.3507571, "column_name": "contract_name", "file_key_name": "models.silver__contract_labels"}, "test.flow_models.not_null_silver__contract_labels_account_address.8ede8d9df1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_address", "model": "{{ get_where_subquery(ref('silver__contract_labels')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__contract_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__contract_labels_account_address"], "unique_id": "test.flow_models.not_null_silver__contract_labels_account_address.8ede8d9df1", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__contract_labels_account_address.sql", "original_file_path": "models/silver/silver__contract_labels.yml", "name": "not_null_silver__contract_labels_account_address", "alias": "contract_labels_account_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contract_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.3531678, "column_name": "account_address", "file_key_name": "models.silver__contract_labels"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contract_labels_account_address__STRING__VARCHAR.4870d7a714": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6dbde722f01b49de5d4125dcf8ca1970\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "account_address", "model": "{{ get_where_subquery(ref('silver__contract_labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__contract_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6dbde722f01b49de5d4125dcf8ca1970", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contract_labels_account_address__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contract_labels_account_address__STRING__VARCHAR.4870d7a714", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_6dbde722f01b49de5d4125dcf8ca1970.sql", "original_file_path": "models/silver/silver__contract_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contract_labels_account_address__STRING__VARCHAR", "alias": "contract_labels_account_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contract_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6dbde722f01b49de5d4125dcf8ca1970"}, "created_at": 1653334539.353906, "column_name": "account_address", "file_key_name": "models.silver__contract_labels"}, "test.flow_models.dbt_utils_unique_combination_of_columns_silver__contract_labels_event_contract__contract_name.5c036b1b29": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_77bec7fac47b58015947ae88ae97cc1c\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["event_contract", "contract_name"], "model": "{{ get_where_subquery(ref('silver__contract_labels')) }}"}, "namespace": "dbt_utils"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__contract_labels"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_77bec7fac47b58015947ae88ae97cc1c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["flow_models", "silver", "dbt_utils_unique_combination_of_columns_silver__contract_labels_event_contract__contract_name"], "unique_id": "test.flow_models.dbt_utils_unique_combination_of_columns_silver__contract_labels_event_contract__contract_name.5c036b1b29", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_utils_unique_combination_o_77bec7fac47b58015947ae88ae97cc1c.sql", "original_file_path": "models/silver/silver__contract_labels.yml", "name": "dbt_utils_unique_combination_of_columns_silver__contract_labels_event_contract__contract_name", "alias": "contract_labels_event_contract", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contract_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_77bec7fac47b58015947ae88ae97cc1c"}, "created_at": 1653334539.356012, "column_name": null, "file_key_name": "models.silver__contract_labels"}, "test.flow_models.not_null_silver__event_attributes_attribute_id.3ad9865764": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "attribute_id", "model": "{{ get_where_subquery(ref('silver__event_attributes')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__event_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__event_attributes_attribute_id"], "unique_id": "test.flow_models.not_null_silver__event_attributes_attribute_id.3ad9865764", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__event_attributes_attribute_id.sql", "original_file_path": "models/silver/silver__event_attributes.yml", "name": "not_null_silver__event_attributes_attribute_id", "alias": "event_attributes_attribute_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__event_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.3605518, "column_name": "attribute_id", "file_key_name": "models.silver__event_attributes"}, "test.flow_models.unique_silver__event_attributes_attribute_id.4f30431d19": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "attribute_id", "model": "{{ get_where_subquery(ref('silver__event_attributes')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.flow_models.silver__event_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "unique_silver", "fqn": ["flow_models", "silver", "unique_silver__event_attributes_attribute_id"], "unique_id": "test.flow_models.unique_silver__event_attributes_attribute_id.4f30431d19", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "unique_silver__event_attributes_attribute_id.sql", "original_file_path": "models/silver/silver__event_attributes.yml", "name": "unique_silver__event_attributes_attribute_id", "alias": "event_attributes_attribute_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__event_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.361314, "column_name": "attribute_id", "file_key_name": "models.silver__event_attributes"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_attribute_id__STRING__VARCHAR.705a0716b6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bf1c8a6f08ed6400face03fc96d23d04\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "attribute_id", "model": "{{ get_where_subquery(ref('silver__event_attributes')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__event_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bf1c8a6f08ed6400face03fc96d23d04", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_attribute_id__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_attribute_id__STRING__VARCHAR.705a0716b6", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_bf1c8a6f08ed6400face03fc96d23d04.sql", "original_file_path": "models/silver/silver__event_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_attribute_id__STRING__VARCHAR", "alias": "event_attributes_attribute_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__event_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_bf1c8a6f08ed6400face03fc96d23d04"}, "created_at": 1653334539.362158, "column_name": "attribute_id", "file_key_name": "models.silver__event_attributes"}, "test.flow_models.not_null_silver__event_attributes_event_id.47ecc4ec09": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('silver__event_attributes')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__event_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__event_attributes_event_id"], "unique_id": "test.flow_models.not_null_silver__event_attributes_event_id.47ecc4ec09", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__event_attributes_event_id.sql", "original_file_path": "models/silver/silver__event_attributes.yml", "name": "not_null_silver__event_attributes_event_id", "alias": "event_attributes_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__event_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.364164, "column_name": "event_id", "file_key_name": "models.silver__event_attributes"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_id__STRING__VARCHAR.c4817805e9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_888edcfa6964ef8e2216934bfbbc5112\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "event_id", "model": "{{ get_where_subquery(ref('silver__event_attributes')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__event_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_888edcfa6964ef8e2216934bfbbc5112", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_id__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_id__STRING__VARCHAR.c4817805e9", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_888edcfa6964ef8e2216934bfbbc5112.sql", "original_file_path": "models/silver/silver__event_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_id__STRING__VARCHAR", "alias": "event_attributes_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__event_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_888edcfa6964ef8e2216934bfbbc5112"}, "created_at": 1653334539.365042, "column_name": "event_id", "file_key_name": "models.silver__event_attributes"}, "test.flow_models.not_null_silver__event_attributes_tx_id.bdfb364abe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_id", "model": "{{ get_where_subquery(ref('silver__event_attributes')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__event_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__event_attributes_tx_id"], "unique_id": "test.flow_models.not_null_silver__event_attributes_tx_id.bdfb364abe", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__event_attributes_tx_id.sql", "original_file_path": "models/silver/silver__event_attributes.yml", "name": "not_null_silver__event_attributes_tx_id", "alias": "event_attributes_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__event_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.367038, "column_name": "tx_id", "file_key_name": "models.silver__event_attributes"}, "test.flow_models.not_null_silver__event_attributes_block_timestamp.944b580d9f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__event_attributes')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__event_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__event_attributes_block_timestamp"], "unique_id": "test.flow_models.not_null_silver__event_attributes_block_timestamp.944b580d9f", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__event_attributes_block_timestamp.sql", "original_file_path": "models/silver/silver__event_attributes.yml", "name": "not_null_silver__event_attributes_block_timestamp", "alias": "event_attributes_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__event_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.3679092, "column_name": "block_timestamp", "file_key_name": "models.silver__event_attributes"}, "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__event_attributes_block_timestamp__day__1.e4d1cd2bed": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_ee45386d8c6eaffd2cdc1b5c8202a7a0\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__event_attributes')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__event_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_ee45386d8c6eaffd2cdc1b5c8202a7a0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__event_attributes_block_timestamp__day__1"], "unique_id": "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__event_attributes_block_timestamp__day__1.e4d1cd2bed", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_row_va_ee45386d8c6eaffd2cdc1b5c8202a7a0.sql", "original_file_path": "models/silver/silver__event_attributes.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__event_attributes_block_timestamp__day__1", "alias": "event_attributes_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__event_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_ee45386d8c6eaffd2cdc1b5c8202a7a0"}, "created_at": 1653334539.368665, "column_name": "block_timestamp", "file_key_name": "models.silver__event_attributes"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_block_timestamp__TIMESTAMP_NTZ.04568fce2d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1be89069bd76ae4ca211e5b7331abc4f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__event_attributes')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__event_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1be89069bd76ae4ca211e5b7331abc4f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_block_timestamp__TIMESTAMP_NTZ"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_block_timestamp__TIMESTAMP_NTZ.04568fce2d", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_1be89069bd76ae4ca211e5b7331abc4f.sql", "original_file_path": "models/silver/silver__event_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_block_timestamp__TIMESTAMP_NTZ", "alias": "event_attributes_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__event_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1be89069bd76ae4ca211e5b7331abc4f"}, "created_at": 1653334539.371258, "column_name": "block_timestamp", "file_key_name": "models.silver__event_attributes"}, "test.flow_models.not_null_silver__event_attributes_event_index.fb0efb852a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_index", "model": "{{ get_where_subquery(ref('silver__event_attributes')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__event_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__event_attributes_event_index"], "unique_id": "test.flow_models.not_null_silver__event_attributes_event_index.fb0efb852a", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__event_attributes_event_index.sql", "original_file_path": "models/silver/silver__event_attributes.yml", "name": "not_null_silver__event_attributes_event_index", "alias": "event_attributes_event_index", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__event_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.373237, "column_name": "event_index", "file_key_name": "models.silver__event_attributes"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_index__NUMBER.d18950f9c0": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a6d88162d32031971b407e05143f0bd1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "event_index", "model": "{{ get_where_subquery(ref('silver__event_attributes')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__event_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a6d88162d32031971b407e05143f0bd1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_index__NUMBER"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_index__NUMBER.d18950f9c0", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_a6d88162d32031971b407e05143f0bd1.sql", "original_file_path": "models/silver/silver__event_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_index__NUMBER", "alias": "event_attributes_event_index", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__event_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a6d88162d32031971b407e05143f0bd1"}, "created_at": 1653334539.3739939, "column_name": "event_index", "file_key_name": "models.silver__event_attributes"}, "test.flow_models.not_null_silver__event_attributes_attribute_index.2a6ba94c25": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "attribute_index", "model": "{{ get_where_subquery(ref('silver__event_attributes')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__event_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__event_attributes_attribute_index"], "unique_id": "test.flow_models.not_null_silver__event_attributes_attribute_index.2a6ba94c25", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__event_attributes_attribute_index.sql", "original_file_path": "models/silver/silver__event_attributes.yml", "name": "not_null_silver__event_attributes_attribute_index", "alias": "event_attributes_attribute_index", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__event_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.3760011, "column_name": "attribute_index", "file_key_name": "models.silver__event_attributes"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_attribute_index__NUMBER.c6e1c155bb": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fe6dcfe7834df0b25420416781b9b9d6\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "attribute_index", "model": "{{ get_where_subquery(ref('silver__event_attributes')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__event_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fe6dcfe7834df0b25420416781b9b9d6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_attribute_index__NUMBER"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_attribute_index__NUMBER.c6e1c155bb", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_fe6dcfe7834df0b25420416781b9b9d6.sql", "original_file_path": "models/silver/silver__event_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_attribute_index__NUMBER", "alias": "event_attributes_attribute_index", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__event_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_fe6dcfe7834df0b25420416781b9b9d6"}, "created_at": 1653334539.3767529, "column_name": "attribute_index", "file_key_name": "models.silver__event_attributes"}, "test.flow_models.not_null_silver__event_attributes_event_contract.2fd3336266": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_contract", "model": "{{ get_where_subquery(ref('silver__event_attributes')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__event_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__event_attributes_event_contract"], "unique_id": "test.flow_models.not_null_silver__event_attributes_event_contract.2fd3336266", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__event_attributes_event_contract.sql", "original_file_path": "models/silver/silver__event_attributes.yml", "name": "not_null_silver__event_attributes_event_contract", "alias": "event_attributes_event_contract", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__event_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.3787498, "column_name": "event_contract", "file_key_name": "models.silver__event_attributes"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_contract__STRING__VARCHAR.6f7dc2d420": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f04490005d83a0b5416c8bf88dbc48e9\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "event_contract", "model": "{{ get_where_subquery(ref('silver__event_attributes')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__event_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f04490005d83a0b5416c8bf88dbc48e9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_contract__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_contract__STRING__VARCHAR.6f7dc2d420", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_f04490005d83a0b5416c8bf88dbc48e9.sql", "original_file_path": "models/silver/silver__event_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_contract__STRING__VARCHAR", "alias": "event_attributes_event_contract", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__event_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f04490005d83a0b5416c8bf88dbc48e9"}, "created_at": 1653334539.3795042, "column_name": "event_contract", "file_key_name": "models.silver__event_attributes"}, "test.flow_models.not_null_silver__event_attributes_event_type.d082eb6e92": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_type", "model": "{{ get_where_subquery(ref('silver__event_attributes')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__event_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__event_attributes_event_type"], "unique_id": "test.flow_models.not_null_silver__event_attributes_event_type.d082eb6e92", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__event_attributes_event_type.sql", "original_file_path": "models/silver/silver__event_attributes.yml", "name": "not_null_silver__event_attributes_event_type", "alias": "event_attributes_event_type", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__event_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.381633, "column_name": "event_type", "file_key_name": "models.silver__event_attributes"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_type__STRING__VARCHAR.09e85d8039": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3100f9dc67bdb1e45eeecd5720259cee\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "event_type", "model": "{{ get_where_subquery(ref('silver__event_attributes')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__event_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3100f9dc67bdb1e45eeecd5720259cee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_type__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_type__STRING__VARCHAR.09e85d8039", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_3100f9dc67bdb1e45eeecd5720259cee.sql", "original_file_path": "models/silver/silver__event_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_type__STRING__VARCHAR", "alias": "event_attributes_event_type", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__event_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_3100f9dc67bdb1e45eeecd5720259cee"}, "created_at": 1653334539.382394, "column_name": "event_type", "file_key_name": "models.silver__event_attributes"}, "test.flow_models.not_null_silver__event_attributes_attribute_key.6660426450": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "attribute_key", "model": "{{ get_where_subquery(ref('silver__event_attributes')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__event_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__event_attributes_attribute_key"], "unique_id": "test.flow_models.not_null_silver__event_attributes_attribute_key.6660426450", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__event_attributes_attribute_key.sql", "original_file_path": "models/silver/silver__event_attributes.yml", "name": "not_null_silver__event_attributes_attribute_key", "alias": "event_attributes_attribute_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__event_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.384758, "column_name": "attribute_key", "file_key_name": "models.silver__event_attributes"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_attribute_key__STRING__VARCHAR.ad47f99c21": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_720646e0faff45d14acef65b0594e108\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "attribute_key", "model": "{{ get_where_subquery(ref('silver__event_attributes')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__event_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_720646e0faff45d14acef65b0594e108", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_attribute_key__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_attribute_key__STRING__VARCHAR.ad47f99c21", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_720646e0faff45d14acef65b0594e108.sql", "original_file_path": "models/silver/silver__event_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_attribute_key__STRING__VARCHAR", "alias": "event_attributes_attribute_key", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__event_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_720646e0faff45d14acef65b0594e108"}, "created_at": 1653334539.3855062, "column_name": "attribute_key", "file_key_name": "models.silver__event_attributes"}, "test.flow_models.not_null_silver__event_attributes__ingested_at.b55be5fe97": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_ingested_at", "model": "{{ get_where_subquery(ref('silver__event_attributes')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__event_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__event_attributes__ingested_at"], "unique_id": "test.flow_models.not_null_silver__event_attributes__ingested_at.b55be5fe97", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__event_attributes__ingested_at.sql", "original_file_path": "models/silver/silver__event_attributes.yml", "name": "not_null_silver__event_attributes__ingested_at", "alias": "event_attributes", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__event_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.4180522, "column_name": "_ingested_at", "file_key_name": "models.silver__event_attributes"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes__ingested_at__TIMESTAMP_NTZ.65e90e3d1f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cd7c57d332c316a266134d07b44dd4a6\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_ingested_at", "model": "{{ get_where_subquery(ref('silver__event_attributes')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__event_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cd7c57d332c316a266134d07b44dd4a6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes__ingested_at__TIMESTAMP_NTZ"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes__ingested_at__TIMESTAMP_NTZ.65e90e3d1f", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_cd7c57d332c316a266134d07b44dd4a6.sql", "original_file_path": "models/silver/silver__event_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes__ingested_at__TIMESTAMP_NTZ", "alias": "event_attributes", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__event_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_cd7c57d332c316a266134d07b44dd4a6"}, "created_at": 1653334539.418912, "column_name": "_ingested_at", "file_key_name": "models.silver__event_attributes"}, "test.flow_models.dbt_utils_unique_combination_of_columns_silver__event_attributes_tx_id__event_index__attribute_index.a118550292": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7ed8454ca26f74032ad68c9c2ed65618\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["tx_id", "event_index", "attribute_index"], "model": "{{ get_where_subquery(ref('silver__event_attributes')) }}"}, "namespace": "dbt_utils"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__event_attributes"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7ed8454ca26f74032ad68c9c2ed65618", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["flow_models", "silver", "dbt_utils_unique_combination_of_columns_silver__event_attributes_tx_id__event_index__attribute_index"], "unique_id": "test.flow_models.dbt_utils_unique_combination_of_columns_silver__event_attributes_tx_id__event_index__attribute_index.a118550292", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_utils_unique_combination_o_7ed8454ca26f74032ad68c9c2ed65618.sql", "original_file_path": "models/silver/silver__event_attributes.yml", "name": "dbt_utils_unique_combination_of_columns_silver__event_attributes_tx_id__event_index__attribute_index", "alias": "event_attributes_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__event_attributes"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7ed8454ca26f74032ad68c9c2ed65618"}, "created_at": 1653334539.4208589, "column_name": null, "file_key_name": "models.silver__event_attributes"}, "test.flow_models.not_null_silver__labels__ingested_at.da68161b4f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_ingested_at", "model": "{{ get_where_subquery(ref('silver__labels')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.silver__labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_silver", "fqn": ["flow_models", "silver", "not_null_silver__labels__ingested_at"], "unique_id": "test.flow_models.not_null_silver__labels__ingested_at.da68161b4f", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_silver__labels__ingested_at.sql", "original_file_path": "models/silver/silver__labels.yml", "name": "not_null_silver__labels__ingested_at", "alias": "labels", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.424791, "column_name": "_ingested_at", "file_key_name": "models.silver__labels"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels__ingested_at__TIMESTAMP_NTZ.8c74f58780": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f7ae1a3d13f8a885536f414906d1c2e8\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_ingested_at", "model": "{{ get_where_subquery(ref('silver__labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f7ae1a3d13f8a885536f414906d1c2e8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels__ingested_at__TIMESTAMP_NTZ"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels__ingested_at__TIMESTAMP_NTZ.8c74f58780", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_f7ae1a3d13f8a885536f414906d1c2e8.sql", "original_file_path": "models/silver/silver__labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels__ingested_at__TIMESTAMP_NTZ", "alias": "labels", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f7ae1a3d13f8a885536f414906d1c2e8"}, "created_at": 1653334539.425567, "column_name": "_ingested_at", "file_key_name": "models.silver__labels"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_blockchain__STRING__VARCHAR.5fdfe8c7f8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_90a027c43803a5f80c0d274aa3429854\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "blockchain", "model": "{{ get_where_subquery(ref('silver__labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_90a027c43803a5f80c0d274aa3429854", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_blockchain__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_blockchain__STRING__VARCHAR.5fdfe8c7f8", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_90a027c43803a5f80c0d274aa3429854.sql", "original_file_path": "models/silver/silver__labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_blockchain__STRING__VARCHAR", "alias": "labels_blockchain", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_90a027c43803a5f80c0d274aa3429854"}, "created_at": 1653334539.427583, "column_name": "blockchain", "file_key_name": "models.silver__labels"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_address__STRING__VARCHAR.44f4101476": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c80c60f5d7cc04d723c45e29916a75e4\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "address", "model": "{{ get_where_subquery(ref('silver__labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c80c60f5d7cc04d723c45e29916a75e4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_address__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_address__STRING__VARCHAR.44f4101476", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_c80c60f5d7cc04d723c45e29916a75e4.sql", "original_file_path": "models/silver/silver__labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_address__STRING__VARCHAR", "alias": "labels_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c80c60f5d7cc04d723c45e29916a75e4"}, "created_at": 1653334539.429683, "column_name": "address", "file_key_name": "models.silver__labels"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_creator__STRING__VARCHAR.588aa5dd1b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_38e8cad0f124193c8f82c44c95d8ce99\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "creator", "model": "{{ get_where_subquery(ref('silver__labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_38e8cad0f124193c8f82c44c95d8ce99", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_creator__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_creator__STRING__VARCHAR.588aa5dd1b", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_38e8cad0f124193c8f82c44c95d8ce99.sql", "original_file_path": "models/silver/silver__labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_creator__STRING__VARCHAR", "alias": "labels_creator", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_38e8cad0f124193c8f82c44c95d8ce99"}, "created_at": 1653334539.431783, "column_name": "creator", "file_key_name": "models.silver__labels"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_label_type__STRING__VARCHAR.6353b89b18": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d8ec1971c5af62a132f52670eec8f37f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "label_type", "model": "{{ get_where_subquery(ref('silver__labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d8ec1971c5af62a132f52670eec8f37f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_label_type__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_label_type__STRING__VARCHAR.6353b89b18", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_d8ec1971c5af62a132f52670eec8f37f.sql", "original_file_path": "models/silver/silver__labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_label_type__STRING__VARCHAR", "alias": "labels_label_type", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d8ec1971c5af62a132f52670eec8f37f"}, "created_at": 1653334539.4337668, "column_name": "label_type", "file_key_name": "models.silver__labels"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_label_subtype__STRING__VARCHAR.bfa65fbefa": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5d7b1adae730d4aa944da79bfa0d9dd7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "label_subtype", "model": "{{ get_where_subquery(ref('silver__labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5d7b1adae730d4aa944da79bfa0d9dd7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_label_subtype__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_label_subtype__STRING__VARCHAR.bfa65fbefa", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_5d7b1adae730d4aa944da79bfa0d9dd7.sql", "original_file_path": "models/silver/silver__labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_label_subtype__STRING__VARCHAR", "alias": "labels_label_subtype", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_5d7b1adae730d4aa944da79bfa0d9dd7"}, "created_at": 1653334539.4359, "column_name": "label_subtype", "file_key_name": "models.silver__labels"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_address_name__STRING__VARCHAR.1935202fe4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2c6a9b49c2fb02418c5aef0535708218\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "address_name", "model": "{{ get_where_subquery(ref('silver__labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2c6a9b49c2fb02418c5aef0535708218", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_address_name__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_address_name__STRING__VARCHAR.1935202fe4", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_2c6a9b49c2fb02418c5aef0535708218.sql", "original_file_path": "models/silver/silver__labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_address_name__STRING__VARCHAR", "alias": "labels_address_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2c6a9b49c2fb02418c5aef0535708218"}, "created_at": 1653334539.4380422, "column_name": "address_name", "file_key_name": "models.silver__labels"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_project_name__STRING__VARCHAR.4a71a259a7": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_000c788288126638456ecd5973b99726\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "project_name", "model": "{{ get_where_subquery(ref('silver__labels')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.silver__labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_000c788288126638456ecd5973b99726", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["flow_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_project_name__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_project_name__STRING__VARCHAR.4a71a259a7", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_000c788288126638456ecd5973b99726.sql", "original_file_path": "models/silver/silver__labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_project_name__STRING__VARCHAR", "alias": "labels_project_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_000c788288126638456ecd5973b99726"}, "created_at": 1653334539.440146, "column_name": "project_name", "file_key_name": "models.silver__labels"}, "test.flow_models.not_null_gold__events_tx_id.95926804a2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_id", "model": "{{ get_where_subquery(ref('gold__events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__events_tx_id"], "unique_id": "test.flow_models.not_null_gold__events_tx_id.95926804a2", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__events_tx_id.sql", "original_file_path": "models/gold/gold__events.yml", "name": "not_null_gold__events_tx_id", "alias": "events_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.4437912, "column_name": "tx_id", "file_key_name": "models.gold__events"}, "test.flow_models.not_null_gold__events_block_timestamp.9df6a2e120": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('gold__events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__events_block_timestamp"], "unique_id": "test.flow_models.not_null_gold__events_block_timestamp.9df6a2e120", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__events_block_timestamp.sql", "original_file_path": "models/gold/gold__events.yml", "name": "not_null_gold__events_block_timestamp", "alias": "events_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.4446669, "column_name": "block_timestamp", "file_key_name": "models.gold__events"}, "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_gold__events_block_timestamp__day__1.f629955326": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_674a82f02e2aa1c27661609924bca227\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('gold__events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_674a82f02e2aa1c27661609924bca227", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_row_values_to_have_recent_data_gold__events_block_timestamp__day__1"], "unique_id": "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_gold__events_block_timestamp__day__1.f629955326", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_row_va_674a82f02e2aa1c27661609924bca227.sql", "original_file_path": "models/gold/gold__events.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_gold__events_block_timestamp__day__1", "alias": "events_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_674a82f02e2aa1c27661609924bca227"}, "created_at": 1653334539.445418, "column_name": "block_timestamp", "file_key_name": "models.gold__events"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_block_timestamp__TIMESTAMP_NTZ.a4866d5211": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fb2e186e8415147939b2add0bdb91617\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('gold__events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fb2e186e8415147939b2add0bdb91617", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_block_timestamp__TIMESTAMP_NTZ"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_block_timestamp__TIMESTAMP_NTZ.a4866d5211", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_fb2e186e8415147939b2add0bdb91617.sql", "original_file_path": "models/gold/gold__events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_block_timestamp__TIMESTAMP_NTZ", "alias": "events_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_fb2e186e8415147939b2add0bdb91617"}, "created_at": 1653334539.448246, "column_name": "block_timestamp", "file_key_name": "models.gold__events"}, "test.flow_models.not_null_gold__events_block_height.f9fa45c7dc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_height", "model": "{{ get_where_subquery(ref('gold__events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__events_block_height"], "unique_id": "test.flow_models.not_null_gold__events_block_height.f9fa45c7dc", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__events_block_height.sql", "original_file_path": "models/gold/gold__events.yml", "name": "not_null_gold__events_block_height", "alias": "events_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.450219, "column_name": "block_height", "file_key_name": "models.gold__events"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_block_height__NUMBER__FLOAT.b679c42581": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2862a54152a2a8feae1f25cff5f728f2\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "block_height", "model": "{{ get_where_subquery(ref('gold__events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2862a54152a2a8feae1f25cff5f728f2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_block_height__NUMBER__FLOAT"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_block_height__NUMBER__FLOAT.b679c42581", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_2862a54152a2a8feae1f25cff5f728f2.sql", "original_file_path": "models/gold/gold__events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_block_height__NUMBER__FLOAT", "alias": "events_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2862a54152a2a8feae1f25cff5f728f2"}, "created_at": 1653334539.4509702, "column_name": "block_height", "file_key_name": "models.gold__events"}, "test.flow_models.not_null_gold__events_tx_succeeded.a81457fdcf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('gold__events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__events_tx_succeeded"], "unique_id": "test.flow_models.not_null_gold__events_tx_succeeded.a81457fdcf", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__events_tx_succeeded.sql", "original_file_path": "models/gold/gold__events.yml", "name": "not_null_gold__events_tx_succeeded", "alias": "events_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.4530811, "column_name": "tx_succeeded", "file_key_name": "models.gold__events"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_tx_succeeded__BOOLEAN.2dac8e9c83": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8081bc9f95466a4543faf3101ac1940b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('gold__events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8081bc9f95466a4543faf3101ac1940b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_tx_succeeded__BOOLEAN"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_tx_succeeded__BOOLEAN.2dac8e9c83", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_8081bc9f95466a4543faf3101ac1940b.sql", "original_file_path": "models/gold/gold__events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_tx_succeeded__BOOLEAN", "alias": "events_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8081bc9f95466a4543faf3101ac1940b"}, "created_at": 1653334539.453831, "column_name": "tx_succeeded", "file_key_name": "models.gold__events"}, "test.flow_models.not_null_gold__events_event_index.b152284f0b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_index", "model": "{{ get_where_subquery(ref('gold__events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__events_event_index"], "unique_id": "test.flow_models.not_null_gold__events_event_index.b152284f0b", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__events_event_index.sql", "original_file_path": "models/gold/gold__events.yml", "name": "not_null_gold__events_event_index", "alias": "events_event_index", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.455828, "column_name": "event_index", "file_key_name": "models.gold__events"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_index__NUMBER.42fc1cb63c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1b53072c92aa356c79fee7e766423e7d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "event_index", "model": "{{ get_where_subquery(ref('gold__events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1b53072c92aa356c79fee7e766423e7d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_index__NUMBER"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_index__NUMBER.42fc1cb63c", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_1b53072c92aa356c79fee7e766423e7d.sql", "original_file_path": "models/gold/gold__events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_index__NUMBER", "alias": "events_event_index", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1b53072c92aa356c79fee7e766423e7d"}, "created_at": 1653334539.456583, "column_name": "event_index", "file_key_name": "models.gold__events"}, "test.flow_models.not_null_gold__events_event_contract.7794754732": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_contract", "model": "{{ get_where_subquery(ref('gold__events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__events_event_contract"], "unique_id": "test.flow_models.not_null_gold__events_event_contract.7794754732", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__events_event_contract.sql", "original_file_path": "models/gold/gold__events.yml", "name": "not_null_gold__events_event_contract", "alias": "events_event_contract", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.4585779, "column_name": "event_contract", "file_key_name": "models.gold__events"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_contract__STRING__VARCHAR.d6af95460c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c38b38dc19789c8cf00da3c3e1c1b315\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "event_contract", "model": "{{ get_where_subquery(ref('gold__events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c38b38dc19789c8cf00da3c3e1c1b315", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_contract__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_contract__STRING__VARCHAR.d6af95460c", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_c38b38dc19789c8cf00da3c3e1c1b315.sql", "original_file_path": "models/gold/gold__events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_contract__STRING__VARCHAR", "alias": "events_event_contract", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c38b38dc19789c8cf00da3c3e1c1b315"}, "created_at": 1653334539.459332, "column_name": "event_contract", "file_key_name": "models.gold__events"}, "test.flow_models.not_null_gold__events_event_type.f7e447ca7d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_type", "model": "{{ get_where_subquery(ref('gold__events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__events_event_type"], "unique_id": "test.flow_models.not_null_gold__events_event_type.f7e447ca7d", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__events_event_type.sql", "original_file_path": "models/gold/gold__events.yml", "name": "not_null_gold__events_event_type", "alias": "events_event_type", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.461452, "column_name": "event_type", "file_key_name": "models.gold__events"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_type__STRING__VARCHAR.06e91772b0": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f528f8138408cc30b14f89e49c80fc7e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "event_type", "model": "{{ get_where_subquery(ref('gold__events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f528f8138408cc30b14f89e49c80fc7e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_type__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_type__STRING__VARCHAR.06e91772b0", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_f528f8138408cc30b14f89e49c80fc7e.sql", "original_file_path": "models/gold/gold__events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_type__STRING__VARCHAR", "alias": "events_event_type", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f528f8138408cc30b14f89e49c80fc7e"}, "created_at": 1653334539.462206, "column_name": "event_type", "file_key_name": "models.gold__events"}, "test.flow_models.not_null_gold__events_event_data.c5e8d4c967": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_data", "model": "{{ get_where_subquery(ref('gold__events')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__events_event_data"], "unique_id": "test.flow_models.not_null_gold__events_event_data.c5e8d4c967", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__events_event_data.sql", "original_file_path": "models/gold/gold__events.yml", "name": "not_null_gold__events_event_data", "alias": "events_event_data", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.464322, "column_name": "event_data", "file_key_name": "models.gold__events"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_data__OBJECT.44c8a778d8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d742a294dfb49043750f16694b849eb1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["OBJECT"], "column_name": "event_data", "model": "{{ get_where_subquery(ref('gold__events')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d742a294dfb49043750f16694b849eb1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_data__OBJECT"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_data__OBJECT.44c8a778d8", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_d742a294dfb49043750f16694b849eb1.sql", "original_file_path": "models/gold/gold__events.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_data__OBJECT", "alias": "events_event_data", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d742a294dfb49043750f16694b849eb1"}, "created_at": 1653334539.4650738, "column_name": "event_data", "file_key_name": "models.gold__events"}, "test.flow_models.dbt_utils_unique_combination_of_columns_gold__events_tx_id__event_index.04901bf0d5": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c90832ccd9fc36507923bfa6395667b9\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["tx_id", "event_index"], "model": "{{ get_where_subquery(ref('gold__events')) }}"}, "namespace": "dbt_utils"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__events"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c90832ccd9fc36507923bfa6395667b9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_utils_unique_combination_of_columns_gold", "fqn": ["flow_models", "gold", "dbt_utils_unique_combination_of_columns_gold__events_tx_id__event_index"], "unique_id": "test.flow_models.dbt_utils_unique_combination_of_columns_gold__events_tx_id__event_index.04901bf0d5", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_utils_unique_combination_o_c90832ccd9fc36507923bfa6395667b9.sql", "original_file_path": "models/gold/gold__events.yml", "name": "dbt_utils_unique_combination_of_columns_gold__events_tx_id__event_index", "alias": "events_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c90832ccd9fc36507923bfa6395667b9"}, "created_at": 1653334539.467058, "column_name": null, "file_key_name": "models.gold__events"}, "test.flow_models.not_null_gold__blocks_block_height.a4ddd42313": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_height", "model": "{{ get_where_subquery(ref('gold__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__blocks_block_height"], "unique_id": "test.flow_models.not_null_gold__blocks_block_height.a4ddd42313", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__blocks_block_height.sql", "original_file_path": "models/gold/gold__blocks.yml", "name": "not_null_gold__blocks_block_height", "alias": "blocks_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.470624, "column_name": "block_height", "file_key_name": "models.gold__blocks"}, "test.flow_models.unique_gold__blocks_block_height.7c3e159f31": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "block_height", "model": "{{ get_where_subquery(ref('gold__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.flow_models.gold__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "unique_gold", "fqn": ["flow_models", "gold", "unique_gold__blocks_block_height"], "unique_id": "test.flow_models.unique_gold__blocks_block_height.7c3e159f31", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "unique_gold__blocks_block_height.sql", "original_file_path": "models/gold/gold__blocks.yml", "name": "unique_gold__blocks_block_height", "alias": "blocks_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.4714901, "column_name": "block_height", "file_key_name": "models.gold__blocks"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_block_height__NUMBER__FLOAT.b4ad933972": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_444504d9d5b73cde139497080c91f040\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "block_height", "model": "{{ get_where_subquery(ref('gold__blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_444504d9d5b73cde139497080c91f040", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_block_height__NUMBER__FLOAT"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_block_height__NUMBER__FLOAT.b4ad933972", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_444504d9d5b73cde139497080c91f040.sql", "original_file_path": "models/gold/gold__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_block_height__NUMBER__FLOAT", "alias": "blocks_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_444504d9d5b73cde139497080c91f040"}, "created_at": 1653334539.472241, "column_name": "block_height", "file_key_name": "models.gold__blocks"}, "test.flow_models.not_null_gold__blocks_block_timestamp.7b3d20d967": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('gold__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__blocks_block_timestamp"], "unique_id": "test.flow_models.not_null_gold__blocks_block_timestamp.7b3d20d967", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__blocks_block_timestamp.sql", "original_file_path": "models/gold/gold__blocks.yml", "name": "not_null_gold__blocks_block_timestamp", "alias": "blocks_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.474355, "column_name": "block_timestamp", "file_key_name": "models.gold__blocks"}, "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_gold__blocks_block_timestamp__day__1.34d5f6a1d8": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_4c7a705aa4b58d94af50ed6e34172e43\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('gold__blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_4c7a705aa4b58d94af50ed6e34172e43", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_row_values_to_have_recent_data_gold__blocks_block_timestamp__day__1"], "unique_id": "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_gold__blocks_block_timestamp__day__1.34d5f6a1d8", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_row_va_4c7a705aa4b58d94af50ed6e34172e43.sql", "original_file_path": "models/gold/gold__blocks.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_gold__blocks_block_timestamp__day__1", "alias": "blocks_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_4c7a705aa4b58d94af50ed6e34172e43"}, "created_at": 1653334539.4750988, "column_name": "block_timestamp", "file_key_name": "models.gold__blocks"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_block_timestamp__TIMESTAMP_NTZ.1c34247c2a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_52d9893434163129a875c39c124985f7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('gold__blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_52d9893434163129a875c39c124985f7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_block_timestamp__TIMESTAMP_NTZ"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_block_timestamp__TIMESTAMP_NTZ.1c34247c2a", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_52d9893434163129a875c39c124985f7.sql", "original_file_path": "models/gold/gold__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_block_timestamp__TIMESTAMP_NTZ", "alias": "blocks_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_52d9893434163129a875c39c124985f7"}, "created_at": 1653334539.477651, "column_name": "block_timestamp", "file_key_name": "models.gold__blocks"}, "test.flow_models.not_null_gold__blocks_network.1290e522fb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "network", "model": "{{ get_where_subquery(ref('gold__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__blocks_network"], "unique_id": "test.flow_models.not_null_gold__blocks_network.1290e522fb", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__blocks_network.sql", "original_file_path": "models/gold/gold__blocks.yml", "name": "not_null_gold__blocks_network", "alias": "blocks_network", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.4799192, "column_name": "network", "file_key_name": "models.gold__blocks"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_network__STRING__VARCHAR.b9a1e8ed08": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3b12f19895213e04b85d4ef69f8a2d67\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "network", "model": "{{ get_where_subquery(ref('gold__blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3b12f19895213e04b85d4ef69f8a2d67", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_network__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_network__STRING__VARCHAR.b9a1e8ed08", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_3b12f19895213e04b85d4ef69f8a2d67.sql", "original_file_path": "models/gold/gold__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_network__STRING__VARCHAR", "alias": "blocks_network", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_3b12f19895213e04b85d4ef69f8a2d67"}, "created_at": 1653334539.4806652, "column_name": "network", "file_key_name": "models.gold__blocks"}, "test.flow_models.not_null_gold__blocks_chain_id.56f62ea8d4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "chain_id", "model": "{{ get_where_subquery(ref('gold__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__blocks_chain_id"], "unique_id": "test.flow_models.not_null_gold__blocks_chain_id.56f62ea8d4", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__blocks_chain_id.sql", "original_file_path": "models/gold/gold__blocks.yml", "name": "not_null_gold__blocks_chain_id", "alias": "blocks_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.4827678, "column_name": "chain_id", "file_key_name": "models.gold__blocks"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_chain_id__STRING__VARCHAR.5c6c59f589": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_024057dd60fea6722c191edee5b36d71\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "chain_id", "model": "{{ get_where_subquery(ref('gold__blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_024057dd60fea6722c191edee5b36d71", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_chain_id__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_chain_id__STRING__VARCHAR.5c6c59f589", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_024057dd60fea6722c191edee5b36d71.sql", "original_file_path": "models/gold/gold__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_chain_id__STRING__VARCHAR", "alias": "blocks_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_024057dd60fea6722c191edee5b36d71"}, "created_at": 1653334539.483516, "column_name": "chain_id", "file_key_name": "models.gold__blocks"}, "test.flow_models.not_null_gold__blocks_tx_count.0ac41a407f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_count", "model": "{{ get_where_subquery(ref('gold__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__blocks_tx_count"], "unique_id": "test.flow_models.not_null_gold__blocks_tx_count.0ac41a407f", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__blocks_tx_count.sql", "original_file_path": "models/gold/gold__blocks.yml", "name": "not_null_gold__blocks_tx_count", "alias": "blocks_tx_count", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.4857118, "column_name": "tx_count", "file_key_name": "models.gold__blocks"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_tx_count__NUMBER.fed411c444": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_007c33b23027bf75603a43c718320163\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "tx_count", "model": "{{ get_where_subquery(ref('gold__blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_007c33b23027bf75603a43c718320163", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_tx_count__NUMBER"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_tx_count__NUMBER.fed411c444", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_007c33b23027bf75603a43c718320163.sql", "original_file_path": "models/gold/gold__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_tx_count__NUMBER", "alias": "blocks_tx_count", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_007c33b23027bf75603a43c718320163"}, "created_at": 1653334539.4865122, "column_name": "tx_count", "file_key_name": "models.gold__blocks"}, "test.flow_models.not_null_gold__blocks_id.6c4c044819": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('gold__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__blocks_id"], "unique_id": "test.flow_models.not_null_gold__blocks_id.6c4c044819", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__blocks_id.sql", "original_file_path": "models/gold/gold__blocks.yml", "name": "not_null_gold__blocks_id", "alias": "blocks_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.488539, "column_name": "id", "file_key_name": "models.gold__blocks"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_id__STRING__VARCHAR.976d79a911": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_141ccd7f45f2ed02547f9d055859f316\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "id", "model": "{{ get_where_subquery(ref('gold__blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_141ccd7f45f2ed02547f9d055859f316", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_id__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_id__STRING__VARCHAR.976d79a911", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_141ccd7f45f2ed02547f9d055859f316.sql", "original_file_path": "models/gold/gold__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_id__STRING__VARCHAR", "alias": "blocks_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_141ccd7f45f2ed02547f9d055859f316"}, "created_at": 1653334539.489291, "column_name": "id", "file_key_name": "models.gold__blocks"}, "test.flow_models.not_null_gold__blocks_parent_id.22e66ffa02": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "parent_id", "model": "{{ get_where_subquery(ref('gold__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__blocks_parent_id"], "unique_id": "test.flow_models.not_null_gold__blocks_parent_id.22e66ffa02", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__blocks_parent_id.sql", "original_file_path": "models/gold/gold__blocks.yml", "name": "not_null_gold__blocks_parent_id", "alias": "blocks_parent_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.491412, "column_name": "parent_id", "file_key_name": "models.gold__blocks"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_parent_id__STRING__VARCHAR.5ade9fdaf7": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ad06ed6b1ac9fa24f9ae4d4467ea6cb1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "parent_id", "model": "{{ get_where_subquery(ref('gold__blocks')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ad06ed6b1ac9fa24f9ae4d4467ea6cb1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_parent_id__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_parent_id__STRING__VARCHAR.5ade9fdaf7", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_ad06ed6b1ac9fa24f9ae4d4467ea6cb1.sql", "original_file_path": "models/gold/gold__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_parent_id__STRING__VARCHAR", "alias": "blocks_parent_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ad06ed6b1ac9fa24f9ae4d4467ea6cb1"}, "created_at": 1653334539.492168, "column_name": "parent_id", "file_key_name": "models.gold__blocks"}, "test.flow_models.sequence_gaps_gold__blocks_block_height.57b7dba0ad": {"raw_sql": "{{ test_sequence_gaps(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\") }}", "test_metadata": {"name": "sequence_gaps", "kwargs": {"column_name": "block_height", "model": "{{ get_where_subquery(ref('gold__blocks')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.flow_models.test_sequence_gaps", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "sequence_gaps_gold", "fqn": ["flow_models", "gold", "sequence_gaps_gold__blocks_block_height"], "unique_id": "test.flow_models.sequence_gaps_gold__blocks_block_height.57b7dba0ad", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "sequence_gaps_gold__blocks_block_height.sql", "original_file_path": "models/gold/gold__blocks.yml", "name": "sequence_gaps_gold__blocks_block_height", "alias": "blocks_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"where": "BLOCK_TIMESTAMP < CURRENT_DATE"}, "created_at": 1653334539.494442, "column_name": null, "file_key_name": "models.gold__blocks"}, "test.flow_models.not_null_gold__transactions_tx_id.cd9fce6e14": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_id", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__transactions_tx_id"], "unique_id": "test.flow_models.not_null_gold__transactions_tx_id.cd9fce6e14", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__transactions_tx_id.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "not_null_gold__transactions_tx_id", "alias": "transactions_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.5002298, "column_name": "tx_id", "file_key_name": "models.gold__transactions"}, "test.flow_models.unique_gold__transactions_tx_id.c038e1f494": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "tx_id", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "unique_gold", "fqn": ["flow_models", "gold", "unique_gold__transactions_tx_id"], "unique_id": "test.flow_models.unique_gold__transactions_tx_id.c038e1f494", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "unique_gold__transactions_tx_id.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "unique_gold__transactions_tx_id", "alias": "transactions_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.501013, "column_name": "tx_id", "file_key_name": "models.gold__transactions"}, "test.flow_models.tx_gaps_gold__transactions_block_height__tx_id__tx_count.94ac0787a6": {"raw_sql": "{{ test_tx_gaps(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\") }}", "test_metadata": {"name": "tx_gaps", "kwargs": {"column_block": "block_height", "column_tx_count": "tx_count", "column_name": "tx_id", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.flow_models.test_tx_gaps", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__transactions", "model.flow_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "tx_gaps_gold", "fqn": ["flow_models", "gold", "tx_gaps_gold__transactions_block_height__tx_id__tx_count"], "unique_id": "test.flow_models.tx_gaps_gold__transactions_block_height__tx_id__tx_count.94ac0787a6", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "tx_gaps_gold__transactions_block_height__tx_id__tx_count.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "tx_gaps_gold__transactions_block_height__tx_id__tx_count", "alias": "transactions_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"], ["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"where": "BLOCK_TIMESTAMP < CURRENT_DATE"}, "created_at": 1653334539.501924, "column_name": "tx_id", "file_key_name": "models.gold__transactions"}, "test.flow_models.not_null_gold__transactions_block_timestamp.ead04bb43d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__transactions_block_timestamp"], "unique_id": "test.flow_models.not_null_gold__transactions_block_timestamp.ead04bb43d", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__transactions_block_timestamp.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "not_null_gold__transactions_block_timestamp", "alias": "transactions_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.504991, "column_name": "block_timestamp", "file_key_name": "models.gold__transactions"}, "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_gold__transactions_block_timestamp__day__1.0f3f99b185": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_9f46095568c4fde39f897fc3eddfc0f1\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_9f46095568c4fde39f897fc3eddfc0f1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_row_values_to_have_recent_data_gold__transactions_block_timestamp__day__1"], "unique_id": "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_gold__transactions_block_timestamp__day__1.0f3f99b185", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_row_va_9f46095568c4fde39f897fc3eddfc0f1.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_gold__transactions_block_timestamp__day__1", "alias": "transactions_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_9f46095568c4fde39f897fc3eddfc0f1"}, "created_at": 1653334539.505743, "column_name": "block_timestamp", "file_key_name": "models.gold__transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_block_timestamp__TIMESTAMP_NTZ.fd99e5a947": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5054f5739efdb619f3dcc83422428974\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5054f5739efdb619f3dcc83422428974", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_block_timestamp__TIMESTAMP_NTZ"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_block_timestamp__TIMESTAMP_NTZ.fd99e5a947", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_5054f5739efdb619f3dcc83422428974.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_block_timestamp__TIMESTAMP_NTZ", "alias": "transactions_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_5054f5739efdb619f3dcc83422428974"}, "created_at": 1653334539.508398, "column_name": "block_timestamp", "file_key_name": "models.gold__transactions"}, "test.flow_models.not_null_gold__transactions_block_height.e7ccac5906": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_height", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__transactions_block_height"], "unique_id": "test.flow_models.not_null_gold__transactions_block_height.e7ccac5906", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__transactions_block_height.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "not_null_gold__transactions_block_height", "alias": "transactions_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.5103931, "column_name": "block_height", "file_key_name": "models.gold__transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_block_height__NUMBER__FLOAT.c7c4f87629": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_02d891e21e83bb0b513ae9d922c77029\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "block_height", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_02d891e21e83bb0b513ae9d922c77029", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_block_height__NUMBER__FLOAT"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_block_height__NUMBER__FLOAT.c7c4f87629", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_02d891e21e83bb0b513ae9d922c77029.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_block_height__NUMBER__FLOAT", "alias": "transactions_block_height", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_02d891e21e83bb0b513ae9d922c77029"}, "created_at": 1653334539.5111418, "column_name": "block_height", "file_key_name": "models.gold__transactions"}, "test.flow_models.not_null_gold__transactions_chain_id.a150808bdd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "chain_id", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__transactions_chain_id"], "unique_id": "test.flow_models.not_null_gold__transactions_chain_id.a150808bdd", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__transactions_chain_id.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "not_null_gold__transactions_chain_id", "alias": "transactions_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.513534, "column_name": "chain_id", "file_key_name": "models.gold__transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_chain_id__STRING__VARCHAR.2040f4a1b7": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4cf7721108e1a64a7322a75d12cd4e9e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "chain_id", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4cf7721108e1a64a7322a75d12cd4e9e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_chain_id__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_chain_id__STRING__VARCHAR.2040f4a1b7", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_4cf7721108e1a64a7322a75d12cd4e9e.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_chain_id__STRING__VARCHAR", "alias": "transactions_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_4cf7721108e1a64a7322a75d12cd4e9e"}, "created_at": 1653334539.5142982, "column_name": "chain_id", "file_key_name": "models.gold__transactions"}, "test.flow_models.not_null_gold__transactions_tx_index.78407db79c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_index", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__transactions_tx_index"], "unique_id": "test.flow_models.not_null_gold__transactions_tx_index.78407db79c", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__transactions_tx_index.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "not_null_gold__transactions_tx_index", "alias": "transactions_tx_index", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.516427, "column_name": "tx_index", "file_key_name": "models.gold__transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_tx_index__NUMBER.819f55dfe8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_45c9eb5c350f681bf8a1f471bc0e67e8\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "tx_index", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_45c9eb5c350f681bf8a1f471bc0e67e8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_tx_index__NUMBER"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_tx_index__NUMBER.819f55dfe8", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_45c9eb5c350f681bf8a1f471bc0e67e8.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_tx_index__NUMBER", "alias": "transactions_tx_index", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_45c9eb5c350f681bf8a1f471bc0e67e8"}, "created_at": 1653334539.517178, "column_name": "tx_index", "file_key_name": "models.gold__transactions"}, "test.flow_models.not_null_gold__transactions_proposer.1b8f46e134": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "proposer", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__transactions_proposer"], "unique_id": "test.flow_models.not_null_gold__transactions_proposer.1b8f46e134", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__transactions_proposer.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "not_null_gold__transactions_proposer", "alias": "transactions_proposer", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.519169, "column_name": "proposer", "file_key_name": "models.gold__transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_proposer__STRING__VARCHAR.779db46ba2": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1769c94974aac44a7816bac213b92a25\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "proposer", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1769c94974aac44a7816bac213b92a25", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_proposer__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_proposer__STRING__VARCHAR.779db46ba2", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_1769c94974aac44a7816bac213b92a25.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_proposer__STRING__VARCHAR", "alias": "transactions_proposer", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1769c94974aac44a7816bac213b92a25"}, "created_at": 1653334539.519926, "column_name": "proposer", "file_key_name": "models.gold__transactions"}, "test.flow_models.not_null_gold__transactions_payer.efa8662752": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payer", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__transactions_payer"], "unique_id": "test.flow_models.not_null_gold__transactions_payer.efa8662752", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__transactions_payer.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "not_null_gold__transactions_payer", "alias": "transactions_payer", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.522054, "column_name": "payer", "file_key_name": "models.gold__transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_payer__STRING__VARCHAR.3e55ba3297": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_600ab70a569722ab239be856c187cec5\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "payer", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_600ab70a569722ab239be856c187cec5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_payer__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_payer__STRING__VARCHAR.3e55ba3297", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_600ab70a569722ab239be856c187cec5.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_payer__STRING__VARCHAR", "alias": "transactions_payer", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_600ab70a569722ab239be856c187cec5"}, "created_at": 1653334539.522806, "column_name": "payer", "file_key_name": "models.gold__transactions"}, "test.flow_models.not_null_gold__transactions_authorizers.8dd4ed6073": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "authorizers", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__transactions_authorizers"], "unique_id": "test.flow_models.not_null_gold__transactions_authorizers.8dd4ed6073", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__transactions_authorizers.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "not_null_gold__transactions_authorizers", "alias": "transactions_authorizers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.524946, "column_name": "authorizers", "file_key_name": "models.gold__transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_authorizers__ARRAY.0ec3a9a656": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ae6a2a5831a7019ae4490d13f25cd9a6\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY"], "column_name": "authorizers", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ae6a2a5831a7019ae4490d13f25cd9a6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_authorizers__ARRAY"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_authorizers__ARRAY.0ec3a9a656", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_ae6a2a5831a7019ae4490d13f25cd9a6.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_authorizers__ARRAY", "alias": "transactions_authorizers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ae6a2a5831a7019ae4490d13f25cd9a6"}, "created_at": 1653334539.525698, "column_name": "authorizers", "file_key_name": "models.gold__transactions"}, "test.flow_models.not_null_gold__transactions_count_authorizers.aaa4409fa2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "count_authorizers", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__transactions_count_authorizers"], "unique_id": "test.flow_models.not_null_gold__transactions_count_authorizers.aaa4409fa2", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__transactions_count_authorizers.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "not_null_gold__transactions_count_authorizers", "alias": "transactions_count_authorizers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.527692, "column_name": "count_authorizers", "file_key_name": "models.gold__transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_count_authorizers__NUMBER.cb19f10281": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_64c004f785e21f47e53200caaf87b649\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "count_authorizers", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_64c004f785e21f47e53200caaf87b649", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_count_authorizers__NUMBER"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_count_authorizers__NUMBER.cb19f10281", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_64c004f785e21f47e53200caaf87b649.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_count_authorizers__NUMBER", "alias": "transactions_count_authorizers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_64c004f785e21f47e53200caaf87b649"}, "created_at": 1653334539.5284421, "column_name": "count_authorizers", "file_key_name": "models.gold__transactions"}, "test.flow_models.not_null_gold__transactions_gas_limit.fc492b2dfd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gas_limit", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__transactions_gas_limit"], "unique_id": "test.flow_models.not_null_gold__transactions_gas_limit.fc492b2dfd", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__transactions_gas_limit.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "not_null_gold__transactions_gas_limit", "alias": "transactions_gas_limit", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.530424, "column_name": "gas_limit", "file_key_name": "models.gold__transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_gas_limit__NUMBER.6e317a0dc5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d91ec1a80543eac6cbbe08c6e3e0bbf8\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "gas_limit", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d91ec1a80543eac6cbbe08c6e3e0bbf8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_gas_limit__NUMBER"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_gas_limit__NUMBER.6e317a0dc5", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_d91ec1a80543eac6cbbe08c6e3e0bbf8.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_gas_limit__NUMBER", "alias": "transactions_gas_limit", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d91ec1a80543eac6cbbe08c6e3e0bbf8"}, "created_at": 1653334539.531182, "column_name": "gas_limit", "file_key_name": "models.gold__transactions"}, "test.flow_models.not_null_gold__transactions_transaction_result.ae3aa5216f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "transaction_result", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__transactions_transaction_result"], "unique_id": "test.flow_models.not_null_gold__transactions_transaction_result.ae3aa5216f", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__transactions_transaction_result.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "not_null_gold__transactions_transaction_result", "alias": "transactions_transaction_result", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.533165, "column_name": "transaction_result", "file_key_name": "models.gold__transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_transaction_result__VARIANT.64a0e190da": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_eeea7b7e43b132b2e652f18e3f33d207\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARIANT"], "column_name": "transaction_result", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_eeea7b7e43b132b2e652f18e3f33d207", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_transaction_result__VARIANT"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_transaction_result__VARIANT.64a0e190da", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_eeea7b7e43b132b2e652f18e3f33d207.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_transaction_result__VARIANT", "alias": "transactions_transaction_result", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_eeea7b7e43b132b2e652f18e3f33d207"}, "created_at": 1653334539.5339189, "column_name": "transaction_result", "file_key_name": "models.gold__transactions"}, "test.flow_models.not_null_gold__transactions_tx_succeeded.8b7f157e49": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__transactions_tx_succeeded"], "unique_id": "test.flow_models.not_null_gold__transactions_tx_succeeded.8b7f157e49", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__transactions_tx_succeeded.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "not_null_gold__transactions_tx_succeeded", "alias": "transactions_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.535907, "column_name": "tx_succeeded", "file_key_name": "models.gold__transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_tx_succeeded__BOOLEAN.6af1bc39c9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ab15e8b407c90ad52a46e9f0466d483c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ab15e8b407c90ad52a46e9f0466d483c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_tx_succeeded__BOOLEAN"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_tx_succeeded__BOOLEAN.6af1bc39c9", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_ab15e8b407c90ad52a46e9f0466d483c.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_tx_succeeded__BOOLEAN", "alias": "transactions_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ab15e8b407c90ad52a46e9f0466d483c"}, "created_at": 1653334539.536662, "column_name": "tx_succeeded", "file_key_name": "models.gold__transactions"}, "test.flow_models.not_null_gold__transactions_error_msg.22f2de539d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "error_msg", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "not_null_gold", "fqn": ["flow_models", "gold", "not_null_gold__transactions_error_msg"], "unique_id": "test.flow_models.not_null_gold__transactions_error_msg.22f2de539d", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "not_null_gold__transactions_error_msg.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "not_null_gold__transactions_error_msg", "alias": "transactions_error_msg", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1653334539.538644, "column_name": "error_msg", "file_key_name": "models.gold__transactions"}, "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_error_msg__STRING__VARCHAR.181329cdb3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_69ffc0de2884959cf5ef4ea657dd7bfb\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "error_msg", "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_69ffc0de2884959cf5ef4ea657dd7bfb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_gold", "fqn": ["flow_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_error_msg__STRING__VARCHAR"], "unique_id": "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_error_msg__STRING__VARCHAR.181329cdb3", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_expectations_expect_column_69ffc0de2884959cf5ef4ea657dd7bfb.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_error_msg__STRING__VARCHAR", "alias": "transactions_error_msg", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_69ffc0de2884959cf5ef4ea657dd7bfb"}, "created_at": 1653334539.539399, "column_name": "error_msg", "file_key_name": "models.gold__transactions"}, "test.flow_models.dbt_utils_unique_combination_of_columns_gold__transactions_tx_id__block_height.de99296ea8": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9e1e29a7fef20c56d9ab92895f4cb2c0\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["tx_id", "block_height"], "model": "{{ get_where_subquery(ref('gold__transactions')) }}"}, "namespace": "dbt_utils"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.flow_models.gold__transactions"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9e1e29a7fef20c56d9ab92895f4cb2c0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "FLOW_DEV", "schema": "dbt_utils_unique_combination_of_columns_gold", "fqn": ["flow_models", "gold", "dbt_utils_unique_combination_of_columns_gold__transactions_tx_id__block_height"], "unique_id": "test.flow_models.dbt_utils_unique_combination_of_columns_gold__transactions_tx_id__block_height.de99296ea8", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "dbt_utils_unique_combination_o_9e1e29a7fef20c56d9ab92895f4cb2c0.sql", "original_file_path": "models/gold/gold__transactions.yml", "name": "dbt_utils_unique_combination_of_columns_gold__transactions_tx_id__block_height", "alias": "transactions_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["gold__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_9e1e29a7fef20c56d9ab92895f4cb2c0"}, "created_at": 1653334539.541525, "column_name": null, "file_key_name": "models.gold__transactions"}}, "sources": {"source.flow_models.prod.flow_blocks": {"fqn": ["flow_models", "prod", "flow_blocks"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.flow_models.prod.flow_blocks", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "flow_blocks", "source_name": "prod", "source_description": "", "loader": "", "identifier": "flow_blocks", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.flow_blocks", "created_at": 1653334539.543376}, "source.flow_models.prod.flow_txs": {"fqn": ["flow_models", "prod", "flow_txs"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.flow_models.prod.flow_txs", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "flow_txs", "source_name": "prod", "source_description": "", "loader": "", "identifier": "flow_txs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.flow_txs", "created_at": 1653334539.543445}, "source.flow_models.crosschain.address_labels": {"fqn": ["flow_models", "crosschain", "address_labels"], "database": "flipside_prod_db", "schema": "crosschain", "unique_id": "source.flow_models.crosschain.address_labels", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "address_labels", "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "address_labels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.crosschain.address_labels", "created_at": 1653334539.543499}}, "macros": {"macro.flow_models.create_tasks": {"unique_id": "macro.flow_models.create_tasks", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "macros/create_tasks.sql", "original_file_path": "macros/create_tasks.sql", "name": "create_tasks", "macro_sql": "{% macro create_tasks() %}\n    {% if target.database == 'FLOW' %}\n        CREATE SCHEMA IF NOT EXISTS _internal;\n        {{ task_run_sp_create_prod_clone('_internal') }};\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.flow_models.task_run_sp_create_prod_clone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334537.996681}, "macro.flow_models.create_sps": {"unique_id": "macro.flow_models.create_sps", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "macros/create_sps.sql", "original_file_path": "macros/create_sps.sql", "name": "create_sps", "macro_sql": "{% macro create_sps() %}\n    {% if target.database == 'FLOW' %}\n        CREATE SCHEMA IF NOT EXISTS _internal;\n        {{ sp_create_prod_clone('_internal') }};\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.flow_models.sp_create_prod_clone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334537.99705}, "macro.flow_models.generate_schema_name": {"unique_id": "macro.flow_models.generate_schema_name", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(\n        custom_schema_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name [0] | trim }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334537.997535}, "macro.flow_models.generate_alias_name": {"unique_id": "macro.flow_models.generate_alias_name", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(\n        custom_alias_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name [1] | trim }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334537.997827}, "macro.flow_models.task_run_sp_create_prod_clone": {"unique_id": "macro.flow_models.task_run_sp_create_prod_clone", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "macros/task_run_sp_create_prod_clone.sql", "original_file_path": "macros/task_run_sp_create_prod_clone.sql", "name": "task_run_sp_create_prod_clone", "macro_sql": "{% macro task_run_sp_create_prod_clone(target_schema) -%}\n    create or replace task {{target_schema}}.run_sp_create_prod_clone\n        warehouse = dbt_cloud\n        schedule = 'USING CRON 15 10 * * * UTC'\n    as\n        call {{ target_schema }}.create_prod_clone('flow', 'flow_dev', 'internal_dev');\n\n    alter task {{ target_schema }}.run_sp_create_prod_clone resume\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334537.9981282}, "macro.flow_models.sp_create_prod_clone": {"unique_id": "macro.flow_models.sp_create_prod_clone", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "macros/sp_create_prod_clone.sql", "original_file_path": "macros/sp_create_prod_clone.sql", "name": "sp_create_prod_clone", "macro_sql": "{% macro sp_create_prod_clone(target_schema) -%}\n\ncreate or replace procedure {{ target_schema }}.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\nreturns boolean \nlanguage javascript\nexecute as caller\nas\n$$\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\n    try {\n        snowflake.execute({sqlText: `DROP DATABASE IF EXISTS ${DESTINATION_DB_NAME}`});\n        snowflake.execute({sqlText: `CREATE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\n        snowflake.execute({sqlText: `DROP SCHEMA ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod */\n\n        var existing_schemas = snowflake.execute({sqlText: `SELECT table_schema\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\n            WHERE grantor IS NOT NULL\n            GROUP BY 1;`});\n\n        while (existing_schemas.next()) {\n            var schema = existing_schemas.getColumnValue(1)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        var existing_tables = snowflake.execute({sqlText: `SELECT table_schema, table_name\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\n            WHERE grantor IS NOT NULL\n            GROUP BY 1,2;`});\n\n        while (existing_tables.next()) {\n            var schema = existing_tables.getColumnValue(1)\n            var table_name = existing_tables.getColumnValue(2)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TABLE ${DESTINATION_DB_NAME}.${schema}.${table_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`})\n        snowflake.execute({sqlText: `COMMIT;`});\n    } catch (err) {\n        snowflake.execute({sqlText: `ROLLBACK;`});\n        throw(err);\n    }\n    \n    return true\n$$\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334537.9986281}, "macro.flow_models.test_tx_gaps": {"unique_id": "macro.flow_models.test_tx_gaps", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "macros/tests/tx_gaps.sql", "original_file_path": "macros/tests/tx_gaps.sql", "name": "test_tx_gaps", "macro_sql": "{% test tx_gaps(\n    model,\n    column_name,\n    column_block,\n    column_tx_count\n) %}\nWITH block_base AS (\n    SELECT\n        {{ column_block }},\n        {{ column_tx_count }}\n    FROM\n        {{ ref('silver__blocks') }}\n),\nmodel_name AS (\n    SELECT\n        {{ column_block }},\n        COUNT(\n            DISTINCT {{ column_name }}\n        ) AS model_tx_count\n    FROM\n        {{ model }}\n    GROUP BY\n        {{ column_block }}\n)\nSELECT\n    block_base.{{ column_block }},\n    {{ column_tx_count }},\n    model_name.{{ column_block }},\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.{{ column_block }} = model_name.{{ column_block }}\nWHERE\n    {{ column_tx_count }} <> model_tx_count {% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334537.999407}, "macro.flow_models.test_sequence_gaps": {"unique_id": "macro.flow_models.test_sequence_gaps", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "macros/tests/sequence_gaps.sql", "original_file_path": "macros/tests/sequence_gaps.sql", "name": "test_sequence_gaps", "macro_sql": "{% test sequence_gaps(\n    model,\n    partition_by,\n    column_name\n) %}\n{%- set partition_sql = partition_by | join(\", \") -%}\n{%- set previous_column = \"prev_\" ~ column_name -%}\nWITH source AS (\n    SELECT\n        {{ partition_sql + \",\" if partition_sql }}\n        {{ column_name }},\n        LAG(\n            {{ column_name }},\n            1\n        ) over (\n            {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n            ORDER BY\n                {{ column_name }} ASC\n        ) AS {{ previous_column }}\n    FROM\n        {{ model }}\n)\nSELECT\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column_name }},\n    {{ column_name }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column_name }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC {% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0004601}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.001384}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.012435}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) %}\n  {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} COMMENT $${{ column_dict[column_name]['description'] | replace('$', '[$]') }}$$\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0127518}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {% if (column_name|upper in model_columns) or (column_name in model_columns) %}\n      {{ get_column_comment_sql(column_name, model_columns) }}\n    {% else %}\n      {{column_name}}\n    {% endif %}\n    {{ \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0131898}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.013925}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0146759}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.015212}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.015702}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0160158}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0160918}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.016261}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0163698}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.016556}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.016809}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.017005}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in column_dict if (column_name in existing_columns) or (column_name|upper in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{ ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0175118}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.017694}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.018152}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.018629}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.019433}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0196412}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.019872}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0210948}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.021379}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.02163}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.023712}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0239968}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.02458}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0259562}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0272589}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.027785}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.029815}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.030231}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.031306}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0314949}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.031637}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.031776}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.031915}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.03232}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0326111}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.032903}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.033366}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.03363}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.037045}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.037219}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.03743}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.037567}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0376582}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.038544}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0387032}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0388658}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.039819}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.041352}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.044929}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0452049}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.045366}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0454469}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.045584}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.045692}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.045891}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.046745}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.046925}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.047172}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.047592}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.052885}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.054989}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0555048}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.055818}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.056258}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.05664}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0574489}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.057994}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0585961}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0632992}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0647628}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.065055}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0657861}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.066048}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.066664}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.067337}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                  schema=schema,\n                                                                  database=database) %}\n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.071968}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.076252}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.077441}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.078625}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.079329}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.082902}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.083364}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.08355}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.083745}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.084142}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.087578}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.087926}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0881438}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0893319}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.08973}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0898838}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.09006}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0903108}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.093046}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.09685}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.09775}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.097978}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0984378}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.098575}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.0986829}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.098839}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.09895}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.099417}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.099653}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.100835}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1012638}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.101483}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1020238}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.102278}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.102554}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.102981}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.103224}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.103615}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1039581}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1042502}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.104841}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.105943}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.106514}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1067991}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1084921}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1097221}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.110455}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.110687}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.111097}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.111275}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1114292}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1116009}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.112083}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.112216}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1123672}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.112746}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1142762}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.114572}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.11475}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.114951}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.115129}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.11528}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.115484}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.115751}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.115991}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.116596}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.116818}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.117006}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.117485}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.117627}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.117846}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1182542}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1189241}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.119091}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.119286}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1194491}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.119711}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.120186}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.121561}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1218188}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.121999}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.122143}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.122314}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1225548}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.122756}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.123113}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1232939}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.123447}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.125004}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1251578}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.125458}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1256452}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.125976}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.126199}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.126793}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1270442}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.12781}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1283379}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.128564}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1288471}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1291149}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1294148}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1294851}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1295528}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.129933}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1300921}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.130384}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1305642}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.131253}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.131326}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1313941}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1314602}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.131524}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1316779}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.131746}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.131815}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.13188}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.132033}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1320992}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1321652}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1323159}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.132389}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1324532}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1326022}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.132668}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.132735}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.132942}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.133012}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.133077}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.133564}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.133909}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1340108}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1341062}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1346781}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.134839}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.134995}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.135147}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.135339}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.135635}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1357062}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.135774}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.136147}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.136302}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.136436}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.136572}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1371431}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1372778}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.13743}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1376379}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.139775}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.140165}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.140439}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1408179}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.141747}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.144185}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1443431}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1445}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.146324}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.146524}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.146923}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1470551}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.147174}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1472929}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.147625}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.147755}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1478772}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1482198}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1483562}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.148476}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1489742}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.14907}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.149166}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.149497}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.149598}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.149699}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.150099}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.150228}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1503549}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.150707}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.15081}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1513758}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1514828}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.15155}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.151615}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.15177}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.151874}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1520152}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.152123}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.152246}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.153623}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1540759}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1545222}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.154712}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.155082}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.155183}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.155278}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.155373}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1559439}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1562722}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.156414}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.156799}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.156971}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.158368}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.158527}, "macro.dbt_utils._split_part_negative": {"unique_id": "macro.dbt_utils._split_part_negative", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.15874}, "macro.dbt_utils.postgres__split_part": {"unique_id": "macro.dbt_utils.postgres__split_part", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.159065}, "macro.dbt_utils.redshift__split_part": {"unique_id": "macro.dbt_utils.redshift__split_part", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1593869}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.159737}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1601112}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.160238}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.160363}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1612082}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.166642}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.167147}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.167459}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1679401}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.172948}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1733818}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.173863}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1743748}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.175027}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.17539}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1757069}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.176266}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.176491}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.176932}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.17722}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1778922}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1782222}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.178659}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.178973}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.179337}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.179502}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.18013}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1806479}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1812139}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1815832}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1820319}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.182196}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.182569}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.182743}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.183369}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1840022}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1845891}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.184923}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1854222}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1857028}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1861608}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.186671}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.18734}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.187995}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1884449}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1886091}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.189355}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.190219}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1931572}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.194597}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.194918}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.19508}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.195403}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1955972}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1959}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1960719}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1965811}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.197283}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.197862}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.19809}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.198443}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.1987982}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.199199}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.199883}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.200727}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2015429}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.201949}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2021382}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.202639}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2033339}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2041779}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2046258}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.204903}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.205527}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {%- for col in dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2063491}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.208033}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.210081}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.212457}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.215292}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.215647}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.215897}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.218239}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.218451}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.218644}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2188349}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.218994}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2191591}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2197602}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.220671}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.221092}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2213619}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2217422}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.222077}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.223532}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.223798}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.224555}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.225054}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.226149}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2276428}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.228703}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2295349}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2300339}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.230746}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.231168}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.231751}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.232249}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.232332}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2324102}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2324858}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.233511}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.233784}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.234346}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2352}, "macro.dbt_date.get_date_dimension": {"unique_id": "macro.dbt_date.get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2430878}, "macro.dbt_date.default__get_date_dimension": {"unique_id": "macro.dbt_date.default__get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.245304}, "macro.dbt_date.postgres__get_date_dimension": {"unique_id": "macro.dbt_date.postgres__get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# dbt_utils.last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt_utils.dateadd('day', '-1', dbt_utils.dateadd('month', '3', dbt_utils.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.247744}, "macro.dbt_date.get_base_dates": {"unique_id": "macro.dbt_date.get_base_dates", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2487319}, "macro.dbt_date.default__get_base_dates": {"unique_id": "macro.dbt_date.default__get_base_dates", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.24947}, "macro.dbt_date.bigquery__get_base_dates": {"unique_id": "macro.dbt_date.bigquery__get_base_dates", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.25013}, "macro.dbt_date.get_fiscal_year_dates": {"unique_id": "macro.dbt_date.get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.251759}, "macro.dbt_date.default__get_fiscal_year_dates": {"unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt_utils.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt_utils.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt_utils.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.252314}, "macro.dbt_date.get_fiscal_periods": {"unique_id": "macro.dbt_date.get_fiscal_periods", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "name": "get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{# \nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt_utils.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt_utils.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case \n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt_utils.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year, \n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom \n    fscl_periods_quarters \norder by 1,2\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.253226}, "macro.dbt_date.tomorrow": {"unique_id": "macro.dbt_date.tomorrow", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "name": "tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2534988}, "macro.dbt_date.next_week": {"unique_id": "macro.dbt_date.next_week", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "name": "next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2537322}, "macro.dbt_date.next_month_name": {"unique_id": "macro.dbt_date.next_month_name", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "name": "next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.254035}, "macro.dbt_date.next_month": {"unique_id": "macro.dbt_date.next_month", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "name": "next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2542698}, "macro.dbt_date.day_name": {"unique_id": "macro.dbt_date.day_name", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2548962}, "macro.dbt_date.default__day_name": {"unique_id": "macro.dbt_date.default__day_name", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.255094}, "macro.dbt_date.snowflake__day_name": {"unique_id": "macro.dbt_date.snowflake__day_name", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.255287}, "macro.dbt_date.bigquery__day_name": {"unique_id": "macro.dbt_date.bigquery__day_name", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.255479}, "macro.dbt_date.postgres__day_name": {"unique_id": "macro.dbt_date.postgres__day_name", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2556732}, "macro.dbt_date.to_unixtimestamp": {"unique_id": "macro.dbt_date.to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.256017}, "macro.dbt_date.default__to_unixtimestamp": {"unique_id": "macro.dbt_date.default__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.256149}, "macro.dbt_date.snowflake__to_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.25628}, "macro.dbt_date.bigquery__to_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2563782}, "macro.dbt_date.n_days_away": {"unique_id": "macro.dbt_date.n_days_away", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "name": "n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.256733}, "macro.dbt_date.week_start": {"unique_id": "macro.dbt_date.week_start", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.257237}, "macro.dbt_date.default__week_start": {"unique_id": "macro.dbt_date.default__week_start", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt_utils.date_trunc('week', date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2573829}, "macro.dbt_date.snowflake__week_start": {"unique_id": "macro.dbt_date.snowflake__week_start", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt_utils.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.257667}, "macro.dbt_date.postgres__week_start": {"unique_id": "macro.dbt_date.postgres__week_start", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt_utils.dateadd('day', -1, dbt_utils.date_trunc('week', dbt_utils.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2579231}, "macro.dbt_date.iso_week_start": {"unique_id": "macro.dbt_date.iso_week_start", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.258441}, "macro.dbt_date._iso_week_start": {"unique_id": "macro.dbt_date._iso_week_start", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "_iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt_utils.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.258593}, "macro.dbt_date.default__iso_week_start": {"unique_id": "macro.dbt_date.default__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2587242}, "macro.dbt_date.snowflake__iso_week_start": {"unique_id": "macro.dbt_date.snowflake__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.258857}, "macro.dbt_date.postgres__iso_week_start": {"unique_id": "macro.dbt_date.postgres__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.258987}, "macro.dbt_date.n_days_ago": {"unique_id": "macro.dbt_date.n_days_ago", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "name": "n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt_utils.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2594419}, "macro.dbt_date.last_week": {"unique_id": "macro.dbt_date.last_week", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "name": "last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.259678}, "macro.dbt_date.now": {"unique_id": "macro.dbt_date.now", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "name": "now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt_utils.current_timestamp(), tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2599318}, "macro.dbt_date.periods_since": {"unique_id": "macro.dbt_date.periods_since", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "name": "periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt_utils.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2602398}, "macro.dbt_date.today": {"unique_id": "macro.dbt_date.today", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "name": "today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2604659}, "macro.dbt_date.last_month": {"unique_id": "macro.dbt_date.last_month", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "name": "last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.260694}, "macro.dbt_date.day_of_year": {"unique_id": "macro.dbt_date.day_of_year", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.261049}, "macro.dbt_date.default__day_of_year": {"unique_id": "macro.dbt_date.default__day_of_year", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.261182}, "macro.dbt_date.postgres__day_of_year": {"unique_id": "macro.dbt_date.postgres__day_of_year", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.261312}, "macro.dbt_date.redshift__day_of_year": {"unique_id": "macro.dbt_date.redshift__day_of_year", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2614841}, "macro.dbt_date.from_unixtimestamp": {"unique_id": "macro.dbt_date.from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.262672}, "macro.dbt_date.default__from_unixtimestamp": {"unique_id": "macro.dbt_date.default__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.262927}, "macro.dbt_date.postgres__from_unixtimestamp": {"unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.263179}, "macro.dbt_date.snowflake__from_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2636318}, "macro.dbt_date.bigquery__from_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.264021}, "macro.dbt_date.n_months_ago": {"unique_id": "macro.dbt_date.n_months_ago", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "name": "n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.264443}, "macro.dbt_date.date_part": {"unique_id": "macro.dbt_date.date_part", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2647839}, "macro.dbt_date.default__date_part": {"unique_id": "macro.dbt_date.default__date_part", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.264914}, "macro.dbt_date.bigquery__date_part": {"unique_id": "macro.dbt_date.bigquery__date_part", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.26504}, "macro.dbt_date.n_weeks_away": {"unique_id": "macro.dbt_date.n_weeks_away", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "name": "n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.265435}, "macro.dbt_date.day_of_month": {"unique_id": "macro.dbt_date.day_of_month", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.265693}, "macro.dbt_date.redshift__day_of_month": {"unique_id": "macro.dbt_date.redshift__day_of_month", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.265867}, "macro.dbt_date.yesterday": {"unique_id": "macro.dbt_date.yesterday", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "name": "yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.266133}, "macro.dbt_date.day_of_week": {"unique_id": "macro.dbt_date.day_of_week", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2677639}, "macro.dbt_date.default__day_of_week": {"unique_id": "macro.dbt_date.default__day_of_week", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.268045}, "macro.dbt_date.snowflake__day_of_week": {"unique_id": "macro.dbt_date.snowflake__day_of_week", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2684438}, "macro.dbt_date.bigquery__day_of_week": {"unique_id": "macro.dbt_date.bigquery__day_of_week", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.268723}, "macro.dbt_date.postgres__day_of_week": {"unique_id": "macro.dbt_date.postgres__day_of_week", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt_utils.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt_utils.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2691321}, "macro.dbt_date.redshift__day_of_week": {"unique_id": "macro.dbt_date.redshift__day_of_week", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt_utils.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt_utils.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2695491}, "macro.dbt_date.iso_week_end": {"unique_id": "macro.dbt_date.iso_week_end", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.270037}, "macro.dbt_date._iso_week_end": {"unique_id": "macro.dbt_date._iso_week_end", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "_iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.270238}, "macro.dbt_date.default__iso_week_end": {"unique_id": "macro.dbt_date.default__iso_week_end", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.270373}, "macro.dbt_date.snowflake__iso_week_end": {"unique_id": "macro.dbt_date.snowflake__iso_week_end", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.270507}, "macro.dbt_date.n_weeks_ago": {"unique_id": "macro.dbt_date.n_weeks_ago", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "name": "n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.270924}, "macro.dbt_date.month_name": {"unique_id": "macro.dbt_date.month_name", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2714188}, "macro.dbt_date.default__month_name": {"unique_id": "macro.dbt_date.default__month_name", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.271616}, "macro.dbt_date.bigquery__month_name": {"unique_id": "macro.dbt_date.bigquery__month_name", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.271807}, "macro.dbt_date.snowflake__month_name": {"unique_id": "macro.dbt_date.snowflake__month_name", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.272}, "macro.dbt_date.postgres__month_name": {"unique_id": "macro.dbt_date.postgres__month_name", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.272197}, "macro.dbt_date.last_month_name": {"unique_id": "macro.dbt_date.last_month_name", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "name": "last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.272505}, "macro.dbt_date.week_of_year": {"unique_id": "macro.dbt_date.week_of_year", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2729611}, "macro.dbt_date.default__week_of_year": {"unique_id": "macro.dbt_date.default__week_of_year", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.273143}, "macro.dbt_date.postgres__week_of_year": {"unique_id": "macro.dbt_date.postgres__week_of_year", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2732842}, "macro.dbt_date.convert_timezone": {"unique_id": "macro.dbt_date.convert_timezone", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.274422}, "macro.dbt_date.default__convert_timezone": {"unique_id": "macro.dbt_date.default__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\n{%- if not source_tz -%}\ncast(convert_timezone('{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast(convert_timezone('{{ source_tz }}', '{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.274752}, "macro.dbt_date.bigquery__convert_timezone": {"unique_id": "macro.dbt_date.bigquery__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.274904}, "macro.dbt_date.spark__convert_timezone": {"unique_id": "macro.dbt_date.spark__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2750561}, "macro.dbt_date.postgres__convert_timezone": {"unique_id": "macro.dbt_date.postgres__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\n{%- if source_tz -%}\ncast({{ column }} at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast({{ column }} at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.275427}, "macro.dbt_date.redshift__convert_timezone": {"unique_id": "macro.dbt_date.redshift__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2756119}, "macro.dbt_date.n_months_away": {"unique_id": "macro.dbt_date.n_months_away", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "name": "n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.276008}, "macro.dbt_date.iso_week_of_year": {"unique_id": "macro.dbt_date.iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2765691}, "macro.dbt_date._iso_week_of_year": {"unique_id": "macro.dbt_date._iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "_iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.276757}, "macro.dbt_date.default__iso_week_of_year": {"unique_id": "macro.dbt_date.default__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.276893}, "macro.dbt_date.snowflake__iso_week_of_year": {"unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.277026}, "macro.dbt_date.postgres__iso_week_of_year": {"unique_id": "macro.dbt_date.postgres__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.277168}, "macro.dbt_date.week_end": {"unique_id": "macro.dbt_date.week_end", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.277657}, "macro.dbt_date.default__week_end": {"unique_id": "macro.dbt_date.default__week_end", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ dbt_utils.last_day(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.27779}, "macro.dbt_date.snowflake__week_end": {"unique_id": "macro.dbt_date.snowflake__week_end", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.277986}, "macro.dbt_date.postgres__week_end": {"unique_id": "macro.dbt_date.postgres__week_end", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.278176}, "macro.dbt_date.next_month_number": {"unique_id": "macro.dbt_date.next_month_number", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "name": "next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.278455}, "macro.dbt_date.last_month_number": {"unique_id": "macro.dbt_date.last_month_number", "package_name": "dbt_date", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "name": "last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.278734}, "macro.fivetran_utils.enabled_vars": {"unique_id": "macro.fivetran_utils.enabled_vars", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "name": "enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2791739}, "macro.fivetran_utils.percentile": {"unique_id": "macro.fivetran_utils.percentile", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__percentile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.280074}, "macro.fivetran_utils.default__percentile": {"unique_id": "macro.fivetran_utils.default__percentile", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2802382}, "macro.fivetran_utils.redshift__percentile": {"unique_id": "macro.fivetran_utils.redshift__percentile", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.280394}, "macro.fivetran_utils.bigquery__percentile": {"unique_id": "macro.fivetran_utils.bigquery__percentile", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.280551}, "macro.fivetran_utils.postgres__percentile": {"unique_id": "macro.fivetran_utils.postgres__percentile", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.280691}, "macro.fivetran_utils.spark__percentile": {"unique_id": "macro.fivetran_utils.spark__percentile", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.280843}, "macro.fivetran_utils.pivot_json_extract": {"unique_id": "macro.fivetran_utils.pivot_json_extract", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "name": "pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.281366}, "macro.fivetran_utils.persist_pass_through_columns": {"unique_id": "macro.fivetran_utils.persist_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "name": "persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.281801}, "macro.fivetran_utils.json_parse": {"unique_id": "macro.fivetran_utils.json_parse", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.snowflake__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2828338}, "macro.fivetran_utils.default__json_parse": {"unique_id": "macro.fivetran_utils.default__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2830741}, "macro.fivetran_utils.redshift__json_parse": {"unique_id": "macro.fivetran_utils.redshift__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.28332}, "macro.fivetran_utils.bigquery__json_parse": {"unique_id": "macro.fivetran_utils.bigquery__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.283555}, "macro.fivetran_utils.postgres__json_parse": {"unique_id": "macro.fivetran_utils.postgres__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2837849}, "macro.fivetran_utils.snowflake__json_parse": {"unique_id": "macro.fivetran_utils.snowflake__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.284045}, "macro.fivetran_utils.spark__json_parse": {"unique_id": "macro.fivetran_utils.spark__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2843049}, "macro.fivetran_utils.max_bool": {"unique_id": "macro.fivetran_utils.max_bool", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.snowflake__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2846699}, "macro.fivetran_utils.default__max_bool": {"unique_id": "macro.fivetran_utils.default__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.284768}, "macro.fivetran_utils.snowflake__max_bool": {"unique_id": "macro.fivetran_utils.snowflake__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2848608}, "macro.fivetran_utils.bigquery__max_bool": {"unique_id": "macro.fivetran_utils.bigquery__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.284956}, "macro.fivetran_utils.calculated_fields": {"unique_id": "macro.fivetran_utils.calculated_fields", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "name": "calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.285368}, "macro.fivetran_utils.seed_data_helper": {"unique_id": "macro.fivetran_utils.seed_data_helper", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "name": "seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.285981}, "macro.fivetran_utils.fill_pass_through_columns": {"unique_id": "macro.fivetran_utils.fill_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "name": "fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field.transform_sql %}\n            , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n        {% else %}\n            , {{ field.alias if field.alias else field.name }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.286633}, "macro.fivetran_utils.string_agg": {"unique_id": "macro.fivetran_utils.string_agg", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.snowflake__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.287128}, "macro.fivetran_utils.default__string_agg": {"unique_id": "macro.fivetran_utils.default__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2872581}, "macro.fivetran_utils.snowflake__string_agg": {"unique_id": "macro.fivetran_utils.snowflake__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.287383}, "macro.fivetran_utils.redshift__string_agg": {"unique_id": "macro.fivetran_utils.redshift__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.287505}, "macro.fivetran_utils.spark__string_agg": {"unique_id": "macro.fivetran_utils.spark__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.287691}, "macro.fivetran_utils.timestamp_diff": {"unique_id": "macro.fivetran_utils.timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2903411}, "macro.fivetran_utils.default__timestamp_diff": {"unique_id": "macro.fivetran_utils.default__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2905002}, "macro.fivetran_utils.redshift__timestamp_diff": {"unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.290655}, "macro.fivetran_utils.bigquery__timestamp_diff": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.290805}, "macro.fivetran_utils.postgres__timestamp_diff": {"unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.292486}, "macro.fivetran_utils.generate_docs": {"unique_id": "macro.fivetran_utils.generate_docs", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/generate_docs.sql", "original_file_path": "macros/generate_docs.sql", "name": "generate_docs", "macro_sql": "{% macro generate_docs(package) %}\n\n{% set package = \"\"~ package ~\"\" %}\n\n{% set zsh_command = \"source dbt_packages/fivetran_utils/generate_docs.sh '../dbt_\"\"\"~ package ~\"\"\"\"+\"'\" %}\n\n{{ log (zsh_command, info=True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.292901}, "macro.fivetran_utils.generate_columns_macro": {"unique_id": "macro.fivetran_utils.generate_columns_macro", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/generate_columns_macro.sql", "original_file_path": "macros/generate_columns_macro.sql", "name": "generate_columns_macro", "macro_sql": "{% macro generate_columns_macro(table_name, schema_name, database_name=target.database) %}\n\n{% set columns = get_columns_for_macro(table_name, schema_name, database_name) %}\n\n{% set jinja_macro=[] %}\n\n{% do jinja_macro.append('{% macro get_' ~ table_name ~ '_columns() %}') %}\n{% do jinja_macro.append('') %}\n{% do jinja_macro.append('{% set columns = [') %}\n\n{% for col in columns %}\n{% do jinja_macro.append('    ' ~ col ~ (',' if not loop.last)) %}\n{% endfor %}\n\n{% do jinja_macro.append('] %}') %}\n{% do jinja_macro.append('') %}\n{% do jinja_macro.append('{{ return(columns) }}') %}\n{% do jinja_macro.append('') %}\n{% do jinja_macro.append('{% endmacro %}') %}\n\n{% if execute %}\n\n    {% set joined = jinja_macro | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.get_columns_for_macro"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.294299}, "macro.fivetran_utils.source_relation": {"unique_id": "macro.fivetran_utils.source_relation", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.2948139}, "macro.fivetran_utils.default__source_relation": {"unique_id": "macro.fivetran_utils.default__source_relation", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt_utils.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.295382}, "macro.fivetran_utils.first_value": {"unique_id": "macro.fivetran_utils.first_value", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.295907}, "macro.fivetran_utils.default__first_value": {"unique_id": "macro.fivetran_utils.default__first_value", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.296105}, "macro.fivetran_utils.redshift__first_value": {"unique_id": "macro.fivetran_utils.redshift__first_value", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.296321}, "macro.fivetran_utils.add_dbt_source_relation": {"unique_id": "macro.fivetran_utils.add_dbt_source_relation", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "name": "add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.29663}, "macro.fivetran_utils.add_pass_through_columns": {"unique_id": "macro.fivetran_utils.add_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "name": "add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n      {% if column.alias %}\n\n      {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt_utils.type_string()}) %}\n\n      {% else %}\n\n      {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt_utils.type_string()}) %}\n        \n      {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.297487}, "macro.fivetran_utils.staging_models_automation": {"unique_id": "macro.fivetran_utils.staging_models_automation", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/staging_models_automation.sql", "original_file_path": "macros/staging_models_automation.sql", "name": "staging_models_automation", "macro_sql": "{% macro staging_models_automation(package, source_schema, source_database, tables) %}\n\n{% set package = \"\"~ package ~\"\" %}\n{% set source_schema = \"\"~ source_schema ~\"\" %}\n{% set source_database = \"\"~ source_database ~\"\" %}\n\n{% set zsh_command_columns = \"source dbt_packages/fivetran_utils/generate_columns.sh '../dbt_\"\"\"~ package ~\"\"\"_source' stg_\"\"\"~ package ~\"\"\" \"\"\"~ source_database ~\"\"\" \"\"\"~ source_schema ~\"\"\" \" %}\n{% set zsh_command_models = \"source dbt_packages/fivetran_utils/generate_models.sh '../dbt_\"\"\"~ package ~\"\"\"_source' stg_\"\"\"~ package ~\"\"\" \"\"\"~ source_database ~\"\"\" \"\"\"~ source_schema ~\"\"\" \" %}\n\n{%- set columns_array = [] -%}\n{%- set models_array = [] -%}\n\n{% for t in tables %}\n    {% set help_command = zsh_command_columns + t %}\n    {{ columns_array.append(help_command) }}\n\n    {% set help_command = zsh_command_models + t %}\n    {{ models_array.append(help_command) }}\n\n{% endfor %}\n\n{{ log(columns_array|join(' && \\n') + ' && \\n' + models_array|join(' && \\n'), info=True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.298908}, "macro.fivetran_utils.union_relations": {"unique_id": "macro.fivetran_utils.union_relations", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.302717}, "macro.fivetran_utils.union_tables": {"unique_id": "macro.fivetran_utils.union_tables", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.303071}, "macro.fivetran_utils.snowflake_seed_data": {"unique_id": "macro.fivetran_utils.snowflake_seed_data", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "name": "snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.303496}, "macro.fivetran_utils.default__get_columns_for_macro": {"unique_id": "macro.fivetran_utils.default__get_columns_for_macro", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/get_columns_for_macro.sql", "original_file_path": "macros/get_columns_for_macro.sql", "name": "default__get_columns_for_macro", "macro_sql": "{% macro default__get_columns_for_macro(table_name, schema_name, database_name=target.database) %}\n\n{% set query %}\n\nselect\n    concat(\n      '{\"name\": \"', \n      lower(column_name), \n      '\", \"datatype\": ',\n      case\n        when lower(data_type) like '%timestamp%' then 'dbt_utils.type_timestamp()' \n        when lower(data_type) = 'text' then 'dbt_utils.type_string()' \n        when lower(data_type) = 'boolean' then '\"boolean\"'\n        when lower(data_type) like '%num%' then 'dbt_utils.type_numeric()' \n        when lower(data_type) = 'float' then 'dbt_utils.type_float()' \n        when lower(data_type) = 'date' then '\"date\"'\n      end,\n      '}')\nfrom {{ database_name }}.information_schema.columns\nwhere lower(table_name) = '{{ table_name }}'\nand lower(table_schema) = '{{ schema_name }}'\norder by 1\n\n{% endset %}\n\n{% set results = run_query(query) %}\n{% set results_list = results.columns[0].values() %}}\n\n{{ return(results_list) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.304598}, "macro.fivetran_utils.bigquery__get_columns_for_macro": {"unique_id": "macro.fivetran_utils.bigquery__get_columns_for_macro", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/get_columns_for_macro.sql", "original_file_path": "macros/get_columns_for_macro.sql", "name": "bigquery__get_columns_for_macro", "macro_sql": "{% macro bigquery__get_columns_for_macro(table_name, schema_name, database_name=target.database) %}\n\n{% set query %}\n\nselect\n    concat(\n      '{\"name\": \"', \n      lower(column_name), \n      '\", \"datatype\": ',\n      case\n        when lower(data_type) like '%timestamp%' then 'dbt_utils.type_timestamp()' \n        when lower(data_type) = 'string' then 'dbt_utils.type_string()' \n        when lower(data_type) = 'bool' then '\"boolean\"'\n        when lower(data_type) like '%num%' then 'dbt_utils.type_numeric()' \n        when lower(data_type) = 'float64' then 'dbt_utils.type_float()' \n        when lower(data_type) = 'int64' then 'dbt_utils.type_int()' \n        when lower(data_type) = 'date' then '\"date\"' \n        when lower(data_type) = 'datetime' then '\"datetime\"' \n      end,\n      '}')\nfrom `{{ database_name }}`.{{ schema_name }}.INFORMATION_SCHEMA.COLUMNS\nwhere lower(table_name) = '{{ table_name }}'\nand lower(table_schema) = '{{ schema_name }}'\norder by 1\n\n{% endset %}\n\n{% set results = run_query(query) %}\n{% set results_list = results.columns[0].values() %}}\n\n{{ return(results_list) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.305089}, "macro.fivetran_utils.get_columns_for_macro": {"unique_id": "macro.fivetran_utils.get_columns_for_macro", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/get_columns_for_macro.sql", "original_file_path": "macros/get_columns_for_macro.sql", "name": "get_columns_for_macro", "macro_sql": "{% macro get_columns_for_macro(table_name, schema_name, database_name) -%}\n  {{ return(adapter.dispatch('get_columns_for_macro')(table_name, schema_name, database_name)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__get_columns_for_macro"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3053188}, "macro.fivetran_utils.fill_staging_columns": {"unique_id": "macro.fivetran_utils.fill_staging_columns", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.306952}, "macro.fivetran_utils.quote_column": {"unique_id": "macro.fivetran_utils.quote_column", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3075042}, "macro.fivetran_utils.json_extract": {"unique_id": "macro.fivetran_utils.json_extract", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.snowflake__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.308085}, "macro.fivetran_utils.default__json_extract": {"unique_id": "macro.fivetran_utils.default__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.308241}, "macro.fivetran_utils.snowflake__json_extract": {"unique_id": "macro.fivetran_utils.snowflake__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.308387}, "macro.fivetran_utils.redshift__json_extract": {"unique_id": "macro.fivetran_utils.redshift__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.30855}, "macro.fivetran_utils.bigquery__json_extract": {"unique_id": "macro.fivetran_utils.bigquery__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.308697}, "macro.fivetran_utils.postgres__json_extract": {"unique_id": "macro.fivetran_utils.postgres__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.308838}, "macro.fivetran_utils.collect_freshness": {"unique_id": "macro.fivetran_utils.collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3095539}, "macro.fivetran_utils.default__collect_freshness": {"unique_id": "macro.fivetran_utils.default__collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.310582}, "macro.fivetran_utils.timestamp_add": {"unique_id": "macro.fivetran_utils.timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.311284}, "macro.fivetran_utils.default__timestamp_add": {"unique_id": "macro.fivetran_utils.default__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.311446}, "macro.fivetran_utils.bigquery__timestamp_add": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.311599}, "macro.fivetran_utils.redshift__timestamp_add": {"unique_id": "macro.fivetran_utils.redshift__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.311757}, "macro.fivetran_utils.postgres__timestamp_add": {"unique_id": "macro.fivetran_utils.postgres__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3119092}, "macro.fivetran_utils.spark__timestamp_add": {"unique_id": "macro.fivetran_utils.spark__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt_utils.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.312076}, "macro.fivetran_utils.ceiling": {"unique_id": "macro.fivetran_utils.ceiling", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.snowflake__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.312373}, "macro.fivetran_utils.default__ceiling": {"unique_id": "macro.fivetran_utils.default__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.31247}, "macro.fivetran_utils.snowflake__ceiling": {"unique_id": "macro.fivetran_utils.snowflake__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.312563}, "macro.fivetran_utils.remove_prefix_from_columns": {"unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "name": "remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.313237}, "macro.fivetran_utils.union_data": {"unique_id": "macro.fivetran_utils.union_data", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "union_data", "macro_sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.314425}, "macro.fivetran_utils.default__union_data": {"unique_id": "macro.fivetran_utils.default__union_data", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "default__union_data", "macro_sql": "{% macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) %}\n\n{% if var(union_schema_variable, none) %}\n\n    {% set relations = [] %}\n    \n    {% if var(union_schema_variable) is string %}\n    {% set trimmed = var(union_schema_variable)|trim('[')|trim(']') %}\n    {% set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") %}\n    {% else %}\n    {% set schemas = var(union_schema_variable) %}\n    {% endif %}\n\n    {% for schema in var(union_schema_variable) %}\n\n    {% set relation=adapter.get_relation(\n        database=var(database_variable, default_database),\n        schema=schema,\n        identifier=table_identifier\n    ) -%}\n    \n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% elif var(union_database_variable, none) %}\n\n    {% set relations = [] %}\n\n    {% for database in var(union_database_variable) %}\n\n    {% set relation=adapter.get_relation(\n        database=database,\n        schema=var(schema_variable, default_schema),\n        identifier=table_identifier\n    ) -%}\n\n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% else %}\n\n    select * \n    from {{ var(default_variable) }}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.316213}, "macro.fivetran_utils.dummy_coalesce_value": {"unique_id": "macro.fivetran_utils.dummy_coalesce_value", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "name": "dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3176389}, "macro.fivetran_utils.array_agg": {"unique_id": "macro.fivetran_utils.array_agg", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.317951}, "macro.fivetran_utils.default__array_agg": {"unique_id": "macro.fivetran_utils.default__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.318047}, "macro.fivetran_utils.redshift__array_agg": {"unique_id": "macro.fivetran_utils.redshift__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.318144}, "macro.fivetran_utils.empty_variable_warning": {"unique_id": "macro.fivetran_utils.empty_variable_warning", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "name": "empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.318581}, "macro.fivetran_utils.enabled_vars_one_true": {"unique_id": "macro.fivetran_utils.enabled_vars_one_true", "package_name": "fivetran_utils", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "name": "enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.319021}, "macro.re_data.re_data_last_base_metrics_part": {"unique_id": "macro.re_data.re_data_last_base_metrics_part", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/internal_model_template.sql", "original_file_path": "macros/metrics/base/internal_model_template.sql", "name": "re_data_last_base_metrics_part", "macro_sql": "{% macro re_data_last_base_metrics_part() %}\n\n-- depends_on: {{ ref('re_data_columns') }}\n\n{{\n    config(\n        materialized='table',\n    )\n}}\n\n{{ re_data.empty_last_base_metrics() }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.empty_last_base_metrics"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3194969}, "macro.re_data.re_data_last_base_metrics_thread": {"unique_id": "macro.re_data.re_data_last_base_metrics_thread", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/internal_model_template.sql", "original_file_path": "macros/metrics/base/internal_model_template.sql", "name": "re_data_last_base_metrics_thread", "macro_sql": "{% macro re_data_last_base_metrics_thread(num) %}\n    {% set part_name = 're_data_last_base_metrics_part' ~ num %}\n    {{ re_data.generate_depends(['re_data_monitored', 're_data_columns', 're_data_run_started_at', part_name]) }}\n\n    {{\n        config(\n            materialized='table',\n        )\n    }}\n\n    {% if not re_data.in_compile() %}\n        {{ re_data.metrics_base_compute_for_thread(num, part_name) }}\n    {% endif %}\n\n    {{ re_data.empty_last_base_metrics() }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.generate_depends", "macro.re_data.in_compile", "macro.re_data.metrics_base_compute_for_thread", "macro.re_data.empty_last_base_metrics"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.319957}, "macro.re_data.metrics_base_expressions": {"unique_id": "macro.re_data.metrics_base_expressions", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/expression.sql", "original_file_path": "macros/metrics/base/expression.sql", "name": "metrics_base_expressions", "macro_sql": "{% macro metrics_base_expressions(table_name, time_filter, metrics, columns, table_level=False) %}\n\n    {% set col_expr = [] %}\n\n    {% for col in columns %}\n        {% set column_name = re_data.row_value(col, 'column_name') %}\n        {% do col_expr.extend(re_data.metrics_base_expression_column_all(table_name, metrics, col, time_filter)) %}\n    {% endfor %}\n\n    {% if table_level %}\n        {% do col_expr.extend(re_data.metrics_base_expresion_table_all(table_name, time_filter, metrics)) %}\n    {% endif %}\n\n    {{ return (col_expr) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.row_value", "macro.re_data.metrics_base_expression_column_all", "macro.re_data.metrics_base_expresion_table_all"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3234189}, "macro.re_data.metrics_base_expression_column_all": {"unique_id": "macro.re_data.metrics_base_expression_column_all", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/expression.sql", "original_file_path": "macros/metrics/base/expression.sql", "name": "metrics_base_expression_column_all", "macro_sql": "{% macro metrics_base_expression_column_all(table_name, metrics, column, time_filter) %}\n\n    {%- set col_expr = [] %}\n    {%- set metrics_to_compute = [] %}\n    {% set data_kind = re_data.get_column_type(column) %}\n    {% set column_name = re_data.row_value(column, 'column_name') %}\n    {% do metrics_to_compute.extend(var('re_data:metrics_base').get('column', {}).get(data_kind, [])) %}\n    {% do metrics_to_compute.extend(metrics.get('column', {}).get(column_name, [])) %}    \n\n    {% for metric_value in metrics_to_compute %}\n        {% set metric_obj = re_data.extract_metric_config(metric_value) %}\n        {% set expression = re_data.metrics_base_expression_column(column_name, metric_obj['metric'], metric_obj['config'], table_name, time_filter) %}\n        {% do col_expr.append({ 'expr': expression, 'col_name': column_name, 'metric': metric_obj['metric']}) %}\n    {% endfor %}\n\n    {{ return (col_expr) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.get_column_type", "macro.re_data.row_value", "macro.re_data.extract_metric_config", "macro.re_data.metrics_base_expression_column"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3245912}, "macro.re_data.metrics_base_expresion_table_all": {"unique_id": "macro.re_data.metrics_base_expresion_table_all", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/expression.sql", "original_file_path": "macros/metrics/base/expression.sql", "name": "metrics_base_expresion_table_all", "macro_sql": "{% macro metrics_base_expresion_table_all(table_name, time_filter, metrics) %}\n    {%- set table_expr = [] %}\n    {%- set metrics_to_compute = [] %}\n    {% do metrics_to_compute.extend(var('re_data:metrics_base').get('table', [])) %}\n    {% do metrics_to_compute.extend(metrics.get('table', [])) %}\n\n    {% for metric_value in metrics_to_compute %}\n        {% set metric_obj = re_data.extract_metric_config(metric_value) %}\n        {% set expression = re_data.metrics_base_expression_table(time_filter, metric_obj['metric'], metric_obj['config'], table_name) %}\n        {% do table_expr.append({ 'expr': expression, 'col_name': '', 'metric': metric_obj['metric']}) %}\n    {% endfor %}\n\n    {{ return (table_expr) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.extract_metric_config", "macro.re_data.metrics_base_expression_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.325464}, "macro.re_data.metrics_base_expression_table": {"unique_id": "macro.re_data.metrics_base_expression_table", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/expression.sql", "original_file_path": "macros/metrics/base/expression.sql", "name": "metrics_base_expression_table", "macro_sql": "{% macro metrics_base_expression_table(time_filter, metric_name, config, table_name) %}\n    {% set metric_macro = re_data.get_metric_macro(metric_name) %}\n    {% set context = {'time_filter': time_filter, 'metric_name': metric_name, 'config': config, 'table_name': table_name, 'column_name': none} %}\n\n    {{ metric_macro(context) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.get_metric_macro"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.325858}, "macro.re_data.metrics_base_expression_column": {"unique_id": "macro.re_data.metrics_base_expression_column", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/expression.sql", "original_file_path": "macros/metrics/base/expression.sql", "name": "metrics_base_expression_column", "macro_sql": "\n\n\n{%- macro metrics_base_expression_column(column_name, metric_name, config, table_name, time_filter) %}\n    {% set metric_macro = re_data.get_metric_macro(metric_name) %}\n    {% set context = {'time_filter': time_filter, 'metric_name': metric_name, 'config': config, 'table_name': table_name, 'column_name': re_data.quote_column_name(column_name)} %}\n\n    {{ metric_macro(context) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.get_metric_macro", "macro.re_data.quote_column_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.326294}, "macro.re_data.extract_metric_config": {"unique_id": "macro.re_data.extract_metric_config", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/expression.sql", "original_file_path": "macros/metrics/base/expression.sql", "name": "extract_metric_config", "macro_sql": "{% macro extract_metric_config(metric_value) %}\n\n    {% set config = none %}\n\n    {% if metric_value is mapping %}\n        {% set metric = metric_value.keys() | first %}\n        {% if metric_value[metric] is none %}\n            {{ exceptions.raise_compiler_error(\"Empty configuration passed for metric: \" ~ metric ~ \". If the metric doesn't use a config, please use the column name as a string.\") }}\n        {% endif %}\n\n        {% set config = metric_value[metric] %}\n    {%- else %}\n        {% set metric = metric_value %}\n    {% endif %}\n\n    {{ return ({'metric': metric, 'config': config}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3268962}, "macro.re_data.get_metric_macro": {"unique_id": "macro.re_data.get_metric_macro", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/expression.sql", "original_file_path": "macros/metrics/base/expression.sql", "name": "get_metric_macro", "macro_sql": "\n\n{%- macro get_metric_macro(metric_name) %}\n    {% set macro_name = 're_data_metric' + '_' + metric_name %}\n\n    {% if context['re_data'].get(macro_name) %}\n        {% set metric_macro = context['re_data'][macro_name] %}\n    {%- else %}\n        {% set metric_macro = context[project_name][macro_name] %}\n    {% endif %}\n\n    {{ return (metric_macro) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.327341}, "macro.re_data.metrics_base_compute_for_thread": {"unique_id": "macro.re_data.metrics_base_compute_for_thread", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/queries.sql", "original_file_path": "macros/metrics/base/queries.sql", "name": "metrics_base_compute_for_thread", "macro_sql": "{% macro metrics_base_compute_for_thread(thread_value, ref_model) %}\n    {%- set tables =  run_query(re_data.get_tables()) %}\n    {%- for mtable in tables %}\n        -- we are splitting computing metrics to 4 different threads\n        {% set for_loop_mod = (loop.index % 4) %}\n        {% if for_loop_mod == thread_value %}\n            {% set name = re_data.row_value(mtable, 'name') %}\n            {% set schema = re_data.row_value(mtable, 'schema') %}\n            {% set database = re_data.row_value(mtable, 'database') %}\n            {% set time_filter = re_data.row_value(mtable, 'time_filter') %}    \n            {% set metrics = fromjson(re_data.row_value(mtable, 'metrics')) %}\n            {% set for_cols = fromjson(re_data.row_value(mtable, 'columns')) %}\n            {% set for_cols_dict = re_data.dict_from_list(for_cols) %}\n            {% set table_name = re_data.full_table_name_values(name, schema, database) %}\n \n            {% set columns_query %}\n                select * from {{ ref('re_data_columns') }}\n                where name = '{{ name }}' and schema = '{{ schema }}' and database = '{{ database }}'\n            {% endset %}\n\n            {% set columns = run_query(columns_query) %}\n\n            {{ dbt_utils.log_info('[re_data_log] - start computing metrics for table:' ~ table_name) }}\n\n            {% set columns_to_query = [] %}\n            {% set size = columns_to_query| length %}\n\n            {% for column in columns %}\n                {% set column_name = re_data.row_value(column, 'column_name') %}\n                \n\n                {% if not for_cols_dict or (for_cols_dict.get(column_name)) %}\n                    {% do columns_to_query.append(column) %}\n                {% endif %}\n\n                {% set columns_size = columns_to_query| length %}\n\n                {% if columns_size == var('re_data:max_columns_in_query') %}\n                {# /* Some balance size between making sure query will not crash &  */ #}\n                    {%- set insert_stats_query = re_data.metrics_base_insert(table_name, time_filter, metrics, ref_model, columns_to_query) -%}\n\n                    {% if insert_stats_query %}\n                        {% do run_query(insert_stats_query) %}\n                    {% endif %}\n                    {% do columns_to_query.clear() %}\n                {% endif %}\n            {% endfor %}\n\n            {%- set insert_stats_query = re_data.metrics_base_insert(table_name, time_filter, metrics, ref_model, columns_to_query, table_level=True) -%}\n            {% do run_query(insert_stats_query) %}\n\n            {{ dbt_utils.log_info('[re_data_log] - finished computing metrics for table:' ~ table_name) }}\n        {% endif %}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.re_data.get_tables", "macro.re_data.row_value", "macro.re_data.dict_from_list", "macro.re_data.full_table_name_values", "macro.dbt_utils.log_info", "macro.re_data.metrics_base_insert"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3318248}, "macro.re_data.metrics_base_insert": {"unique_id": "macro.re_data.metrics_base_insert", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/queries.sql", "original_file_path": "macros/metrics/base/queries.sql", "name": "metrics_base_insert", "macro_sql": "{% macro metrics_base_insert(table_name, time_filter, metrics, ref_model, columns, table_level=False) %}\n\n    {% set col_exprs = re_data.metrics_base_expressions(table_name, time_filter, metrics, columns, table_level) %}\n    {% if col_exprs == [] %}\n        {{ return ('') }}\n    {% endif %}\n\n    insert into {{ ref(ref_model) }}\n    with temp_table_metrics as (\n    select \n        {%- for col_expr in col_exprs %}\n            ( {{ col_expr.expr }} ) as {{ col_expr.col_name + '___' + col_expr.metric }}\n            {%- if not loop.last %},{%- endif %}\n        {% endfor %}\n    from \n        {{ table_name }}\n    where\n        {{ in_time_window(time_filter) }}\n    )\n\n    {%- for col_expr in col_exprs %}\n        {% set final_metric_name = get_final_metric_name(col_expr.metric, time_filter) %}\n        \n        select '{{table_name}}' as table_name, '{{ col_expr.col_name }}' as column_name, '{{ final_metric_name }}' as metric, {{ col_expr.col_name + '___' + col_expr.metric }} as value\n        from temp_table_metrics\n        {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.metrics_base_expressions", "macro.re_data.in_time_window", "macro.re_data.get_final_metric_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.332887}, "macro.re_data.get_final_metric_name": {"unique_id": "macro.re_data.get_final_metric_name", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/queries.sql", "original_file_path": "macros/metrics/base/queries.sql", "name": "get_final_metric_name", "macro_sql": "{% macro get_final_metric_name(metric_name, time_filter) %}\n    {% if time_filter is none %}\n        {{ return ('global__' + metric_name) }}\n    {% else %}\n        {{ return (metric_name) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3331509}, "macro.re_data.re_data_metric_row_count": {"unique_id": "macro.re_data.re_data_metric_row_count", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/table_default.sql", "original_file_path": "macros/metrics/base/build_in/table_default.sql", "name": "re_data_metric_row_count", "macro_sql": "{% macro re_data_metric_row_count(context) %}\n    count(1)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.333647}, "macro.re_data.re_data_metric_freshness": {"unique_id": "macro.re_data.re_data_metric_freshness", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/table_default.sql", "original_file_path": "macros/metrics/base/build_in/table_default.sql", "name": "re_data_metric_freshness", "macro_sql": "{% macro re_data_metric_freshness(context) %}\n    {{ freshness_expression(context.time_filter) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.freshness_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.333781}, "macro.re_data.freshness_expression": {"unique_id": "macro.re_data.freshness_expression", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/table_default.sql", "original_file_path": "macros/metrics/base/build_in/table_default.sql", "name": "freshness_expression", "macro_sql": "{% macro freshness_expression(time_filter) %}\n    {# /* If time_filter is none, we are computing the metric globally. we set the value as null since a table without use of a time filter doesn't really have a freshness metric */ #}\n    {% if time_filter is none %}\n        cast(null as {{ numeric_type() }})\n    {% else %}\n        {{ adapter.dispatch('freshness_expression', 're_data')(time_filter) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.numeric_type", "macro.re_data.snowflake__freshness_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.334056}, "macro.re_data.default__freshness_expression": {"unique_id": "macro.re_data.default__freshness_expression", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/table_default.sql", "original_file_path": "macros/metrics/base/build_in/table_default.sql", "name": "default__freshness_expression", "macro_sql": "{% macro default__freshness_expression(time_filter) %}\n    EXTRACT(EPOCH FROM ({{time_window_end()}} - max({{time_filter}})))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.time_window_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.334181}, "macro.re_data.bigquery__freshness_expression": {"unique_id": "macro.re_data.bigquery__freshness_expression", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/table_default.sql", "original_file_path": "macros/metrics/base/build_in/table_default.sql", "name": "bigquery__freshness_expression", "macro_sql": "{% macro bigquery__freshness_expression(time_filter) %}\n    TIMESTAMP_DIFF ( timestamp({{ time_window_end()}}), timestamp(max({{time_filter}})), SECOND)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.time_window_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.334305}, "macro.re_data.snowflake__freshness_expression": {"unique_id": "macro.re_data.snowflake__freshness_expression", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/table_default.sql", "original_file_path": "macros/metrics/base/build_in/table_default.sql", "name": "snowflake__freshness_expression", "macro_sql": "{% macro snowflake__freshness_expression(time_filter) %}\n    timediff(second, max({{time_filter}}), {{- time_window_end() -}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.time_window_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.33443}, "macro.re_data.redshift__freshness_expression": {"unique_id": "macro.re_data.redshift__freshness_expression", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/table_default.sql", "original_file_path": "macros/metrics/base/build_in/table_default.sql", "name": "redshift__freshness_expression", "macro_sql": "{% macro redshift__freshness_expression(time_filter) %}\n    DATEDIFF(second, max({{time_filter}}), {{- time_window_end() -}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.time_window_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.334558}, "macro.re_data.re_data_metric_max": {"unique_id": "macro.re_data.re_data_metric_max", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/column_default.sql", "original_file_path": "macros/metrics/base/build_in/column_default.sql", "name": "re_data_metric_max", "macro_sql": "{% macro re_data_metric_max(context) %}\n    max({{context.column_name}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.335925}, "macro.re_data.re_data_metric_min": {"unique_id": "macro.re_data.re_data_metric_min", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/column_default.sql", "original_file_path": "macros/metrics/base/build_in/column_default.sql", "name": "re_data_metric_min", "macro_sql": "{% macro re_data_metric_min(context) %}\n    min({{context.column_name}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.336032}, "macro.re_data.re_data_metric_avg": {"unique_id": "macro.re_data.re_data_metric_avg", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/column_default.sql", "original_file_path": "macros/metrics/base/build_in/column_default.sql", "name": "re_data_metric_avg", "macro_sql": "{% macro re_data_metric_avg(context) %}\n    avg(cast ({{context.column_name}} as {{ numeric_type() }}))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.numeric_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.336169}, "macro.re_data.re_data_metric_stddev": {"unique_id": "macro.re_data.re_data_metric_stddev", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/column_default.sql", "original_file_path": "macros/metrics/base/build_in/column_default.sql", "name": "re_data_metric_stddev", "macro_sql": "{% macro re_data_metric_stddev(context) %}\n    stddev(cast ( {{context.column_name}} as {{ numeric_type() }}))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.numeric_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3363001}, "macro.re_data.re_data_metric_variance": {"unique_id": "macro.re_data.re_data_metric_variance", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/column_default.sql", "original_file_path": "macros/metrics/base/build_in/column_default.sql", "name": "re_data_metric_variance", "macro_sql": "{% macro re_data_metric_variance(context) %}\n    variance(cast ( {{context.column_name}} as {{ numeric_type() }}))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.numeric_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.336429}, "macro.re_data.re_data_metric_max_length": {"unique_id": "macro.re_data.re_data_metric_max_length", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/column_default.sql", "original_file_path": "macros/metrics/base/build_in/column_default.sql", "name": "re_data_metric_max_length", "macro_sql": "{% macro re_data_metric_max_length(context) %}\n    max(length({{context.column_name}}))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3365371}, "macro.re_data.re_data_metric_min_length": {"unique_id": "macro.re_data.re_data_metric_min_length", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/column_default.sql", "original_file_path": "macros/metrics/base/build_in/column_default.sql", "name": "re_data_metric_min_length", "macro_sql": "{% macro re_data_metric_min_length(context) %}\n    min(length({{context.column_name}}))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.33664}, "macro.re_data.re_data_metric_avg_length": {"unique_id": "macro.re_data.re_data_metric_avg_length", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/column_default.sql", "original_file_path": "macros/metrics/base/build_in/column_default.sql", "name": "re_data_metric_avg_length", "macro_sql": "{% macro re_data_metric_avg_length(context) %}\n    avg(cast (length( {{context.column_name}} ) as {{ numeric_type() }}))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.numeric_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.336767}, "macro.re_data.re_data_metric_nulls_count": {"unique_id": "macro.re_data.re_data_metric_nulls_count", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/column_default.sql", "original_file_path": "macros/metrics/base/build_in/column_default.sql", "name": "re_data_metric_nulls_count", "macro_sql": "{% macro re_data_metric_nulls_count(context) %}\n    coalesce(\n        sum(\n            case when {{context.column_name}} is null\n                then 1\n            else 0\n            end\n        ), 0\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.336871}, "macro.re_data.re_data_metric_missing_count": {"unique_id": "macro.re_data.re_data_metric_missing_count", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/column_default.sql", "original_file_path": "macros/metrics/base/build_in/column_default.sql", "name": "re_data_metric_missing_count", "macro_sql": "{% macro re_data_metric_missing_count(context) %}\n    coalesce(\n        sum(\n            case \n            when {{context.column_name}} is null\n                then 1\n            when {{context.column_name}} = ''\n                then 1\n            else 0\n            end\n        ), 0\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.337003}, "macro.re_data.re_data_metric_nulls_percent": {"unique_id": "macro.re_data.re_data_metric_nulls_percent", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/column_default.sql", "original_file_path": "macros/metrics/base/build_in/column_default.sql", "name": "re_data_metric_nulls_percent", "macro_sql": "{% macro re_data_metric_nulls_percent(context) %}\n    {{ percentage_formula(re_data_metric_nulls_count(context), re_data_metric_row_count()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.percentage_formula", "macro.re_data.re_data_metric_nulls_count", "macro.re_data.re_data_metric_row_count"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.337166}, "macro.re_data.re_data_metric_missing_percent": {"unique_id": "macro.re_data.re_data_metric_missing_percent", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/column_default.sql", "original_file_path": "macros/metrics/base/build_in/column_default.sql", "name": "re_data_metric_missing_percent", "macro_sql": "{% macro re_data_metric_missing_percent(context) %}\n    {{ percentage_formula(re_data_metric_missing_count(context), re_data_metric_row_count()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.percentage_formula", "macro.re_data.re_data_metric_missing_count", "macro.re_data.re_data_metric_row_count"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.337507}, "macro.re_data.re_data_metric_distinct_table_rows": {"unique_id": "macro.re_data.re_data_metric_distinct_table_rows", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_table_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_table_metrics.sql", "name": "re_data_metric_distinct_table_rows", "macro_sql": "{% macro re_data_metric_distinct_table_rows(context) %}\n    with temp_table AS (\n            select distinct * from {{ context.table_name }}\n            where {{ in_time_window(context.time_filter) }}\n        )\n    select coalesce(count(*), 0) FROM temp_table\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.in_time_window"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3377888}, "macro.re_data.re_data_metric_regex_count": {"unique_id": "macro.re_data.re_data_metric_regex_count", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "re_data_metric_regex_count", "macro_sql": "{% macro re_data_metric_regex_count(column_name, pattern) %}\n    coalesce(\n        sum(\n            case when {{ regex_match_expression(column_name, pattern) }}\n                then 1\n            else 0\n            end\n        ), 0\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.regex_match_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.339496}, "macro.re_data.re_data_metric_match_regex": {"unique_id": "macro.re_data.re_data_metric_match_regex", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "re_data_metric_match_regex", "macro_sql": "{% macro re_data_metric_match_regex(context) %}\n    {{ re_data_metric_regex_count(context.column_name, context.config.regex) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.re_data_metric_regex_count"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3396502}, "macro.re_data.re_data_metric_match_regex_percent": {"unique_id": "macro.re_data.re_data_metric_match_regex_percent", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "re_data_metric_match_regex_percent", "macro_sql": "{% macro re_data_metric_match_regex_percent(context) %}\n    {{ percentage_formula(re_data_metric_match_regex(context), re_data_metric_row_count()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.percentage_formula", "macro.re_data.re_data_metric_match_regex", "macro.re_data.re_data_metric_row_count"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3398058}, "macro.re_data.re_data_metric_not_match_regex": {"unique_id": "macro.re_data.re_data_metric_not_match_regex", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "re_data_metric_not_match_regex", "macro_sql": "{% macro re_data_metric_not_match_regex(context) %}\n    {{ re_data_metric_row_count() }} - {{ re_data_metric_regex_count(context.column_name, context.config.regex) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.re_data_metric_row_count", "macro.re_data.re_data_metric_regex_count"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.339992}, "macro.re_data.re_data_metric_not_match_regex_percent": {"unique_id": "macro.re_data.re_data_metric_not_match_regex_percent", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "re_data_metric_not_match_regex_percent", "macro_sql": "{% macro re_data_metric_not_match_regex_percent(context) %}\n    {{ percentage_formula(re_data_metric_not_match_regex(context), re_data_metric_row_count()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.percentage_formula", "macro.re_data.re_data_metric_not_match_regex", "macro.re_data.re_data_metric_row_count"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.340148}, "macro.re_data.re_data_metric_distinct_values": {"unique_id": "macro.re_data.re_data_metric_distinct_values", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "re_data_metric_distinct_values", "macro_sql": "{% macro re_data_metric_distinct_values(context) %}\n    {{ distinct_values(context) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.distinct_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3402638}, "macro.re_data.distinct_values": {"unique_id": "macro.re_data.distinct_values", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "distinct_values", "macro_sql": "{% macro distinct_values(context) %}\n    {{ adapter.dispatch('distinct_values', 're_data')(context) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__distinct_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.340422}, "macro.re_data.default__distinct_values": {"unique_id": "macro.re_data.default__distinct_values", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "default__distinct_values", "macro_sql": "{% macro default__distinct_values(context) %}\n    coalesce(\n        count(distinct {{ context.column_name }} )\n    , 0)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.340526}, "macro.re_data.postgres__distinct_values": {"unique_id": "macro.re_data.postgres__distinct_values", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "postgres__distinct_values", "macro_sql": "{% macro postgres__distinct_values(context) %}\n    {# /* In postgres, its faster to count distinct values in a column by selecting then counting in separate steps */ #}\n    with temp_table as (\n            select distinct {{ context.column_name }} from {{ context.table_name }}\n            where {{ in_time_window(context.time_filter) }}\n        )\n    select coalesce(count(*), 0) from temp_table\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.in_time_window"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.340715}, "macro.re_data.re_data_metric_approx_distinct_values": {"unique_id": "macro.re_data.re_data_metric_approx_distinct_values", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "re_data_metric_approx_distinct_values", "macro_sql": "{% macro re_data_metric_approx_distinct_values(context) %}\n    {{ approx_distinct_values(context) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.approx_distinct_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3408341}, "macro.re_data.approx_distinct_values": {"unique_id": "macro.re_data.approx_distinct_values", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "approx_distinct_values", "macro_sql": "{% macro approx_distinct_values(context) %}\n    {{ adapter.dispatch('approx_distinct_values', 're_data')(context) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__approx_distinct_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.340991}, "macro.re_data.default__approx_distinct_values": {"unique_id": "macro.re_data.default__approx_distinct_values", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "default__approx_distinct_values", "macro_sql": "{% macro default__approx_distinct_values(context) %}\n    {# /* No approximate distinct count in postgres so we default to using a distinct count */ #}\n    {{ re_data_metric_distinct_values(context) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.re_data_metric_distinct_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.341114}, "macro.re_data.redshift__approx_distinct_values": {"unique_id": "macro.re_data.redshift__approx_distinct_values", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "redshift__approx_distinct_values", "macro_sql": "{% macro redshift__approx_distinct_values(context) %}\n    approximate {{ re_data_metric_distinct_values(context.column_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.re_data_metric_distinct_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.341238}, "macro.re_data.bigquery__approx_distinct_values": {"unique_id": "macro.re_data.bigquery__approx_distinct_values", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "bigquery__approx_distinct_values", "macro_sql": "{% macro bigquery__approx_distinct_values(context) %}\n    approx_count_distinct({{ context.column_name }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3413382}, "macro.re_data.snowflake__approx_distinct_values": {"unique_id": "macro.re_data.snowflake__approx_distinct_values", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "snowflake__approx_distinct_values", "macro_sql": "{% macro snowflake__approx_distinct_values(context) %}\n    approx_count_distinct({{ context.column_name }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.341438}, "macro.re_data.re_data_metric_duplicate_values": {"unique_id": "macro.re_data.re_data_metric_duplicate_values", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "re_data_metric_duplicate_values", "macro_sql": "{% macro re_data_metric_duplicate_values(context) %}\n        with temp_table as (\n            select {{ context.column_name }} from {{ context.table_name }}\n            where {{ in_time_window(context.time_filter) }}\n            group by {{ context.column_name }}\n            having count(1) > 1\n        )\n        select coalesce(count(*), 0) from temp_table\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.in_time_window"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.341651}, "macro.re_data.re_data_metric_duplicate_rows": {"unique_id": "macro.re_data.re_data_metric_duplicate_rows", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "re_data_metric_duplicate_rows", "macro_sql": "{% macro re_data_metric_duplicate_rows(context) %}\n        with temp_table as (\n            select {{ context.column_name }}, count(1) as row_count from {{ context.table_name }}\n            where {{ in_time_window(context.time_filter) }}\n            group by {{ context.column_name }}\n            having count(1) > 1\n        )\n        select coalesce(sum(row_count), 0) from temp_table\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.in_time_window"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.341923}, "macro.re_data.re_data_metric_unique_rows": {"unique_id": "macro.re_data.re_data_metric_unique_rows", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/metrics/base/build_in/optional_column_metrics.sql", "original_file_path": "macros/metrics/base/build_in/optional_column_metrics.sql", "name": "re_data_metric_unique_rows", "macro_sql": "{% macro re_data_metric_unique_rows(context) %}\n        with temp_table as (\n            select {{ context.column_name }}, count(1) as row_count from {{ context.table_name }}\n            where {{ in_time_window(context.time_filter) }}\n            group by {{ context.column_name }}\n            having count(1) = 1\n        )\n        select coalesce(sum(row_count), 0) from temp_table\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.in_time_window"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.342137}, "macro.re_data.metric_expression": {"unique_id": "macro.re_data.metric_expression", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/tests/test_metrics.sql", "original_file_path": "macros/tests/test_metrics.sql", "name": "metric_expression", "macro_sql": "{% macro metric_expression(table, metric, expression, column_name=None, condition=None) %}\n    select * from {{ref('re_data_base_metrics')}}\n    where\n        table_name = '{{ re_data.full_table_name_values(table.identifier, table.schema, table.database)}}' and\n        metric = '{{ metric }}' and\n        {% if condition is not none %}\n            {{ condition }} and\n        {% endif %}\n        {% if column_name is none %}\n        not ( {{ expression }} )\n        {% else %}\n        column_name = '{{ column_name }}' and\n        not ( {{ expression }} )\n        {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.full_table_name_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.344955}, "macro.re_data.test_metric_expression_is_true": {"unique_id": "macro.re_data.test_metric_expression_is_true", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/tests/test_metrics.sql", "original_file_path": "macros/tests/test_metrics.sql", "name": "test_metric_expression_is_true", "macro_sql": "{% test metric_expression_is_true(model, table, metric, expression, column_name=None, condition=None) %}\n    {{ re_data.metric_expression(table, metric, expression, column_name=None, condition=None) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.metric_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.345223}, "macro.re_data.test_metric_equal_to": {"unique_id": "macro.re_data.test_metric_equal_to", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/tests/test_metrics.sql", "original_file_path": "macros/tests/test_metrics.sql", "name": "test_metric_equal_to", "macro_sql": "{% test metric_equal_to(model, table, metric, value, column_name=None, condition=None) %}\n    {{ re_data.metric_expression(table, metric, 'value = ' ~ value, column_name, condition) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.metric_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.345481}, "macro.re_data.test_metric_in_range": {"unique_id": "macro.re_data.test_metric_in_range", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/tests/test_metrics.sql", "original_file_path": "macros/tests/test_metrics.sql", "name": "test_metric_in_range", "macro_sql": "{% test metric_in_range(model, table, metric, min_value, max_value, column_name=None, condition=None) %}\n    {{ re_data.metric_expression(table, metric, 'value >= ' ~ min_value ~ ' and value <= ' ~ max_value, column_name, condition) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.metric_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.345786}, "macro.re_data.test_assert_true": {"unique_id": "macro.re_data.test_assert_true", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/tests/test_metrics.sql", "original_file_path": "macros/tests/test_metrics.sql", "name": "test_assert_true", "macro_sql": "{% test assert_true(model, column_name=None, metric=None, expression=expression, where=None) %}\n    -- depends_on: {{ ref('re_data_base_metrics') }}\n    {% if execute %}\n        {{ re_data.metric_expression(model, metric, expression, column_name, where) }}\n    {% else %}\n        {{ re_data.empty_table() }}\n    {% endif %}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.metric_expression", "macro.re_data.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.346187}, "macro.re_data.test_assert_false": {"unique_id": "macro.re_data.test_assert_false", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/tests/test_metrics.sql", "original_file_path": "macros/tests/test_metrics.sql", "name": "test_assert_false", "macro_sql": "{% test assert_false(model, column_name=None, metric=None, expression=expression, where=None) %}\n    -- depends_on: {{ ref('re_data_base_metrics') }}\n    {% if execute %}\n        {{ re_data.metric_expression(model, metric, 'not (' ~ expression ~ ')', column_name, where) }}\n    {% else %}\n        {{ re_data.empty_table() }}\n    {% endif %}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.metric_expression", "macro.re_data.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.346612}, "macro.re_data.test_assert_in_range": {"unique_id": "macro.re_data.test_assert_in_range", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/tests/test_metrics.sql", "original_file_path": "macros/tests/test_metrics.sql", "name": "test_assert_in_range", "macro_sql": "{% test assert_in_range(model, column_name=None, metric=None, min_value=None, max_value=None, where=None) %}\n    -- depends_on: {{ ref('re_data_base_metrics') }}\n    {% if execute %}\n        {{ re_data.metric_expression(model, metric, 'value >= ' ~ min_value ~ ' and value <= ' ~ max_value, column_name, where) }}\n    {% else %}\n        {{ re_data.empty_table() }}\n    {% endif %}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.metric_expression", "macro.re_data.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.347075}, "macro.re_data.test_assert_equal": {"unique_id": "macro.re_data.test_assert_equal", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/tests/test_metrics.sql", "original_file_path": "macros/tests/test_metrics.sql", "name": "test_assert_equal", "macro_sql": "{% test assert_equal(model, column_name=None, metric=None, value=value, where=None) %}\n    -- depends_on: {{ ref('re_data_base_metrics') }}\n    {% if execute %}\n        {{ re_data.metric_expression(model, metric, 'value = ' ~ value, column_name, where) }}\n    {% else %}\n        {{ re_data.empty_table() }}\n    {% endif %}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.metric_expression", "macro.re_data.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3474848}, "macro.re_data.test_assert_greater": {"unique_id": "macro.re_data.test_assert_greater", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/tests/test_metrics.sql", "original_file_path": "macros/tests/test_metrics.sql", "name": "test_assert_greater", "macro_sql": "{% test assert_greater(model, column_name=None, metric=None, value=None, where=None) %}\n    -- depends_on: {{ ref('re_data_base_metrics') }}\n    {% if execute %}\n        {{ re_data.metric_expression(model, metric, 'value > ' ~ value, column_name, where) }}\n    {% else %}\n        {{ re_data.empty_table() }}\n    {% endif %}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.metric_expression", "macro.re_data.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.347898}, "macro.re_data.test_assert_greater_equal": {"unique_id": "macro.re_data.test_assert_greater_equal", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/tests/test_metrics.sql", "original_file_path": "macros/tests/test_metrics.sql", "name": "test_assert_greater_equal", "macro_sql": "{% test assert_greater_equal(model, column_name=None, metric=None, value=None, where=None) %}\n    -- depends_on: {{ ref('re_data_base_metrics') }}\n    {% if execute %}\n        {{ re_data.metric_expression(model, metric, 'value >= ' ~ value, column_name, where) }}\n    {% else %}\n        {{ re_data.empty_table() }}\n    {% endif %}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.metric_expression", "macro.re_data.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.348307}, "macro.re_data.test_assert_less": {"unique_id": "macro.re_data.test_assert_less", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/tests/test_metrics.sql", "original_file_path": "macros/tests/test_metrics.sql", "name": "test_assert_less", "macro_sql": "{% test assert_less(model, column_name=None, metric=None, value=None, where=None) %}\n    -- depends_on: {{ ref('re_data_base_metrics') }}\n    {% if execute %}\n        {{ re_data.metric_expression(model, metric, 'value < ' ~ value, column_name, where) }}\n    {% else %}\n        {{ re_data.empty_table() }}\n    {% endif %}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.metric_expression", "macro.re_data.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.348715}, "macro.re_data.test_assert_less_equal": {"unique_id": "macro.re_data.test_assert_less_equal", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/tests/test_metrics.sql", "original_file_path": "macros/tests/test_metrics.sql", "name": "test_assert_less_equal", "macro_sql": "{% test assert_less_equal(model, column_name=None, metric=None, value=None, where=None) %}\n    -- depends_on: {{ ref('re_data_base_metrics') }}\n    {% if execute %}\n        {{ re_data.metric_expression(model, metric, 'value <= ' ~ value, column_name, where) }}\n    {% else %}\n        {{ re_data.empty_table() }}\n    {% endif %}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.metric_expression", "macro.re_data.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3491242}, "macro.re_data.get_tables": {"unique_id": "macro.re_data.get_tables", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/meta/monitored_model_queries.sql", "original_file_path": "macros/meta/monitored_model_queries.sql", "name": "get_tables", "macro_sql": "{% macro get_tables() %}\n    select *\n    from {{ ref('re_data_monitored') }}\n    order by name, schema, database, time_filter\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3493729}, "macro.re_data.get_schemas": {"unique_id": "macro.re_data.get_schemas", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/meta/monitored_model_queries.sql", "original_file_path": "macros/meta/monitored_model_queries.sql", "name": "get_schemas", "macro_sql": "{% macro get_schemas() %}\n    select distinct schema, database\n    from {{ ref('re_data_monitored') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.349487}, "macro.re_data.pub_monitored_from_graph": {"unique_id": "macro.re_data.pub_monitored_from_graph", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/meta/get_monitored.sql", "original_file_path": "macros/meta/get_monitored.sql", "name": "pub_monitored_from_graph", "macro_sql": "{% macro pub_monitored_from_graph() %}\n    {% set monitored = [] %}\n    {% set both = []%}\n    {% do both.extend(graph.nodes.values()) %}\n    {% do both.extend(graph.sources.values()) %}\n    {% set owners_config = re_data.get_owners_config() %}\n\n    {% for el in both %}\n        {% if el.resource_type in ['model', 'seed', 'source'] %}\n            {% if el.config.get('re_data_monitored') %}\n                {% do monitored.append({\n                    'name': re_data.name_in_db(el.identifier or el.alias or el.name),\n                    'schema': re_data.name_in_db(el.schema),\n                    'database': re_data.name_in_db(el.database),\n                    'time_filter': el.config.get('re_data_time_filter', none),\n                    'metrics': re_data.metrics_in_db(el.config.get('re_data_metrics', {})),\n                    'columns': re_data.columns_in_db(el.config.get('re_data_columns', [])),\n                    'anomaly_detector': el.config.get('re_data_anomaly_detector', var('re_data:anomaly_detector', {})),\n                    'owners': re_data.prepare_model_owners(el.config.get('re_data_owners', []), owners_config),\n                    })\n                %}\n            {% endif %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(monitored) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.get_owners_config", "macro.re_data.name_in_db", "macro.re_data.metrics_in_db", "macro.re_data.columns_in_db", "macro.re_data.prepare_model_owners"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.352257}, "macro.re_data.get_owners_config": {"unique_id": "macro.re_data.get_owners_config", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/meta/get_monitored.sql", "original_file_path": "macros/meta/get_monitored.sql", "name": "get_owners_config", "macro_sql": "{% macro get_owners_config() %}\n    {% set owners_config = var('re_data:owners_config', {}) %}\n    {{ return (owners_config) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.352462}, "macro.re_data.prepare_model_owners": {"unique_id": "macro.re_data.prepare_model_owners", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/meta/get_monitored.sql", "original_file_path": "macros/meta/get_monitored.sql", "name": "prepare_model_owners", "macro_sql": "{% macro prepare_model_owners(re_data_owners, owners_config) %}\n    {% set owners = {} %}\n    {% set seen_identifiers = {} %}\n    {% for owner in re_data_owners if owners_config.get(owner) %}\n        {% set members = owners_config.get(owner) %}\n        {% for member in members %}\n            {% set identifier = member.get('identifier') %}\n            {% if identifier not in seen_identifiers %}\n            {% do seen_identifiers.update({identifier: true }) %}\n            {% do owners.update({\n                identifier: {\n                    'notify_channel': member.get('type'),\n                    'owner': owner,\n                    'name': member.get('name') \n                } \n            }) %}\n            {% endif %}\n        {% endfor %}\n    {% endfor %}\n    {{ return (owners) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.353334}, "macro.re_data.full_table_name": {"unique_id": "macro.re_data.full_table_name", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/meta/table_name.sql", "original_file_path": "macros/meta/table_name.sql", "name": "full_table_name", "macro_sql": "{% macro full_table_name(table_name, table_schema, table_catalog) %}\n    {{ adapter.dispatch('full_table_name', 're_data')(table_name, table_schema, table_catalog) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__full_table_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3541088}, "macro.re_data.default__full_table_name": {"unique_id": "macro.re_data.default__full_table_name", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/meta/table_name.sql", "original_file_path": "macros/meta/table_name.sql", "name": "default__full_table_name", "macro_sql": "{% macro default__full_table_name(table_name, table_schema, table_catalog) %}\n    '\"' || {{table_catalog}} || '\"' || '.' || '\"' || {{table_schema}} || '\"' || '.' || '\"' || {{table_name}} || '\"'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3542662}, "macro.re_data.bigquery__full_table_name": {"unique_id": "macro.re_data.bigquery__full_table_name", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/meta/table_name.sql", "original_file_path": "macros/meta/table_name.sql", "name": "bigquery__full_table_name", "macro_sql": "{% macro bigquery__full_table_name(table_name, table_schema, table_catalog) %}\n    '`' || {{table_catalog}} || '`' || '.' || '`' || {{table_schema}} || '`' || '.' || '`' || {{table_name}} || '`'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.354414}, "macro.re_data.full_table_name_values": {"unique_id": "macro.re_data.full_table_name_values", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/meta/table_name.sql", "original_file_path": "macros/meta/table_name.sql", "name": "full_table_name_values", "macro_sql": "{% macro full_table_name_values(table_name, table_schema, table_catalog) %}\n    {% set result = adapter.dispatch('full_table_name_values', 're_data')(table_name, table_schema, table_catalog) %}\n    {{ return (result.strip()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__full_table_name_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.354691}, "macro.re_data.default__full_table_name_values": {"unique_id": "macro.re_data.default__full_table_name_values", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/meta/table_name.sql", "original_file_path": "macros/meta/table_name.sql", "name": "default__full_table_name_values", "macro_sql": "{% macro default__full_table_name_values(table_name, table_schema, table_catalog) %}\n    \"{{table_catalog}}\".\"{{table_schema}}\".\"{{table_name}}\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3548439}, "macro.re_data.bigquery__full_table_name_values": {"unique_id": "macro.re_data.bigquery__full_table_name_values", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/meta/table_name.sql", "original_file_path": "macros/meta/table_name.sql", "name": "bigquery__full_table_name_values", "macro_sql": "{% macro bigquery__full_table_name_values(table_name, table_schema, table_catalog) %}\n    `{{table_catalog}}`.`{{table_schema}}`.`{{table_name}}`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.354987}, "macro.re_data.snowflake__full_table_name_values": {"unique_id": "macro.re_data.snowflake__full_table_name_values", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/meta/table_name.sql", "original_file_path": "macros/meta/table_name.sql", "name": "snowflake__full_table_name_values", "macro_sql": "{% macro snowflake__full_table_name_values(table_name, table_schema, table_catalog) %}\n    \"{{table_catalog|upper}}\".\"{{table_schema|upper}}\".\"{{table_name|upper}}\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3551612}, "macro.re_data.get_monitored_columns": {"unique_id": "macro.re_data.get_monitored_columns", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/meta/information_schema.sql", "original_file_path": "macros/meta/information_schema.sql", "name": "get_monitored_columns", "macro_sql": "{% macro get_monitored_columns(schema, database) %}\n    {{ adapter.dispatch('get_monitored_columns', 're_data')(schema, database) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__get_monitored_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3568718}, "macro.re_data.default__get_monitored_columns": {"unique_id": "macro.re_data.default__get_monitored_columns", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/meta/information_schema.sql", "original_file_path": "macros/meta/information_schema.sql", "name": "default__get_monitored_columns", "macro_sql": "{% macro default__get_monitored_columns(table_schema, db_name) %}\n    select\n        table_name,\n        table_schema,\n        table_catalog,\n        column_name,\n        data_type,\n        is_nullable\n    from\n    {{ tables_in_schema(table_schema, db_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.tables_in_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3570292}, "macro.re_data.redshift__get_monitored_columns": {"unique_id": "macro.re_data.redshift__get_monitored_columns", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/meta/information_schema.sql", "original_file_path": "macros/meta/information_schema.sql", "name": "redshift__get_monitored_columns", "macro_sql": "{% macro redshift__get_monitored_columns(table_schema, db_name) %}\n\n    {%- call statement('columns', fetch_result=True) -%}\n    select\n        table_name,\n        table_schema,\n        table_catalog,\n        column_name,\n        data_type,\n        is_nullable\n    from \n        {% if db_name %}{{db_name}}.{% endif %}information_schema.columns\n    where\n        table_schema = '{{ table_schema }}'\n    {% endcall %}\n\n    {%- set columns = load_result('columns')['data'] -%}\n    {% set temp_table_name = 're_data_temporary_monitored_columns_for_' + table_schema %}\n\n    {% set create_temp_table_query %}\n        create temp table {{ temp_table_name }} (\n            table_name {{ string_type()}},\n            table_schema {{ string_type()}},\n            table_catalog {{ string_type()}},\n            column_name {{ string_type()}},\n            data_type {{ string_type() }},\n            is_nullable {{ string_type() }}\n        );\n        insert into {{ temp_table_name }}  values\n        {% for col in columns %} (\n            '{{col[0]}}'::text,\n            '{{col[1]}}'::text,\n            '{{col[2]}}'::text,\n            '{{col[3]}}'::text,\n            '{{col[4]}}'::text,\n            '{{col[5]}}'::text\n            ) {%- if not loop.last %}, {%- endif %}\n        {% endfor %}\n\n    {% endset %}\n    {% do run_query(create_temp_table_query) %}\n\n    select table_name, table_schema, table_catalog, column_name, data_type, is_nullable\n    from {{ temp_table_name }} \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.re_data.string_type", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3580742}, "macro.re_data.tables_in_schema": {"unique_id": "macro.re_data.tables_in_schema", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/meta/information_schema.sql", "original_file_path": "macros/meta/information_schema.sql", "name": "tables_in_schema", "macro_sql": "{% macro tables_in_schema(schema_name, db_name) %}\n    {{ adapter.dispatch('tables_in_schema', 're_data')(schema_name, db_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__tables_in_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3582652}, "macro.re_data.default__tables_in_schema": {"unique_id": "macro.re_data.default__tables_in_schema", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/meta/information_schema.sql", "original_file_path": "macros/meta/information_schema.sql", "name": "default__tables_in_schema", "macro_sql": "{% macro default__tables_in_schema(schema_name, db_name) %}\n    {% if db_name %} {{ db_name}} . {% endif %} INFORMATION_SCHEMA.columns\n    where\n    table_schema = '{{ schema_name }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3584378}, "macro.re_data.bigquery__tables_in_schema": {"unique_id": "macro.re_data.bigquery__tables_in_schema", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/meta/information_schema.sql", "original_file_path": "macros/meta/information_schema.sql", "name": "bigquery__tables_in_schema", "macro_sql": "{% macro bigquery__tables_in_schema(schema_name, db_name) %}\n    {% if db_name %} `{{ db_name}}` . {% endif %} `{{schema_name}}` . `INFORMATION_SCHEMA`.`COLUMNS`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3586109}, "macro.re_data.regex_match_expression": {"unique_id": "macro.re_data.regex_match_expression", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/regular_expression.sql", "original_file_path": "macros/utils/regular_expression.sql", "name": "regex_match_expression", "macro_sql": "{% macro regex_match_expression(column_name, pattern) %}\n    {{ adapter.dispatch('regex_match_expression', 're_data')(column_name, pattern) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__regex_match_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3590121}, "macro.re_data.default__regex_match_expression": {"unique_id": "macro.re_data.default__regex_match_expression", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/regular_expression.sql", "original_file_path": "macros/utils/regular_expression.sql", "name": "default__regex_match_expression", "macro_sql": "{% macro default__regex_match_expression(column_name, pattern) %}\n    ({{column_name}} ~ '{{pattern}}')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.359141}, "macro.re_data.bigquery__regex_match_expression": {"unique_id": "macro.re_data.bigquery__regex_match_expression", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/regular_expression.sql", "original_file_path": "macros/utils/regular_expression.sql", "name": "bigquery__regex_match_expression", "macro_sql": "{% macro bigquery__regex_match_expression(column_name, pattern) %}\n    regexp_contains({{column_name}}, r'{{pattern}}')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.359263}, "macro.re_data.snowflake__regex_match_expression": {"unique_id": "macro.re_data.snowflake__regex_match_expression", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/regular_expression.sql", "original_file_path": "macros/utils/regular_expression.sql", "name": "snowflake__regex_match_expression", "macro_sql": "{% macro snowflake__regex_match_expression(column_name, pattern) %}\n    regexp_like({{column_name | upper}}, '{{pattern}}')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.359395}, "macro.re_data.get_column_type": {"unique_id": "macro.re_data.get_column_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/column_types.sql", "original_file_path": "macros/utils/column_types.sql", "name": "get_column_type", "macro_sql": "{% macro get_column_type(column) %}\n    {% set result = adapter.dispatch('get_column_type', 're_data')(column) %}\n    {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__get_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.360611}, "macro.re_data.default__get_column_type": {"unique_id": "macro.re_data.default__get_column_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/column_types.sql", "original_file_path": "macros/utils/column_types.sql", "name": "default__get_column_type", "macro_sql": "{% macro default__get_column_type(column) %}\n    \n    {% if column.data_type in [\n        'character varying',\n        'varchar',\n        'character',\n        'char',\n        'text'\n    ] %}\n        {{ return('text') }}\n\n    {% elif column.data_type in [\n            'smallint',\n            'integer',\n            'bigint',\n            'decimal',\n            'numeric',\n            'real',\n            'double precision',\n            'enum',\n        ] %}\n        {{ return('numeric') }}\n\n    {% else %}\n        {{ return('unknown') }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.361194}, "macro.re_data.snowflake__get_column_type": {"unique_id": "macro.re_data.snowflake__get_column_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/column_types.sql", "original_file_path": "macros/utils/column_types.sql", "name": "snowflake__get_column_type", "macro_sql": "{% macro snowflake__get_column_type(column) %}\n\n    {% if column.DATA_TYPE in [\n        'VARCHAR',\n        'CHAR',\n        'CHARACTER',\n        'STRING',\n        'TEXT'\n    ] %}\n\n        {{ return('text') }}\n\n    {% elif column.DATA_TYPE in [\n            'NUMBER',\n            'DECIMAL',\n            'NUMERIC',\n            'INT',\n            'INTEGER',\n            'BIGINT',\n            'SMALLINT',\n            'TINYINT',\n            'BYTEINT',\n            'FLOAT',\n            'FLOAT4',\n            'FLOAT8',\n            'DOUBLE',\n            'DOUBLE PRECISION',\n            'REAL',\n    ] %}\n\n        {{ return('numeric') }}\n\n    {% else %}\n\n        {{ return('unknown') }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3617952}, "macro.re_data.bigquery__get_column_type": {"unique_id": "macro.re_data.bigquery__get_column_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/column_types.sql", "original_file_path": "macros/utils/column_types.sql", "name": "bigquery__get_column_type", "macro_sql": "{% macro bigquery__get_column_type(column) %}\n    \n    {% if column.data_type in [\n        'STRING'\n    ] %}\n\n        {{ return('text') }}\n\n    {% elif column.data_type in [\n        \"INT64\", \"NUMERIC\", \"BIGNUMERIC\", \"FLOAT64\", \"INTEGER\"]\n    %}\n\n        {{ return('numeric') }}\n\n    {% else %}\n    \n        {{ return('unknown') }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.362208}, "macro.re_data.columns_in_db": {"unique_id": "macro.re_data.columns_in_db", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/monitored_config.sql", "original_file_path": "macros/utils/monitored_config.sql", "name": "columns_in_db", "macro_sql": "{% macro columns_in_db(columns) %}\n    {% set translated = [] %}\n    {% for col in columns %}\n        {% do translated.append(re_data.name_in_db(col))%}\n    {% endfor %}\n    {{ return (translated) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.name_in_db"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.362793}, "macro.re_data.metrics_in_db": {"unique_id": "macro.re_data.metrics_in_db", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/monitored_config.sql", "original_file_path": "macros/utils/monitored_config.sql", "name": "metrics_in_db", "macro_sql": "{% macro metrics_in_db(metrics) %}\n    {% set translated = metrics %}\n    {% set column_metrics = {} %}\n    {% for col in metrics.column %}\n        {% do column_metrics.update({re_data.name_in_db(col): metrics.column[col]}) %}\n    {% endfor %}\n    {% if column_metrics %}\n        {% do metrics.update({'column': column_metrics}) %}\n    {% endif %}\n    {{ return (metrics) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.name_in_db"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.363341}, "macro.re_data.quote_column": {"unique_id": "macro.re_data.quote_column", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/quote.sql", "original_file_path": "macros/utils/quote.sql", "name": "quote_column", "macro_sql": "{% macro quote_column(col_name) %}\n    {{ adapter.dispatch('quote_column', 're_data')(col_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__quote_column"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.363657}, "macro.re_data.default__quote_column": {"unique_id": "macro.re_data.default__quote_column", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/quote.sql", "original_file_path": "macros/utils/quote.sql", "name": "default__quote_column", "macro_sql": "{% macro default__quote_column(col_name) %}\n    \"{{ col_name }}\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.363754}, "macro.re_data.bigquery__quote_column": {"unique_id": "macro.re_data.bigquery__quote_column", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/quote.sql", "original_file_path": "macros/utils/quote.sql", "name": "bigquery__quote_column", "macro_sql": "{% macro bigquery__quote_column(col_name) %}\n    `{{ col_name }}`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3638458}, "macro.re_data.get_target_database": {"unique_id": "macro.re_data.get_target_database", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/get_database.sql", "original_file_path": "macros/utils/get_database.sql", "name": "get_target_database", "macro_sql": "{% macro get_target_database() %}\n    {{- adapter.dispatch('get_target_database', 're_data')() -}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__get_target_database"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.364165}, "macro.re_data.default__get_target_database": {"unique_id": "macro.re_data.default__get_target_database", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/get_database.sql", "original_file_path": "macros/utils/get_database.sql", "name": "default__get_target_database", "macro_sql": "{% macro default__get_target_database() %}\n    {{- return (target.dbname) -}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.364277}, "macro.re_data.bigquery__get_target_database": {"unique_id": "macro.re_data.bigquery__get_target_database", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/get_database.sql", "original_file_path": "macros/utils/get_database.sql", "name": "bigquery__get_target_database", "macro_sql": "{% macro bigquery__get_target_database() %}\n    {{- return (target.project) -}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3643892}, "macro.re_data.snowflake__get_target_database": {"unique_id": "macro.re_data.snowflake__get_target_database", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/get_database.sql", "original_file_path": "macros/utils/get_database.sql", "name": "snowflake__get_target_database", "macro_sql": "{% macro snowflake__get_target_database() %}\n    {{- return (target.database) -}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.364497}, "macro.re_data.timestamp_type": {"unique_id": "macro.re_data.timestamp_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "timestamp_type", "macro_sql": "{% macro timestamp_type() %}\n    {{ adapter.dispatch('timestamp_type', 're_data')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__timestamp_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.365849}, "macro.re_data.default__timestamp_type": {"unique_id": "macro.re_data.default__timestamp_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "default__timestamp_type", "macro_sql": "{% macro default__timestamp_type() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3659232}, "macro.re_data.redshift__timestamp_type": {"unique_id": "macro.re_data.redshift__timestamp_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "redshift__timestamp_type", "macro_sql": "{% macro redshift__timestamp_type() %}\n    TIMESTAMP\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.365993}, "macro.re_data.bigquery__timestamp_type": {"unique_id": "macro.re_data.bigquery__timestamp_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "bigquery__timestamp_type", "macro_sql": "{% macro bigquery__timestamp_type() %}\n    TIMESTAMP\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.366057}, "macro.re_data.snowflake__timestamp_type": {"unique_id": "macro.re_data.snowflake__timestamp_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "snowflake__timestamp_type", "macro_sql": "{% macro snowflake__timestamp_type() %}\n    TIMESTAMP_NTZ\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.366121}, "macro.re_data.string_type": {"unique_id": "macro.re_data.string_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "string_type", "macro_sql": "{% macro string_type() %}\n    {{ adapter.dispatch('string_type', 're_data')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__string_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.36626}, "macro.re_data.default__string_type": {"unique_id": "macro.re_data.default__string_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "default__string_type", "macro_sql": "{% macro default__string_type() %}\n    text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.366328}, "macro.re_data.redshift__string_type": {"unique_id": "macro.re_data.redshift__string_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "redshift__string_type", "macro_sql": "{% macro redshift__string_type() %}\n    varchar(2047)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.366394}, "macro.re_data.bigquery__string_type": {"unique_id": "macro.re_data.bigquery__string_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "bigquery__string_type", "macro_sql": "{% macro bigquery__string_type() %}\n    STRING\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3664691}, "macro.re_data.snowflake__string_type": {"unique_id": "macro.re_data.snowflake__string_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "snowflake__string_type", "macro_sql": "{% macro snowflake__string_type() %}\n    STRING\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.366538}, "macro.re_data.long_string_type": {"unique_id": "macro.re_data.long_string_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "long_string_type", "macro_sql": "{% macro long_string_type() %}\n    {{ adapter.dispatch('long_string_type', 're_data')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__long_string_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3667352}, "macro.re_data.default__long_string_type": {"unique_id": "macro.re_data.default__long_string_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "default__long_string_type", "macro_sql": "{% macro default__long_string_type() %}\n    {{ re_data.string_type() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.string_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.366842}, "macro.re_data.redshift__long_string_type": {"unique_id": "macro.re_data.redshift__long_string_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "redshift__long_string_type", "macro_sql": "{% macro redshift__long_string_type() %}\n    varchar(65535)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3669078}, "macro.re_data.integer_type": {"unique_id": "macro.re_data.integer_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "integer_type", "macro_sql": "{% macro integer_type() %}\n    INTEGER\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.366972}, "macro.re_data.boolean_type": {"unique_id": "macro.re_data.boolean_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "boolean_type", "macro_sql": "{% macro boolean_type() %}\n    {{ adapter.dispatch('boolean_type', 're_data')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__boolean_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.367109}, "macro.re_data.default__boolean_type": {"unique_id": "macro.re_data.default__boolean_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "default__boolean_type", "macro_sql": "{% macro default__boolean_type() %}\n    BOOLEAN\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.367177}, "macro.re_data.redshift__boolean_type": {"unique_id": "macro.re_data.redshift__boolean_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "redshift__boolean_type", "macro_sql": "{% macro redshift__boolean_type() %}\n    boolean\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.367243}, "macro.re_data.bigquery__boolean_type": {"unique_id": "macro.re_data.bigquery__boolean_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "bigquery__boolean_type", "macro_sql": "{% macro bigquery__boolean_type() %}\n    BOOLEAN\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.367307}, "macro.re_data.snowflake__boolean_type": {"unique_id": "macro.re_data.snowflake__boolean_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "snowflake__boolean_type", "macro_sql": "{% macro snowflake__boolean_type() %}\n    BOOLEAN\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.367373}, "macro.re_data.numeric_type": {"unique_id": "macro.re_data.numeric_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "numeric_type", "macro_sql": "{% macro numeric_type() %}\n    {{ adapter.dispatch('numeric_type', 're_data')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__numeric_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.367511}, "macro.re_data.default__numeric_type": {"unique_id": "macro.re_data.default__numeric_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "default__numeric_type", "macro_sql": "{% macro default__numeric_type() %}\n    double precision\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3675818}, "macro.re_data.redshift__numeric_type": {"unique_id": "macro.re_data.redshift__numeric_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "redshift__numeric_type", "macro_sql": "{% macro redshift__numeric_type() %}\n    DOUBLE PRECISION\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.367649}, "macro.re_data.bigquery__numeric_type": {"unique_id": "macro.re_data.bigquery__numeric_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "bigquery__numeric_type", "macro_sql": "{% macro bigquery__numeric_type() %}\n    FLOAT64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.367712}, "macro.re_data.snowflake__numeric_type": {"unique_id": "macro.re_data.snowflake__numeric_type", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/used_types.sql", "original_file_path": "macros/utils/used_types.sql", "name": "snowflake__numeric_type", "macro_sql": "{% macro snowflake__numeric_type() %}\n    FLOAT\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.367777}, "macro.re_data.time_window_start": {"unique_id": "macro.re_data.time_window_start", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "time_window_start", "macro_sql": "{% macro time_window_start() %}\n    cast('{{- var('re_data:time_window_start') -}}' as timestamp) \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.369188}, "macro.re_data.time_window_end": {"unique_id": "macro.re_data.time_window_end", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "time_window_end", "macro_sql": "{% macro time_window_end() %}\n    cast('{{- var('re_data:time_window_end') -}}' as timestamp)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.369302}, "macro.re_data.anamaly_detection_time_window_start": {"unique_id": "macro.re_data.anamaly_detection_time_window_start", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "anamaly_detection_time_window_start", "macro_sql": "{% macro anamaly_detection_time_window_start() %}\n   {{ adapter.dispatch('anamaly_detection_time_window_start', 're_data')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__anamaly_detection_time_window_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.369441}, "macro.re_data.default__anamaly_detection_time_window_start": {"unique_id": "macro.re_data.default__anamaly_detection_time_window_start", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "default__anamaly_detection_time_window_start", "macro_sql": "{% macro default__anamaly_detection_time_window_start() %}\n    {{ time_window_start() }} - interval '{{var('re_data:anomaly_detection_look_back_days')}} days'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.time_window_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.369577}, "macro.re_data.bigquery__anamaly_detection_time_window_start": {"unique_id": "macro.re_data.bigquery__anamaly_detection_time_window_start", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "bigquery__anamaly_detection_time_window_start", "macro_sql": "{% macro bigquery__anamaly_detection_time_window_start() %}\n    DATE_ADD({{ time_window_start() }}, INTERVAL -{{var('re_data:anomaly_detection_look_back_days')}} DAY)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.time_window_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.369717}, "macro.re_data.snowflake__anamaly_detection_time_window_start": {"unique_id": "macro.re_data.snowflake__anamaly_detection_time_window_start", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "snowflake__anamaly_detection_time_window_start", "macro_sql": "{% macro snowflake__anamaly_detection_time_window_start() %}\n    DATEADD('DAY', -{{-var('re_data:anomaly_detection_look_back_days')-}}, {{ time_window_start() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.time_window_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.369858}, "macro.re_data.interval_length_sec": {"unique_id": "macro.re_data.interval_length_sec", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "interval_length_sec", "macro_sql": "{% macro interval_length_sec(start_timestamp, end_timestamp) %}\n    {{ adapter.dispatch('interval_length_sec', 're_data')(start_timestamp, end_timestamp) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__interval_length_sec"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.370037}, "macro.re_data.default__interval_length_sec": {"unique_id": "macro.re_data.default__interval_length_sec", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "default__interval_length_sec", "macro_sql": "{% macro default__interval_length_sec(start_timestamp, end_timestamp) %}\n   EXTRACT(EPOCH FROM ({{ end_timestamp }} - {{ start_timestamp }} ))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3702269}, "macro.re_data.bigquery__interval_length_sec": {"unique_id": "macro.re_data.bigquery__interval_length_sec", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "bigquery__interval_length_sec", "macro_sql": "{% macro bigquery__interval_length_sec(start_timestamp, end_timestamp) %}\n    TIMESTAMP_DIFF ({{ end_timestamp }}, {{ start_timestamp }}, SECOND)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3703501}, "macro.re_data.snowflake__interval_length_sec": {"unique_id": "macro.re_data.snowflake__interval_length_sec", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "snowflake__interval_length_sec", "macro_sql": "{% macro snowflake__interval_length_sec(start_timestamp, end_timestamp) %}\n   timediff(second, {{ start_timestamp }}, {{ end_timestamp }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.370472}, "macro.re_data.redshift__interval_length_sec": {"unique_id": "macro.re_data.redshift__interval_length_sec", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "redshift__interval_length_sec", "macro_sql": "{% macro redshift__interval_length_sec(start_timestamp, end_timestamp) %}\n   DATEDIFF(second, {{ start_timestamp }}, {{ end_timestamp }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3705988}, "macro.re_data.in_time_window": {"unique_id": "macro.re_data.in_time_window", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "in_time_window", "macro_sql": "\n\n{%- macro in_time_window(time_column) %}\n    {# /* If not time_filter is specified, we compute the metric over the entire table else we filter for the time frame */ #}\n    {% if time_column is none %}\n            true\n    {% else %}\n        {{ adapter.dispatch('in_time_window', 're_data')(time_column) }}\n    {% endif %}\n{% endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__in_time_window"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.370846}, "macro.re_data.default__in_time_window": {"unique_id": "macro.re_data.default__in_time_window", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "default__in_time_window", "macro_sql": "{% macro default__in_time_window(time_column) %}\n    {{time_column}} >= {{ time_window_start() }} and\n    {{time_column}} < {{ time_window_end() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.time_window_start", "macro.re_data.time_window_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.371021}, "macro.re_data.bigquery__in_time_window": {"unique_id": "macro.re_data.bigquery__in_time_window", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "bigquery__in_time_window", "macro_sql": "{% macro bigquery__in_time_window(time_column) %}\n    timestamp({{time_column}}) >= {{ time_window_start() }} and\n    timestamp({{time_column}}) < {{ time_window_end() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.time_window_start", "macro.re_data.time_window_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.371192}, "macro.re_data.format_timestamp": {"unique_id": "macro.re_data.format_timestamp", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "format_timestamp", "macro_sql": "{% macro format_timestamp(column_name) %}\n    {{ adapter.dispatch('format_timestamp', 're_data')(column_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__format_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.37135}, "macro.re_data.default__format_timestamp": {"unique_id": "macro.re_data.default__format_timestamp", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "default__format_timestamp", "macro_sql": "{% macro default__format_timestamp(column_name) %}\n    to_char({{column_name}}, 'YYYY-MM-DD HH24:MI:SS')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.371444}, "macro.re_data.bigquery__format_timestamp": {"unique_id": "macro.re_data.bigquery__format_timestamp", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/time_macros.sql", "original_file_path": "macros/utils/time_macros.sql", "name": "bigquery__format_timestamp", "macro_sql": "{% macro bigquery__format_timestamp(column_name) %}\n    FORMAT_TIMESTAMP('%Y-%m-%d %H:%I:%S', {{column_name}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3715389}, "macro.re_data.is_list": {"unique_id": "macro.re_data.is_list", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/is_list.sql", "original_file_path": "macros/utils/is_list.sql", "name": "is_list", "macro_sql": "{% macro is_list(obj) %}\n    {% if not obj %}\n        {{ return (False) }}\n    {% endif %}\n    {% set check = obj is iterable and (obj is not string and obj is not mapping) %}\n    {{ return (check) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3720078}, "macro.re_data.dict_from_list": {"unique_id": "macro.re_data.dict_from_list", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/dict_from_list.sql", "original_file_path": "macros/utils/dict_from_list.sql", "name": "dict_from_list", "macro_sql": "{% macro dict_from_list(el_list) %}\n\n    {% set for_cols_dict = {} %}\n    {% for col in el_list %}\n        {% do for_cols_dict.update({col: True})%}\n    {% endfor %}\n    {% do return(for_cols_dict) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.372452}, "macro.re_data.in_compile": {"unique_id": "macro.re_data.in_compile", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/in_compile.sql", "original_file_path": "macros/utils/in_compile.sql", "name": "in_compile", "macro_sql": "{% macro in_compile() %}\n\n    {%- call statement('in_compile', fetch_result=True) -%}\n        select * from {{ ref('re_data_run_started_at') }}\n    {%- endcall -%}\n\n    {% if execute %}\n        {%- set result = load_result('in_compile')['data'][0][0] -%}\n        {% if result == run_started_at.timestamp() * 1000000 %}\n            {{ return(False) }}\n        {% else %}\n            {{ return(True) }}\n        {% endif %}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.373186}, "macro.re_data.generate_anomaly_message": {"unique_id": "macro.re_data.generate_anomaly_message", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/generate_alert_message.sql", "original_file_path": "macros/utils/generate_alert_message.sql", "name": "generate_anomaly_message", "macro_sql": "{% macro generate_anomaly_message(column_name, metric, last_value, last_avg) %}\n\n    case when {{ column_name }} != '' then metric || '(' || column_name || ')'\n    else metric\n    end \n    || ' is ' ||\n    {{ to_2dp( percentage_formula('last_value - last_avg', last_avg) ) }}\n    || '% ' ||\n    {{ comparison_text(last_value, last_avg) }}\n    || ' average.'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.to_2dp", "macro.re_data.percentage_formula", "macro.re_data.comparison_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.375034}, "macro.re_data.to_2dp": {"unique_id": "macro.re_data.to_2dp", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/generate_alert_message.sql", "original_file_path": "macros/utils/generate_alert_message.sql", "name": "to_2dp", "macro_sql": "{% macro to_2dp(val) %}\n    {{ adapter.dispatch('to_2dp', 're_data')(val) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__to_2dp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.375196}, "macro.re_data.default__to_2dp": {"unique_id": "macro.re_data.default__to_2dp", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/generate_alert_message.sql", "original_file_path": "macros/utils/generate_alert_message.sql", "name": "default__to_2dp", "macro_sql": "{% macro default__to_2dp(val) %}\n    trim(to_char({{ val }}, '9999999999999999990D00'))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3752918}, "macro.re_data.bigquery__to_2dp": {"unique_id": "macro.re_data.bigquery__to_2dp", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/generate_alert_message.sql", "original_file_path": "macros/utils/generate_alert_message.sql", "name": "bigquery__to_2dp", "macro_sql": "{% macro bigquery__to_2dp(val) %}\n    format('%.2f', {{ val }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.375388}, "macro.re_data.seconds_to_hours": {"unique_id": "macro.re_data.seconds_to_hours", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/generate_alert_message.sql", "original_file_path": "macros/utils/generate_alert_message.sql", "name": "seconds_to_hours", "macro_sql": "{% macro seconds_to_hours(val) %}\n    cast({{ val }} as {{ numeric_type() }}) / 3600\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.numeric_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.375513}, "macro.re_data.generate_metric_value_text": {"unique_id": "macro.re_data.generate_metric_value_text", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/generate_alert_message.sql", "original_file_path": "macros/utils/generate_alert_message.sql", "name": "generate_metric_value_text", "macro_sql": "{% macro generate_metric_value_text(metric, value) %}\n    case \n        when {{ metric }} = 'freshness' \n            then cast({{ to_2dp(seconds_to_hours(value)) }} as {{ string_type() }}) || ' hours'\n        when {{ regex_match_expression(metric, 'percent') }} \n            then cast({{ to_2dp(value) }} as {{ string_type() }}) || '%'\n        when {{ regex_match_expression(metric, 'count') }} \n            then cast({{ value }} as {{ string_type() }})\n        else cast({{ to_2dp(value) }} as {{ string_type() }})\n    end\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.to_2dp", "macro.re_data.seconds_to_hours", "macro.re_data.string_type", "macro.re_data.regex_match_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.376004}, "macro.re_data.generate_schema_change_message": {"unique_id": "macro.re_data.generate_schema_change_message", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/generate_alert_message.sql", "original_file_path": "macros/utils/generate_alert_message.sql", "name": "generate_schema_change_message", "macro_sql": "{% macro generate_schema_change_message(operation, column_name, prev_column_name, prev_data_type, data_type, detected_time) %}\n    case \n        when {{ operation }} = 'column_added'\n            then 'column ' || {{ column_name }} || ' of type ' || {{ data_type }} || ' was added.'\n        when {{ operation }} = 'column_removed'\n            then 'column ' || {{ prev_column_name }} || ' of type ' || {{ prev_data_type }} || ' was removed.'\n        when {{ operation }} = 'type_change'\n            then {{ column_name }} || ' column data type was changed from ' || {{ prev_data_type }} || ' to ' || {{ data_type }} || '.'\n        else ''\n    end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.376392}, "macro.re_data.generate_failed_test_message": {"unique_id": "macro.re_data.generate_failed_test_message", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/generate_alert_message.sql", "original_file_path": "macros/utils/generate_alert_message.sql", "name": "generate_failed_test_message", "macro_sql": "{% macro generate_failed_test_message(test_name, column_name) %}\n    case \n        when {{ column_name }} is null\n            then 'Test ' || {{ test_name }} || ' failed.'\n        else\n            'Test ' || {{ test_name }} || ' failed for column ' || {{ column_name }} || '.'\n    end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3765628}, "macro.re_data.bool_to_string": {"unique_id": "macro.re_data.bool_to_string", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/bool_to_string.sql", "original_file_path": "macros/utils/bool_to_string.sql", "name": "bool_to_string", "macro_sql": "{% macro bool_to_string(column) %}\n    (\n    case when {{ column }} = true then 'true'\n         when {{ column }} = false then 'false'\n    end\n    ) as {{ column }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.376819}, "macro.re_data.percentage_formula": {"unique_id": "macro.re_data.percentage_formula", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/formulas.sql", "original_file_path": "macros/utils/formulas.sql", "name": "percentage_formula", "macro_sql": "{% macro percentage_formula(summation, total) %}\n    abs(\n        ( \n            cast({{ summation }} as {{ numeric_type() }})\n        ) / \n        nullif(\n            cast( {{ total }} as {{ numeric_type() }} )\n        , 0) * 100.0\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.numeric_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.377142}, "macro.re_data.comparison_text": {"unique_id": "macro.re_data.comparison_text", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/comparison_text.sql", "original_file_path": "macros/utils/comparison_text.sql", "name": "comparison_text", "macro_sql": "{% macro comparison_text(a, b) %}\n    case when {{a}} > {{b}} then 'greater than' \n    when {{a}} = {{b}} then 'equal to'\n    else 'less than' end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.377418}, "macro.re_data.comma_delimited_list": {"unique_id": "macro.re_data.comma_delimited_list", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/comma_delimited_list.sql", "original_file_path": "macros/utils/comma_delimited_list.sql", "name": "comma_delimited_list", "macro_sql": "{% macro comma_delimited_list(args) %}\n    {%- for arg in args %} \n        {{- arg -}} {{- \", \" if not loop.last else \"\" -}}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.377744}, "macro.re_data.generate_depends": {"unique_id": "macro.re_data.generate_depends", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/depends_macro.sql", "original_file_path": "macros/utils/depends_macro.sql", "name": "generate_depends", "macro_sql": "{% macro generate_depends(used_tables) %}\n    {% for t in used_tables %}\n        -- depends_on: {{ ref(t) }}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.378028}, "macro.re_data.row_value": {"unique_id": "macro.re_data.row_value", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/agate/row_value.sql", "original_file_path": "macros/utils/agate/row_value.sql", "name": "row_value", "macro_sql": "{% macro row_value(agate_row, column) %}\n    {{ return (agate_row[re_data.name_in_db(column)]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.name_in_db"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.37837}, "macro.re_data.agate_to_list": {"unique_id": "macro.re_data.agate_to_list", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/agate/row_value.sql", "original_file_path": "macros/utils/agate/row_value.sql", "name": "agate_to_list", "macro_sql": "{% macro agate_to_list(table) %}\n    {% set col_names = table.column_names %}\n    {% set query_result = [] %}\n    {% for row in table.rows %}\n        {% do query_result.append('' ~ row.dict()) %}\n    {% endfor %}\n    {{ return (query_result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3787389}, "macro.re_data.all_types_select": {"unique_id": "macro.re_data.all_types_select", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/mock/empty_tables.sql", "original_file_path": "macros/utils/mock/empty_tables.sql", "name": "all_types_select", "macro_sql": "{% macro all_types_select() %}\n    with types_table as (\n        select\n            cast (null as {{ string_type() }}) as string_type,\n            cast (null as {{ long_string_type() }}) as long_string_type,\n            cast (1 as {{ numeric_type() }}) as numeric_type,\n            cast ('2000-01-10' as {{ timestamp_type() }}) as timestamp_type,\n            cast (true as {{ boolean_type() }}) as boolean_type\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.string_type", "macro.re_data.long_string_type", "macro.re_data.numeric_type", "macro.re_data.timestamp_type", "macro.re_data.boolean_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3798568}, "macro.re_data.empty_table_generic": {"unique_id": "macro.re_data.empty_table_generic", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/mock/empty_tables.sql", "original_file_path": "macros/utils/mock/empty_tables.sql", "name": "empty_table_generic", "macro_sql": "{% macro empty_table_generic(list) %}\n    {{ re_data.all_types_select() }}\n    select\n    {% for name, type in list %}\n         {{ type }}_type as {{ name }}\n        {%- if not loop.last %}, {%- endif %}\n    {% endfor %}\n    from types_table\n    where string_type is not null\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.all_types_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.380146}, "macro.re_data.empty_last_base_metrics": {"unique_id": "macro.re_data.empty_last_base_metrics", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/mock/empty_tables.sql", "original_file_path": "macros/utils/mock/empty_tables.sql", "name": "empty_last_base_metrics", "macro_sql": "{% macro empty_last_base_metrics() %}\n    {{\n        re_data.empty_table_generic([\n            ('table_name', 'string'),\n            ('column_name', 'string'),\n            ('metric', 'string'),\n            ('value', 'numeric')\n        ])\n    }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.empty_table_generic"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.380424}, "macro.re_data.empty_columns_table": {"unique_id": "macro.re_data.empty_columns_table", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/mock/empty_tables.sql", "original_file_path": "macros/utils/mock/empty_tables.sql", "name": "empty_columns_table", "macro_sql": "{% macro empty_columns_table() %}\n    {{\n        re_data.empty_table_generic([\n            ('name', 'string'),\n            ('schema', 'string'),\n            ('database', 'string'),\n            ('column_name', 'string'),\n            ('data_type', 'string'),\n            ('is_nullable', 'boolean'),\n            ('time_filter', 'string'),\n            ('computed_on', 'timestamp')\n        ])\n    }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.empty_table_generic"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.380853}, "macro.re_data.empty_table": {"unique_id": "macro.re_data.empty_table", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/mock/empty_tables.sql", "original_file_path": "macros/utils/mock/empty_tables.sql", "name": "empty_table", "macro_sql": "{% macro empty_table() %}\n    {{\n        re_data.empty_table_generic([\n            ('name', 'string')\n        ])\n    }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.empty_table_generic"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3810098}, "macro.re_data.add_duplication_context": {"unique_id": "macro.re_data.add_duplication_context", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/deduplication/add_duplication_context.sql", "original_file_path": "macros/utils/deduplication/add_duplication_context.sql", "name": "add_duplication_context", "macro_sql": "{% macro add_duplication_context(relation, unique_cols, sort_columns) %}\n\n            select {{ dbt_utils.star(from=relation) }}\n            , count(*) over (\n                 partition by {{ re_data.comma_delimited_list(unique_cols) }} \n            ) as re_data_duplicate_group_row_count\n            , row_number() over (\n                partition by {{ re_data.comma_delimited_list(unique_cols) }} {% if sort_columns %} order by {{ re_data.comma_delimited_list(sort_columns) }} {% endif %}\n            ) as re_data_duplicate_group_row_number\n\n            from {{ relation }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.star", "macro.re_data.comma_delimited_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.381589}, "macro.re_data.to_json_string_value_or_null": {"unique_id": "macro.re_data.to_json_string_value_or_null", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/json/to_single_json.sql", "original_file_path": "macros/utils/json/to_single_json.sql", "name": "to_json_string_value_or_null", "macro_sql": "{% macro to_json_string_value_or_null(column) %}\n    (\n        case \n            when {{column}} is null then 'null'\n            else '\"' ||\n                regexp_replace(\n                    replace(cast({{column}} as {{string_type()}}), '\"', {{escape_seq_for_json('\"') }}),\n                    '\\n', {{ quote_new_line() }} {% if target.type == 'postgres' %}, 'g' {% endif %}\n                ) || '\"'\n        end\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.string_type", "macro.re_data.escape_seq_for_json", "macro.re_data.quote_new_line"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.38219}, "macro.re_data.to_single_json": {"unique_id": "macro.re_data.to_single_json", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/utils/json/to_single_json.sql", "original_file_path": "macros/utils/json/to_single_json.sql", "name": "to_single_json", "macro_sql": "{% macro to_single_json(columns) %}\n    '{' ||\n    {%- for column in columns %}\n        '\"{{ column }}\": ' ||\n        {{ to_json_string_value_or_null(column) }}\n        {%- if not loop.last %} || ',' || {%- endif %}\n    {%- endfor %}\n    || '}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.to_json_string_value_or_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.382447}, "macro.re_data.save_test_history": {"unique_id": "macro.re_data.save_test_history", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/run_end/save_results_history.sql", "original_file_path": "macros/run_end/save_results_history.sql", "name": "save_test_history", "macro_sql": "{% macro save_test_history(results) %}\n    -- depends_on: {{ ref('re_data_test_history') }}\n    {% set command = flags.WHICH %}\n    {% if execute and results and command == 'test' %}\n        {% set tests = [] %}\n        {% for el in results %}\n            {% if el.node.resource_type.value == 'test' %}\n                {% do tests.append(re_data.test_data_dict(el)) %}\n            {% endif %}\n        {% endfor %}\n\n        {% if tests %}\n            {% do re_data.insert_list_to_table(\n                ref('re_data_test_history'),\n                tests,\n                ['table_name', 'column_name', 'test_name', 'status', 'execution_time', 'message', 'failures_count', 'failures_json', 'failures_table', 'severity', 'compiled_sql', 'run_at']\n            ) %}\n        {% endif %}\n\n    {% endif %}\n    {{ return ('') }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.test_data_dict", "macro.re_data.insert_list_to_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.385685}, "macro.re_data.test_data_dict": {"unique_id": "macro.re_data.test_data_dict", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/run_end/save_results_history.sql", "original_file_path": "macros/run_end/save_results_history.sql", "name": "test_data_dict", "macro_sql": "{% macro test_data_dict(el) %}\n\n    {% set run_started_at_str = run_started_at.strftime('%Y-%m-%d %H:%M:%S') %}\n\n    {% if el.node.to_dict().get('test_metadata') %}\n        {% set any_refs = modules.re.findall(\"ref\\(\\'(?P<name>.*)\\'\\)\", el.node.test_metadata.kwargs['model']) %}\n        {% set any_source = modules.re.findall(\"source\\(\\'(?P<one>.*)\\'\\,\\s+\\'(?P<two>.*)\\'\\)\", el.node.test_metadata.kwargs['model']) %}\n\n        {% if any_refs %}\n            {% set name = any_refs[0] %}\n            {% set node_name = re_data.priv_full_name_from_depends(el.node, name) %}\n            {% set schema = graph.nodes.get(node_name)['schema'] %}\n            {% set database = graph.nodes.get(node_name)['database'] %}\n            {% set table_name = database + '.' + schema + '.' + name %} \n            \n        {% elif any_source %}\n            {% set package_name = any_source[0][0] %}\n            {% set name = any_source[0][1] %}\n            {% set node_name = re_data.priv_full_name_from_depends(el.node, name) %}\n            {% set schema = graph.sources.get(node_name)['schema'] %}\n            {% set database = graph.sources.get(node_name)['database'] %}\n            {% set table_name = database + '.' + schema + '.' + name %}\n        {% else %}\n            {% set table_name = none %}\n        {% endif %}\n    {% else %}\n        {% set table_name = none %}\n    {% endif %}\n\n    {% set failures_json = none %}\n\n    {{ return ({\n        'table_name': table_name,\n        'column_name': el.node.column_name or none,\n        'test_name': el.node.name,\n        'status': el.status.name,\n        'execution_time': el.execution_time,\n        'message': el.message,\n        'failures_count': el.failures,\n        'failures_json': '',\n        'failures_table': el.node.relation_name or none,\n        'severity': el.node.config.severity,\n        'compiled_sql': el.node.compiled_sql or none,\n        'run_at': run_started_at_str,\n        })\n    }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.priv_full_name_from_depends"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.389554}, "macro.re_data.priv_full_name_from_depends": {"unique_id": "macro.re_data.priv_full_name_from_depends", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/run_end/save_results_history.sql", "original_file_path": "macros/run_end/save_results_history.sql", "name": "priv_full_name_from_depends", "macro_sql": "{% macro priv_full_name_from_depends(node, name) %}\n\n    {% for full_name in node.depends_on.nodes %}\n        {% set node_name = full_name.split('.')[-1] %}\n        {% if node_name == name %}\n            {{ return(full_name) }}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(none) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.389984}, "macro.re_data.get_regex_for": {"unique_id": "macro.re_data.get_regex_for", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/validating/regex_dict.sql", "original_file_path": "macros/public/validating/regex_dict.sql", "name": "get_regex_for", "macro_sql": "{% macro get_regex_for(to_validate) %}\n\n    {% set regexp_dict = {\n        'number_whole': '^\\-?[0-9]+$',\n        'number_decimal_point': '^\\-?[0-9]+\\.[0-9]+$',\n        'number_decimal_comma': '^\\-?[0-9]+,[0-9]+$',\n        'number_percentage': '^\\-?[0-9]+([\\.,][0-9]+)? ?%$',\n        'number_percentage_point': '^\\-?[0-9]+([\\.][0-9]+)? ?%$',\n        'number_percentage_comma': '^\\-?[0-9]+([,][0-9]+)? ?%$',\n        'date_eu': '^([1-9]|0[1-9]|[12][0-9]|3[01])[-\\./]([1-9]|0[1-9]|1[012])[-\\./](19|20)?[0-9][0-9]$',\n        'date_us': '^([1-9]|0[1-9]|1[012])[-\\./]([1-9]|0[1-9]|[12][0-9]|3[01])[-\\./](19|20)?[0-9][0-9]$',\n        'date_inverse': '^(19|20)[0-9][0-9][-\\./]?([1-9]|0[1-9]|1[012])[-\\./]?([1-9]|0[1-9]|[12][0-9]|3[01])$',\n        'time_24h': '^([01][0-9]|2[0-3]):([0-5][0-9])$',\n        'time_12h': '^(1[0-2]|0?[1-9]):[0-5][0-9]$',\n        'time': '^([0-9]|1[0-9]|2[0-4])[:-]([0-9]|[0-5][0-9])([:-]([0-9]|[0-5][0-9])(,[0-9]+)?)?$',\n        'date_iso_8601':\n            '^'\n            '([1-9][0-9]{3}-((0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-8])|(0[13-9]|1[0-2])-(29|30)|(0[13578]|1[02])-31)|'\n            '([1-9][0-9](0[48]|[2468][048]|[13579][26])|([2468][048]|[13579][26])00)-02-29)'\n\n            'T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?'\n\n            '(Z|[+-][01][0-9]:[0-5][0-9])?'\n            '$',\n        'uuid': '^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$',\n        'ipv4_address': '^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$',\n        'ipv6_address': '^((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?$',\n        'email': '^[A-Za-z0-9.-_%]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$',\n        } %}\n\n    {% set base_regex = regexp_dict[to_validate] %}\n    {% set qualifed_regex = adapter.dispatch('get_regex_for', 're_data')(base_regex) %}\n    {{ return(qualifed_regex) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__get_regex_for"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.392607}, "macro.re_data.default__get_regex_for": {"unique_id": "macro.re_data.default__get_regex_for", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/validating/regex_dict.sql", "original_file_path": "macros/public/validating/regex_dict.sql", "name": "default__get_regex_for", "macro_sql": "{% macro default__get_regex_for(pattern) %}\n    {{ return (pattern) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3927412}, "macro.re_data.redshift__get_regex_for": {"unique_id": "macro.re_data.redshift__get_regex_for", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/validating/regex_dict.sql", "original_file_path": "macros/public/validating/regex_dict.sql", "name": "redshift__get_regex_for", "macro_sql": "{% macro redshift__get_regex_for(pattern) %}\n    {% set changed = modules.re.sub('\\.', '\\\\.', pattern) %}\n    {% set changed = modules.re.sub('\\-', '\\\\-', changed) %}\n    {{ return (changed) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3931808}, "macro.re_data.snowflake__get_regex_for": {"unique_id": "macro.re_data.snowflake__get_regex_for", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/validating/regex_dict.sql", "original_file_path": "macros/public/validating/regex_dict.sql", "name": "snowflake__get_regex_for", "macro_sql": "{% macro snowflake__get_regex_for(pattern) %}\n    {% set changed = modules.re.sub('\\.', '\\\\.', pattern) %}\n    {% set changed = modules.re.sub('\\-', '\\\\-', changed) %}\n    {{ return (changed) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.393622}, "macro.re_data.valid_regex": {"unique_id": "macro.re_data.valid_regex", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_regex", "macro_sql": "{% macro valid_regex(column_name, to_validate) %}\n{% set pattern = re_data.get_regex_for(to_validate) %}\n  case when \n    {{ column_name }} is null then false \n    else {{ re_data.regex_match_expression(column_name, pattern) }}\n  end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.get_regex_for", "macro.re_data.regex_match_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3957682}, "macro.re_data.valid_email": {"unique_id": "macro.re_data.valid_email", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_email", "macro_sql": "{% macro valid_email(column_name) %}\n    {{ re_data.valid_regex(column_name, 'email')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.395909}, "macro.re_data.valid_date_eu": {"unique_id": "macro.re_data.valid_date_eu", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_date_eu", "macro_sql": "{% macro valid_date_eu(column_name) %}\n    {{ re_data.valid_regex(column_name, 'date_eu')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3960478}, "macro.re_data.valid_date_us": {"unique_id": "macro.re_data.valid_date_us", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_date_us", "macro_sql": "{% macro valid_date_us(column_name) %}\n    {{ re_data.valid_regex(column_name, 'date_us')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.396188}, "macro.re_data.valid_date_inverse": {"unique_id": "macro.re_data.valid_date_inverse", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_date_inverse", "macro_sql": "{% macro valid_date_inverse(column_name) %}\n    {{ re_data.valid_regex(column_name, 'date_inverse')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.396327}, "macro.re_data.valid_date_iso_8601": {"unique_id": "macro.re_data.valid_date_iso_8601", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_date_iso_8601", "macro_sql": "{% macro valid_date_iso_8601(column_name) %}\n    {{ re_data.valid_regex(column_name, 'date_iso_8601')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3964689}, "macro.re_data.valid_time_24h": {"unique_id": "macro.re_data.valid_time_24h", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_time_24h", "macro_sql": "{% macro valid_time_24h(column_name) %}\n    {{ re_data.valid_regex(column_name, 'time_24h')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.396605}, "macro.re_data.valid_time_12h": {"unique_id": "macro.re_data.valid_time_12h", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_time_12h", "macro_sql": "{% macro valid_time_12h(column_name) %}\n    {{ re_data.valid_regex(column_name, 'time_12h')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3967419}, "macro.re_data.valid_time": {"unique_id": "macro.re_data.valid_time", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_time", "macro_sql": "{% macro valid_time(column_name) %}\n    {{ re_data.valid_regex(column_name, 'time')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.396961}, "macro.re_data.valid_ip_v4": {"unique_id": "macro.re_data.valid_ip_v4", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_ip_v4", "macro_sql": "{% macro valid_ip_v4(column_name) %}\n    {{ re_data.valid_regex(column_name, 'ipv4_address')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3971}, "macro.re_data.valid_ip_v6": {"unique_id": "macro.re_data.valid_ip_v6", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_ip_v6", "macro_sql": "{% macro valid_ip_v6(column_name) %}\n    {{ re_data.valid_regex(column_name, 'ipv6_address')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.397237}, "macro.re_data.valid_ip": {"unique_id": "macro.re_data.valid_ip", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_ip", "macro_sql": "{% macro valid_ip(column_name) %}\n    (\n        {{ re_data.valid_regex(column_name, 'ipv4_address')}}\n    or \n        {{ re_data.valid_regex(column_name, 'ipv6_address')}}\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.397439}, "macro.re_data.valid_number": {"unique_id": "macro.re_data.valid_number", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_number", "macro_sql": "{% macro valid_number(column_name) %}\n    {{ re_data.valid_regex(column_name, 'number_whole')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3975801}, "macro.re_data.valid_number_decimal_point": {"unique_id": "macro.re_data.valid_number_decimal_point", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_number_decimal_point", "macro_sql": "{% macro valid_number_decimal_point(column_name) %}\n    {{ re_data.valid_regex(column_name, 'number_decimal_point')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.397717}, "macro.re_data.valid_number_decimal_comma": {"unique_id": "macro.re_data.valid_number_decimal_comma", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_number_decimal_comma", "macro_sql": "{% macro valid_number_decimal_comma(column_name) %}\n    {{ re_data.valid_regex(column_name, 'number_decimal_comma')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.397852}, "macro.re_data.valid_number_percentage": {"unique_id": "macro.re_data.valid_number_percentage", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_number_percentage", "macro_sql": "{% macro valid_number_percentage(column_name) %}\n    {{ re_data.valid_regex(column_name, 'number_percentage')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.397988}, "macro.re_data.valid_number_percentage_point": {"unique_id": "macro.re_data.valid_number_percentage_point", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_number_percentage_point", "macro_sql": "{% macro valid_number_percentage_point(column_name) %}\n    {{ re_data.valid_regex(column_name, 'number_percentage_point')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.398124}, "macro.re_data.valid_number_percentage_comma": {"unique_id": "macro.re_data.valid_number_percentage_comma", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_number_percentage_comma", "macro_sql": "{% macro valid_number_percentage_comma(column_name) %}\n    {{ re_data.valid_regex(column_name, 'number_percentage_comma')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.398262}, "macro.re_data.valid_phone": {"unique_id": "macro.re_data.valid_phone", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_phone", "macro_sql": "{% macro valid_phone(column_name) %}\n    {{ re_data.valid_regex(column_name, 'phone')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.398401}, "macro.re_data.valid_uuid": {"unique_id": "macro.re_data.valid_uuid", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_uuid", "macro_sql": "{% macro valid_uuid(column_name) %}\n    {{ re_data.valid_regex(column_name, 'uuid')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.3985379}, "macro.re_data.valid_credit_card": {"unique_id": "macro.re_data.valid_credit_card", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/validating/valid_with_regex.sql", "original_file_path": "macros/public/validating/valid_with_regex.sql", "name": "valid_credit_card", "macro_sql": "{% macro valid_credit_card(column_name) %}\n    {{ re_data.valid_regex(column_name, 'credit_card_number')}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.valid_regex"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.398676}, "macro.re_data.filter_get_duplicates": {"unique_id": "macro.re_data.filter_get_duplicates", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/filtering/get_duplicates.sql", "original_file_path": "macros/public/filtering/get_duplicates.sql", "name": "filter_get_duplicates", "macro_sql": "{% macro filter_get_duplicates(relation, unique_cols, sort_columns) %}\n    (\n        with duplication_context as (\n            {{re_data.add_duplication_context(relation, unique_cols, sort_columns)}}\n        ),\n        duplicate_rows as (\n            select * from duplication_context where re_data_duplicate_group_row_count > 1\n        )\n        {# return surrogate key as well? #}\n        select *\n        from duplicate_rows\n    ) \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.add_duplication_context"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.399044}, "macro.re_data.filter_remove_duplicates": {"unique_id": "macro.re_data.filter_remove_duplicates", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/filtering/remove_duplicates.sql", "original_file_path": "macros/public/filtering/remove_duplicates.sql", "name": "filter_remove_duplicates", "macro_sql": "{% macro filter_remove_duplicates(relation, unique_cols, sort_columns) %}\n    (\n        with with_row_num as (\n            {{re_data.add_duplication_context(relation, unique_cols, sort_columns)}}\n        ),\n        one_row_num as (\n            select * from with_row_num where re_data_duplicate_group_row_number = 1\n        )\n        select {{ dbt_utils.star(from=relation) }}\n        from one_row_num\n    ) \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.add_duplication_context", "macro.dbt_utils.star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.399421}, "macro.re_data.generate_blacklist_pattern": {"unique_id": "macro.re_data.generate_blacklist_pattern", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/cleaning/clean_blacklist.sql", "original_file_path": "macros/public/cleaning/clean_blacklist.sql", "name": "generate_blacklist_pattern", "macro_sql": "{% macro generate_blacklist_pattern(chars_to_blacklist) %}\n    {% set pattern = [] %}\n    {% for char in chars_to_blacklist %}\n        {% set expr = '(' + char + ')' %}\n        {% do pattern.append(expr) %}\n    {% endfor %}\n\n    {{ return(pattern | join('|')) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.400376}, "macro.re_data.clean_blacklist": {"unique_id": "macro.re_data.clean_blacklist", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/cleaning/clean_blacklist.sql", "original_file_path": "macros/public/cleaning/clean_blacklist.sql", "name": "clean_blacklist", "macro_sql": "\n\n{%- macro clean_blacklist(column_name, chars_to_blacklist, replacement) -%}\n    {% set pattern_string = re_data.generate_blacklist_pattern(chars_to_blacklist) %}\n\n    {{ adapter.dispatch('clean_blacklist', 're_data')(column_name, pattern_string, replacement) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.generate_blacklist_pattern", "macro.re_data.default__clean_blacklist"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.40065}, "macro.re_data.default__clean_blacklist": {"unique_id": "macro.re_data.default__clean_blacklist", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/cleaning/clean_blacklist.sql", "original_file_path": "macros/public/cleaning/clean_blacklist.sql", "name": "default__clean_blacklist", "macro_sql": "{%- macro default__clean_blacklist(column_name, pattern_string, replacement) -%}\n    regexp_replace( {{ column_name }}, '{{ pattern_string }}', '{{ replacement }}')\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4008121}, "macro.re_data.postgres__clean_blacklist": {"unique_id": "macro.re_data.postgres__clean_blacklist", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/cleaning/clean_blacklist.sql", "original_file_path": "macros/public/cleaning/clean_blacklist.sql", "name": "postgres__clean_blacklist", "macro_sql": "{%- macro postgres__clean_blacklist(column_name, pattern_string, replacement) -%}\n    regexp_replace( {{ column_name }}, '{{ pattern_string }}', '{{ replacement }}', 'g')\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.400964}, "macro.re_data.redshift__clean_blacklist": {"unique_id": "macro.re_data.redshift__clean_blacklist", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/cleaning/clean_blacklist.sql", "original_file_path": "macros/public/cleaning/clean_blacklist.sql", "name": "redshift__clean_blacklist", "macro_sql": "{%- macro redshift__clean_blacklist(column_name, pattern_string, replacement) -%}\n    regexp_replace( {{ column_name }}, '{{ pattern_string }}', '{{ replacement }}')\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.401122}, "macro.re_data.bigquery__clean_blacklist": {"unique_id": "macro.re_data.bigquery__clean_blacklist", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/cleaning/clean_blacklist.sql", "original_file_path": "macros/public/cleaning/clean_blacklist.sql", "name": "bigquery__clean_blacklist", "macro_sql": "{%- macro bigquery__clean_blacklist(column_name, pattern_string, replacement) -%}\n    regexp_replace( {{ column_name }}, \"\"\"{{ pattern_string }}\"\"\", '{{ replacement }}')\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.401275}, "macro.re_data.clean_capitalize_words": {"unique_id": "macro.re_data.clean_capitalize_words", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/cleaning/clean_capitalize_words.sql", "original_file_path": "macros/public/cleaning/clean_capitalize_words.sql", "name": "clean_capitalize_words", "macro_sql": "{% macro clean_capitalize_words(column_name) %}\n    initcap( {{column_name}} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.401471}, "macro.re_data.clean_additional_whitespaces": {"unique_id": "macro.re_data.clean_additional_whitespaces", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/cleaning/clean_additional_whitespace.sql", "original_file_path": "macros/public/cleaning/clean_additional_whitespace.sql", "name": "clean_additional_whitespaces", "macro_sql": "{% macro clean_additional_whitespaces(column_name) %}\n    {{ adapter.dispatch('clean_additional_whitespaces', 're_data')(column_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__clean_additional_whitespaces"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.401993}, "macro.re_data.default__clean_additional_whitespaces": {"unique_id": "macro.re_data.default__clean_additional_whitespaces", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/cleaning/clean_additional_whitespace.sql", "original_file_path": "macros/public/cleaning/clean_additional_whitespace.sql", "name": "default__clean_additional_whitespaces", "macro_sql": "{% macro default__clean_additional_whitespaces(column_name) %}\n    trim(regexp_replace( {{ column_name }}, '\\s\\s+', ' '))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.402096}, "macro.re_data.postgres__clean_additional_whitespaces": {"unique_id": "macro.re_data.postgres__clean_additional_whitespaces", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/cleaning/clean_additional_whitespace.sql", "original_file_path": "macros/public/cleaning/clean_additional_whitespace.sql", "name": "postgres__clean_additional_whitespaces", "macro_sql": "{% macro postgres__clean_additional_whitespaces(column_name) %}\n    trim(regexp_replace( {{ column_name }}, '\\s\\s+', ' ', 'g'))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4021928}, "macro.re_data.redshift__clean_additional_whitespaces": {"unique_id": "macro.re_data.redshift__clean_additional_whitespaces", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/cleaning/clean_additional_whitespace.sql", "original_file_path": "macros/public/cleaning/clean_additional_whitespace.sql", "name": "redshift__clean_additional_whitespaces", "macro_sql": "{% macro redshift__clean_additional_whitespaces(column_name) %}\n    trim(regexp_replace( {{ column_name }}, '\\\\s\\\\s+', ' '))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.402287}, "macro.re_data.bigquery__clean_additional_whitespaces": {"unique_id": "macro.re_data.bigquery__clean_additional_whitespaces", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/cleaning/clean_additional_whitespace.sql", "original_file_path": "macros/public/cleaning/clean_additional_whitespace.sql", "name": "bigquery__clean_additional_whitespaces", "macro_sql": "{% macro bigquery__clean_additional_whitespaces(column_name) %}\n    trim(regexp_replace( {{ column_name }}, r'\\s\\s+', ' '))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.402385}, "macro.re_data.snowflake__clean_additional_whitespaces": {"unique_id": "macro.re_data.snowflake__clean_additional_whitespaces", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/cleaning/clean_additional_whitespace.sql", "original_file_path": "macros/public/cleaning/clean_additional_whitespace.sql", "name": "snowflake__clean_additional_whitespaces", "macro_sql": "{% macro snowflake__clean_additional_whitespaces(column_name) %}\n    trim(regexp_replace( {{ column_name }}, '\\\\s\\\\s+', ' '))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.402482}, "macro.re_data.is_dbt_relation": {"unique_id": "macro.re_data.is_dbt_relation", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/normalizing/normalize_values.sql", "original_file_path": "macros/public/normalizing/normalize_values.sql", "name": "is_dbt_relation", "macro_sql": "{% macro is_dbt_relation(obj) %}\n    {{ return (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation') )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.403295}, "macro.re_data.normalize_expression_cte": {"unique_id": "macro.re_data.normalize_expression_cte", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/normalizing/normalize_values.sql", "original_file_path": "macros/public/normalizing/normalize_values.sql", "name": "normalize_expression_cte", "macro_sql": "{% macro normalize_expression_cte(reference_table) %}\n    with target_table as (\n        {% if re_data.is_dbt_relation(reference_table) or reference_table is string %}\n            select * from {{ reference_table }}\n        {% elif reference_table is mapping %}\n            {% for key, value in reference_table.items() %}\n                select '{{key}}' as source, '{{value}}' as target\n                {% if not loop.last %}union all{% endif %}\n            {% endfor %}\n        {% endif %}\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.is_dbt_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.403733}, "macro.re_data.normalize_values": {"unique_id": "macro.re_data.normalize_values", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/normalizing/normalize_values.sql", "original_file_path": "macros/public/normalizing/normalize_values.sql", "name": "normalize_values", "macro_sql": "\n\n{%- macro normalize_values(source_relation, column_name, reference_table) -%}\n    ( \n        {{ re_data.normalize_expression_cte(reference_table) }}\n        \n        select s.*, \n        case when t.source is null\n                then s.{{column_name}}\n            else t.target\n            end as {{ column_name + '__normalized'}} \n        from {{ source_relation }} s\n        left join target_table t \n        on t.source = s.{{column_name}}\n    )\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.normalize_expression_cte"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.403986}, "macro.re_data.overview_select_base": {"unique_id": "macro.re_data.overview_select_base", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/store/generate_overview.sql", "original_file_path": "macros/public/store/generate_overview.sql", "name": "overview_select_base", "macro_sql": "{% macro overview_select_base(type, timestamp_col) %}\n    '{{ type }}' as {{ re_data.quote_column('type') }},\n    table_name as {{ re_data.quote_column('table_name') }},\n    column_name as {{ re_data.quote_column('column_name') }},\n    {{ timestamp_col }} as {{ re_data.quote_column('computed_on') }},\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.409874}, "macro.re_data.generate_overview": {"unique_id": "macro.re_data.generate_overview", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/store/generate_overview.sql", "original_file_path": "macros/public/store/generate_overview.sql", "name": "generate_overview", "macro_sql": "{% macro generate_overview(start_date, end_date, interval, overview_path=None) %}\n-- depends_on: {{ ref('re_data_anomalies') }}\n-- depends_on: {{ ref('re_data_base_metrics') }}\n-- depends_on: {{ ref('re_data_schema_changes') }}\n-- depends_on: {{ ref('re_data_columns') }}\n\n    {# time grain is either days or hour #}\n    {% set time_grain, num_str = interval.split(':') %}\n    {% set num = num_str | int %}\n    {% if time_grain == 'hours' %}\n        {% set interval_length_sec = num * 3600 %}\n    {% elif time_grain == 'days'%}\n        {% set interval_length_sec = num * 3600 * 24 %}\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Invalid interval. Got: \" ~ interval) }}\n    {% endif %}\n    {{ dbt_utils.log_info('[re_data] interval length in seconds is ' ~ interval_length_sec) }}\n    {% set overview_query %}\n        with schema_changes_casted as (\n            select id, table_name, operation, column_name, data_type, {{ bool_to_string('is_nullable') }}, prev_column_name, prev_data_type, {{ bool_to_string('prev_is_nullable') }}, detected_time\n            from {{ ref('re_data_schema_changes') }}\n        ),\n        columns_casted as (\n            select {{ full_table_name('name', 'schema', 'database') }} as table_name, column_name, data_type, {{ bool_to_string('is_nullable') }}, computed_on\n            from {{ ref('re_data_columns') }} \n        )\n        \n    (    \n        select\n            {{ overview_select_base('metric', 'computed_on')}}\n            {{ to_single_json(['metric', 'value', 'time_window_end', 'interval_length_sec']) }} as {{ re_data.quote_column('data') }}\n        from\n            {{ ref('re_data_base_metrics') }}\n            where date(time_window_end) between '{{start_date}}' and '{{end_date}}'\n            and interval_length_sec = {{interval_length_sec}}\n    ) union all \n    (\n        select\n            {{ overview_select_base('anomaly', 'computed_on')}}\n            {{ to_single_json(['id', 'metric', 'z_score_value', 'last_value', 'last_avg', 'last_stddev', 'time_window_end', 'interval_length_sec']) }} as {{ re_data.quote_column('data') }}\n        from\n            {{ ref('re_data_anomalies') }}\n            where date(time_window_end) between '{{start_date}}' and '{{end_date}}'\n            and interval_length_sec = {{interval_length_sec}}\n    ) union all\n    (\n        select\n            {{ overview_select_base('schema_change', 'detected_time')}}\n            {{ to_single_json(['id', 'operation', 'data_type', 'is_nullable', 'prev_column_name', 'prev_data_type', 'prev_is_nullable', 'detected_time']) }} as {{ re_data.quote_column('data') }}\n        from\n            schema_changes_casted\n            where date(detected_time) >= '{{start_date}}'\n    ) union all\n    (\n        select\n            {{ overview_select_base('schema', 'computed_on')}}\n            {{ to_single_json(['data_type', 'is_nullable']) }} as {{ re_data.quote_column('data') }}\n        from\n            columns_casted\n    )\n    union all \n    (\n        select \n            'alert' as {{ re_data.quote_column('type') }},\n            model as {{ re_data.quote_column('table_name') }},\n            null as {{ re_data.quote_column('column_name') }},\n            time_window_end as {{ re_data.quote_column('computed_on') }},\n            {{ to_single_json(['type', 'model', 'message', 'value', 'time_window_end']) }} as {{ re_data.quote_column('data') }}\n        from\n            {{ ref('re_data_alerts') }}\n        where\n            case\n                when type = 'anomaly' then time_window_end between '{{ start_date }}' and '{{ end_date }}'\n                else time_window_end >= '{{ start_date }}'\n            end\n    ) union all\n    (\n        select\n            {{ overview_select_base('test', 'run_at')}}\n            {{ to_single_json([\n                'status', 'test_name', 'run_at', 'execution_time', 'message', 'failures_count', 'failures_json', 'failures_table', 'severity', 'compiled_sql'\n            ]) }} as {{ re_data.quote_column('data') }}\n        from\n            {{ ref('re_data_test_history') }}\n        where date(run_at) between '{{start_date}}' and '{{end_date}}' \n    )\n    order by {{ re_data.quote_column('computed_on')}} desc\n    {% endset %}\n\n    {% set overview_result = run_query(overview_query) %}\n    {% set overview_file_path = overview_path or 'target/re_data/overview.json' %}\n    {% do overview_result.to_json(overview_file_path) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.log_info", "macro.re_data.bool_to_string", "macro.re_data.full_table_name", "macro.re_data.overview_select_base", "macro.re_data.to_single_json", "macro.re_data.quote_column", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4130769}, "macro.re_data.export_alerts": {"unique_id": "macro.re_data.export_alerts", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/public/store/export_alerts.sql", "original_file_path": "macros/public/store/export_alerts.sql", "name": "export_alerts", "macro_sql": "{% macro export_alerts(start_date, end_date, alerts_path=None, monitored_path=None) %}\n    {% set alerts_query %}\n        select\n            type as {{ re_data.quote_column('type') }},\n            model as {{ re_data.quote_column('model') }},\n            message as {{ re_data.quote_column('message') }},\n            value as {{ re_data.quote_column('value') }},\n            {{ format_timestamp('time_window_end')}} as {{ re_data.quote_column('time_window_end') }} \n        from {{ ref('re_data_alerts') }}\n        where\n            case\n                when type = 'anomaly' then time_window_end between '{{ start_date }}' and '{{ end_date }}'\n                else time_window_end >= '{{ start_date }}'\n            end\n        order by time_window_end desc\n    {% endset %}\n\n    {% set query_result = run_query(alerts_query) %}\n    {% set alerts_file_path = alerts_path or 'target/re_data/alerts.json' %}\n    {% do query_result.to_json(alerts_file_path) %}\n\n    {% set monitored_query %}\n        select\n            {{ full_table_name('name', 'schema', 'database') }} as {{ re_data.quote_column('model') }},\n             time_filter as {{ re_data.quote_column('time_filter') }},\n            metrics as {{ re_data.quote_column('metrics') }},\n            columns as {{ re_data.quote_column('columns') }},\n            anomaly_detector as {{ re_data.quote_column('anomaly_detector') }},\n            owners as {{ re_data.quote_column('owners') }}\n        from {{ ref('re_data_monitored') }}\n    {% endset %}\n    {% set query_result = run_query(monitored_query) %}\n    {% set monitored_file_path = monitored_path or 'target/re_data/monitored.json' %}\n    {% do query_result.to_json(monitored_file_path) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.quote_column", "macro.re_data.format_timestamp", "macro.dbt.run_query", "macro.re_data.full_table_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.41539}, "macro.re_data.split_and_return_nth_value": {"unique_id": "macro.re_data.split_and_return_nth_value", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/db/core/split_and_return_nth_value.sql", "original_file_path": "macros/db/core/split_and_return_nth_value.sql", "name": "split_and_return_nth_value", "macro_sql": "{% macro split_and_return_nth_value(column_name, delimiter, ordinal) -%}\n    {{ adapter.dispatch('split_and_return_nth_value', 're_data')(column_name, delimiter, ordinal) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__split_and_return_nth_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4157581}, "macro.re_data.default__split_and_return_nth_value": {"unique_id": "macro.re_data.default__split_and_return_nth_value", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/db/core/split_and_return_nth_value.sql", "original_file_path": "macros/db/core/split_and_return_nth_value.sql", "name": "default__split_and_return_nth_value", "macro_sql": "{% macro default__split_and_return_nth_value(column_name, delimiter, ordinal) -%}\n    split_part({{ re_data.clean_blacklist(column_name, ['\"', '`'], '') }}, '{{ delimiter }}', {{ ordinal }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.clean_blacklist"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.416}, "macro.re_data.escape_seq_for_json": {"unique_id": "macro.re_data.escape_seq_for_json", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/db/core/escape.sql", "original_file_path": "macros/db/core/escape.sql", "name": "escape_seq_for_json", "macro_sql": "{% macro escape_seq_for_json(chr) %}{{adapter.dispatch('escape_seq_for_json', 're_data')(chr)}}{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__escape_seq_for_json"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4162781}, "macro.re_data.default__escape_seq_for_json": {"unique_id": "macro.re_data.default__escape_seq_for_json", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/db/core/escape.sql", "original_file_path": "macros/db/core/escape.sql", "name": "default__escape_seq_for_json", "macro_sql": "{% macro default__escape_seq_for_json(chr) %}'\\\\\\{{chr}}'{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4163892}, "macro.re_data.name_in_db": {"unique_id": "macro.re_data.name_in_db", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/db/core/identifier_mapping.sql", "original_file_path": "macros/db/core/identifier_mapping.sql", "name": "name_in_db", "macro_sql": "{% macro name_in_db(name) %}\n    {% set translated = adapter.dispatch('name_in_db', 're_data')(name) %}\n    {{ return(translated) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.snowflake__name_in_db"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.416736}, "macro.re_data.default__name_in_db": {"unique_id": "macro.re_data.default__name_in_db", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/db/core/identifier_mapping.sql", "original_file_path": "macros/db/core/identifier_mapping.sql", "name": "default__name_in_db", "macro_sql": "{% macro default__name_in_db(name) %}\n    {{ return(name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4168582}, "macro.re_data.quote_column_name": {"unique_id": "macro.re_data.quote_column_name", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/db/core/quote_column_name.sql", "original_file_path": "macros/db/core/quote_column_name.sql", "name": "quote_column_name", "macro_sql": "{% macro quote_column_name(column_name) %}\n    {% set col_name = adapter.dispatch('quote_column_name', 're_data')(column_name) %}\n    {{ return(col_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__quote_column_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.417223}, "macro.re_data.default__quote_column_name": {"unique_id": "macro.re_data.default__quote_column_name", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/db/core/quote_column_name.sql", "original_file_path": "macros/db/core/quote_column_name.sql", "name": "default__quote_column_name", "macro_sql": "{% macro default__quote_column_name(column_name) %}\n    {% set quoted_col_name = '\"' + column_name + '\"' %}\n    {{ return(quoted_col_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4174101}, "macro.re_data.quote_string": {"unique_id": "macro.re_data.quote_string", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/db/core/quote_string.sql", "original_file_path": "macros/db/core/quote_string.sql", "name": "quote_string", "macro_sql": "{%- macro quote_string(str) %}\n    {{ adapter.dispatch('quote_string', 're_data')(str) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__quote_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.417748}, "macro.re_data.default__quote_string": {"unique_id": "macro.re_data.default__quote_string", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/db/core/quote_string.sql", "original_file_path": "macros/db/core/quote_string.sql", "name": "default__quote_string", "macro_sql": "\n\n{%- macro default__quote_string(str) %}\n    $${{ str }}$$\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.417849}, "macro.re_data.quote_new_line": {"unique_id": "macro.re_data.quote_new_line", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/db/core/quote_string.sql", "original_file_path": "macros/db/core/quote_string.sql", "name": "quote_new_line", "macro_sql": "\n\n\n{%- macro quote_new_line() %}{{ adapter.dispatch('quote_new_line', 're_data')() }}{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.default__quote_new_line"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.417983}, "macro.re_data.default__quote_new_line": {"unique_id": "macro.re_data.default__quote_new_line", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/db/core/quote_string.sql", "original_file_path": "macros/db/core/quote_string.sql", "name": "default__quote_new_line", "macro_sql": "\n\n{%- macro default__quote_new_line() %}'\\134\\134n'{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.418058}, "macro.re_data.bigquery__split_and_return_nth_value": {"unique_id": "macro.re_data.bigquery__split_and_return_nth_value", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/db/bigquery/split_and_return_nth_value.sql", "original_file_path": "macros/db/bigquery/split_and_return_nth_value.sql", "name": "bigquery__split_and_return_nth_value", "macro_sql": "{% macro bigquery__split_and_return_nth_value(column_name, delimiter, ordinal) %}\n    split({{ re_data.clean_blacklist(column_name, ['\"', '`'], '') }}, '{{ delimiter }}')[ORDINAL( {{ ordinal }} )]\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.clean_blacklist"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4184089}, "macro.re_data.bigquery__quote_column_name": {"unique_id": "macro.re_data.bigquery__quote_column_name", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/db/bigquery/quote_column_name.sql", "original_file_path": "macros/db/bigquery/quote_column_name.sql", "name": "bigquery__quote_column_name", "macro_sql": "{% macro bigquery__quote_column_name(column_name) %}\n    {% set quoted_col_name = '`' + column_name + '`' %}\n    {{ return(quoted_col_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.418698}, "macro.re_data.bigquery__quote_string": {"unique_id": "macro.re_data.bigquery__quote_string", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/db/bigquery/quote_string.sql", "original_file_path": "macros/db/bigquery/quote_string.sql", "name": "bigquery__quote_string", "macro_sql": "{%- macro bigquery__quote_string(str) %}\n    \"\"\"{{ str }}\"\"\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4188852}, "macro.re_data.snowflake__name_in_db": {"unique_id": "macro.re_data.snowflake__name_in_db", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/db/snowflake/identifier_mapping.sql", "original_file_path": "macros/db/snowflake/identifier_mapping.sql", "name": "snowflake__name_in_db", "macro_sql": "{% macro snowflake__name_in_db(name) %}\n    {% if name %}\n        {{ return (name.upper()) }}\n    {% else %}\n        {{ return (name) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.419244}, "macro.re_data.redshift__escape_seq_for_json": {"unique_id": "macro.re_data.redshift__escape_seq_for_json", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/db/redshift/escape.sql", "original_file_path": "macros/db/redshift/escape.sql", "name": "redshift__escape_seq_for_json", "macro_sql": "{% macro redshift__escape_seq_for_json(chr) %}'\\\\\\{{chr}}'{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.419426}, "macro.re_data.redshift__quote_new_line": {"unique_id": "macro.re_data.redshift__quote_new_line", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/db/redshift/quote_string.sql", "original_file_path": "macros/db/redshift/quote_string.sql", "name": "redshift__quote_new_line", "macro_sql": "{%- macro redshift__quote_new_line() %}'\\134\\134n'{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.419574}, "macro.re_data.postgres__escape_seq_for_json": {"unique_id": "macro.re_data.postgres__escape_seq_for_json", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/db/postgres/escape.sql", "original_file_path": "macros/db/postgres/escape.sql", "name": "postgres__escape_seq_for_json", "macro_sql": "{% macro postgres__escape_seq_for_json(chr) %}'\\{{chr}}'{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.419749}, "macro.re_data.postgres__quote_new_line": {"unique_id": "macro.re_data.postgres__quote_new_line", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/db/postgres/quote_string.sql", "original_file_path": "macros/db/postgres/quote_string.sql", "name": "postgres__quote_new_line", "macro_sql": "{%- macro postgres__quote_new_line() %}'\\\\n'{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.419957}, "macro.re_data.pub_insert_into_re_data_monitored": {"unique_id": "macro.re_data.pub_insert_into_re_data_monitored", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/post_hook/re_data_monitored.sql", "original_file_path": "macros/post_hook/re_data_monitored.sql", "name": "pub_insert_into_re_data_monitored", "macro_sql": "{% macro pub_insert_into_re_data_monitored() %}\n    {% set monitored = re_data.pub_monitored_from_graph() %}\n    {% do re_data.insert_list_to_table(\n        this,\n        monitored,\n        ['name', 'schema', 'database', 'time_filter', 'metrics', 'columns', 'anomaly_detector', 'owners']\n    ) %}\n\n    {{ return('') }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.pub_monitored_from_graph", "macro.re_data.insert_list_to_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.42045}, "macro.re_data.insert_list_to_table": {"unique_id": "macro.re_data.insert_list_to_table", "package_name": "re_data", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/re_data", "path": "macros/store/insert_list_to_table.sql", "original_file_path": "macros/store/insert_list_to_table.sql", "name": "insert_list_to_table", "macro_sql": "{% macro insert_list_to_table(table, list, params, insert_size=100) %}\n\n    {% set single_insert_list = [] %}\n    {% for el in list %}\n        {% do single_insert_list.append(el) %}\n        {% set single_insert_list_size = single_insert_list | length %}\n        {% if single_insert_list_size == insert_size or loop.last %}\n\n            {% set insert_query %}\n                insert into {{ table }} ({%- for p in params %}{{p}}{% if not loop.last %}, {% endif %}{% endfor %}) values\n                {%- for row in single_insert_list -%}\n                    (\n                    {%- for p in params -%}\n                        {%- if row[p] is none -%}\n                            NULL\n                        {%- else -%}\n                            {%- if row[p] is string -%}\n                                {{- re_data.quote_string(row[p]) -}}\n                            {%- elif row[p] is number -%}\n                                {{-row[p]-}}\n                            {%- else -%}\n                                {{- re_data.quote_string(tojson(row[p])) -}}\n                            {%- endif -%}\n                        {%- endif -%}\n                        {%- if not loop.last -%},{%- endif -%}\n                    {%- endfor -%}\n                    )\n                    {%- if not loop.last -%},{%- endif %}\n                {% endfor -%}\n            {% endset %}\n\n            {% do run_query(insert_query) %}\n            {% do single_insert_list.clear() %}\n        {% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.re_data.quote_string", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.423192}, "macro.dbt_expectations.type_timestamp": {"unique_id": "macro.dbt_expectations.type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4236119}, "macro.dbt_expectations.default__type_timestamp": {"unique_id": "macro.dbt_expectations.default__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4236832}, "macro.dbt_expectations.snowflake__type_timestamp": {"unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.423755}, "macro.dbt_expectations.postgres__type_timestamp": {"unique_id": "macro.dbt_expectations.postgres__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.423821}, "macro.dbt_expectations.type_datetime": {"unique_id": "macro.dbt_expectations.type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.423973}, "macro.dbt_expectations.default__type_datetime": {"unique_id": "macro.dbt_expectations.default__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.424042}, "macro.dbt_expectations.snowflake__type_datetime": {"unique_id": "macro.dbt_expectations.snowflake__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.424108}, "macro.dbt_expectations.postgres__type_datetime": {"unique_id": "macro.dbt_expectations.postgres__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.424172}, "macro.dbt_expectations.regexp_instr": {"unique_id": "macro.dbt_expectations.regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1) %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence\n    ) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.424777}, "macro.dbt_expectations.default__regexp_instr": {"unique_id": "macro.dbt_expectations.default__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.42496}, "macro.dbt_expectations.redshift__regexp_instr": {"unique_id": "macro.dbt_expectations.redshift__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.425138}, "macro.dbt_expectations.postgres__regexp_instr": {"unique_id": "macro.dbt_expectations.postgres__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence) %}\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}')), 1)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.425282}, "macro.dbt_expectations.spark__regexp_instr": {"unique_id": "macro.dbt_expectations.spark__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "spark__regexp_instr", "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence) %}\ncase when {{ source_value }} rlike '{{ regexp }}' then 1 else 0 end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4254222}, "macro.dbt_expectations.log_natural": {"unique_id": "macro.dbt_expectations.log_natural", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4257479}, "macro.dbt_expectations.default__log_natural": {"unique_id": "macro.dbt_expectations.default__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "default__log_natural", "macro_sql": "{% macro default__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4258492}, "macro.dbt_expectations.bigquery__log_natural": {"unique_id": "macro.dbt_expectations.bigquery__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4259431}, "macro.dbt_expectations.snowflake__log_natural": {"unique_id": "macro.dbt_expectations.snowflake__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.426036}, "macro.dbt_expectations.rand": {"unique_id": "macro.dbt_expectations.rand", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__rand"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.426377}, "macro.dbt_expectations.default__rand": {"unique_id": "macro.dbt_expectations.default__rand", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "default__rand", "macro_sql": "{% macro default__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.426616}, "macro.dbt_expectations.bigquery__rand": {"unique_id": "macro.dbt_expectations.bigquery__rand", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "bigquery__rand", "macro_sql": "{% macro bigquery__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.426683}, "macro.dbt_expectations.snowflake__rand": {"unique_id": "macro.dbt_expectations.snowflake__rand", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) %}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4267619}, "macro.dbt_expectations.postgres__rand": {"unique_id": "macro.dbt_expectations.postgres__rand", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "postgres__rand", "macro_sql": "{% macro postgres__rand() %}\n\n    random()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.426827}, "macro.dbt_expectations.redshift__rand": {"unique_id": "macro.dbt_expectations.redshift__rand", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "redshift__rand", "macro_sql": "{% macro redshift__rand() %}\n\n    random()\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.426893}, "macro.dbt_expectations.median": {"unique_id": "macro.dbt_expectations.median", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "name": "median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.427132}, "macro.dbt_expectations.percentile_cont": {"unique_id": "macro.dbt_expectations.percentile_cont", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.427588}, "macro.dbt_expectations.default__quantile": {"unique_id": "macro.dbt_expectations.default__quantile", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.427785}, "macro.dbt_expectations.bigquery__quantile": {"unique_id": "macro.dbt_expectations.bigquery__quantile", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) %}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.427985}, "macro.dbt_expectations.test_expression_between": {"unique_id": "macro.dbt_expectations.test_expression_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.429127}, "macro.dbt_expectations.expression_between": {"unique_id": "macro.dbt_expectations.expression_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.429878}, "macro.dbt_expectations.test_expression_is_true": {"unique_id": "macro.dbt_expectations.test_expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.430794}, "macro.dbt_expectations.expression_is_true": {"unique_id": "macro.dbt_expectations.expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.431077}, "macro.dbt_expectations.default__expression_is_true": {"unique_id": "macro.dbt_expectations.default__expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.431669}, "macro.dbt_expectations.get_select": {"unique_id": "macro.dbt_expectations.get_select", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.436482}, "macro.dbt_expectations.default__get_select": {"unique_id": "macro.dbt_expectations.default__get_select", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4370198}, "macro.dbt_expectations.test_equal_expression": {"unique_id": "macro.dbt_expectations.test_equal_expression", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.437549}, "macro.dbt_expectations.default__test_equal_expression": {"unique_id": "macro.dbt_expectations.default__test_equal_expression", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4387982}, "macro.dbt_expectations.truth_expression": {"unique_id": "macro.dbt_expectations.truth_expression", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.439094}, "macro.dbt_expectations.default__truth_expression": {"unique_id": "macro.dbt_expectations.default__truth_expression", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.439195}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "name": "test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.439759}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "name": "test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.440783}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "name": "test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.44141}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "name": "test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_utils.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4419641}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "name": "test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt_utils.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4427671}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "name": "test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4433951}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "name": "test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.444384}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "name": "test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.445384}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "name": "test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.446414}, "macro.dbt_expectations._get_like_pattern_expression": {"unique_id": "macro.dbt_expectations._get_like_pattern_expression", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "name": "_get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.446722}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "name": "test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.447284}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.448381}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        cast({{ column_name }} as {{ dbt_utils.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_utils.type_timestamp() }}))\n        <\n        cast({{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_utils.type_timestamp() }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.448985}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "name": "test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.450152}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "name": "test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model, compare_model, factor=1, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.450588}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "name": "test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.451784}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.453471}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {%- for g in group_by %}\n        {{ g }},\n        {%- endfor %}\n        max(1) as join_key,\n        max({{ timestamp_column }}) as latest_timestamp_column\n    from\n        {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    {{ dbt_utils.group_by(group_by | length )}}\n\n),\ntotal_row_counts as (\n\n    select\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        latest_timestamp_column < {{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }}\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.dbt_utils.dateadd", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.454001}, "macro.dbt_expectations.test_expect_column_to_exist": {"unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "name": "test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt_utils.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.455196}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                                        value,\n                                                                        group_by,\n                                                                        row_condition\n                                                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.456176}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.456463}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "name": "test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.457194}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "name": "test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model, compare_model, factor, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model, compare_model,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.45756}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "name": "test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.458761}, "macro.dbt_expectations._get_column_list": {"unique_id": "macro.dbt_expectations._get_column_list", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "name": "_get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4591901}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "name": "test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4605498}, "macro.dbt_expectations._list_intersect": {"unique_id": "macro.dbt_expectations._list_intersect", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "name": "_list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.460997}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "name": "test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4615018}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "name": "test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.461909}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "name": "test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                        min_value=None,\n                                                        max_value=None\n                                                        ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.462882}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "name": "test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4637609}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "name": "test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.464661}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "name": "test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.466052}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "name": "test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4665442}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "name": "test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.466847}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "name": "test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.467618}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "name": "test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.46879}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "name": "test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ column.name | upper }}' as {{ dbt_utils.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt_utils.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.469857}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "name": "test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.470135}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "name": "test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.470579}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "name": "test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4710631}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "name": "test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4718661}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "name": "test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.472683}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "name": "test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.473557}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "name": "test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4743838}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "name": "test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.475256}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "name": "test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4761379}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values=False,\n                                                            data_type=\"decimal\",\n                                                            row_condition=None\n                                                            ) -%}\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (model, column_name, value_set, top_n, quote_values, data_type, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.477696}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values,\n                                                            data_type,\n                                                            row_condition\n                                                            ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.478503}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "name": "test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.479403}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "name": "test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                    column_name,\n                                                    value,\n                                                    quote_values=False,\n                                                    group_by=None,\n                                                    row_condition=None\n                                                    ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.480065}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "name": "test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.480858}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4821608}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.482539}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "name": "test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.483339}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "name": "test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.4841669}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "name": "test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.484879}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "name": "test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model, column_name,\n                                                    value_set,\n                                                    quote_values=False,\n                                                    row_condition=None\n                                                    ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.485821}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "name": "test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.486627}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "name": "test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {# \n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals, \n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt_utils.type_int() }}),\n            cast({{interval}} as {{ dbt_utils.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt_utils.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {# \n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine \n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{dbt_utils.dateadd(\n            date_part, \n            \"mod(\n                cast(\" ~ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt_utils.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt_utils.type_int() ~ \" )\n            ) * (-1)\", \n            \"cast( \" ~ dbt_utils.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n            \n    {% endif %}\n    \n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt_utils.datediff", "macro.dbt_utils.type_int", "macro.dbt_utils.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.49051}, "macro.dbt_expectations._get_metric_expression": {"unique_id": "macro.dbt_expectations._get_metric_expression", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "_get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.493759}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.494273}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt_utils.date_trunc(period, date_column_name) }} as metric_period,\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        group by\n            1\n\n    ),\n    {%- if take_diffs %}\n    grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt_utils.dateadd(period, -test_periods, dbt_utils.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_utils.type_timestamp() }})\n    and\n    metric_period < {{ dbt_utils.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_expectations._get_metric_expression", "macro.dbt_utils.dateadd", "macro.dbt_date.now", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.495372}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (model, column_name, group_by, sigma_threshold) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.496304}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\nwith metric_values as (\n\n    {% if group_by -%}\n    select\n        {{ group_by }} as metric_date,\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    group by\n        1\n    {%- else -%}\n    select\n        {{ column_name }} as {{ column_name }}\n    from\n        {{ model }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/{{ column_name }}_stddev as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.496821}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.498552}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where 1=1\n    {% if row_condition %}\n        and {{ row_condition }}\n    {% endif %}\n    {% if ignore_row_if == \"all_values_are_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {%- endfor %}\n        )\n    {% elif ignore_row_if == \"any_value_is_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {%- endfor %}\n        )\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.49985}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "name": "test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n{%- if row_condition  %}\n    {{ row_condition }} and\n{% endif -%}\n\n{%- if ignore_row_if == \"all_values_are_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {% endfor %}\n        )\n{%- elif ignore_row_if == \"any_value_is_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {% endfor %}\n        )\n{%- endif -%}\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.502499}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "name": "test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.503416}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "name": "test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.504055}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "name": "test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.5047538}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/jackforgash/gh/flow-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "name": "test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653334538.506132}}, "docs": {"flow_models.address_name": {"unique_id": "flow_models.address_name", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/address_name.md", "original_file_path": "models/descriptions/address_name.md", "name": "address_name", "block_contents": "The name for a specific address, like Kraken or Huobi for CEX, or consensus vs verification for validator."}, "flow_models.blockchain": {"unique_id": "flow_models.blockchain", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/blockchain.md", "original_file_path": "models/descriptions/blockchain.md", "name": "blockchain", "block_contents": "The name of the blockchain for this address."}, "flow_models.tx_count": {"unique_id": "flow_models.tx_count", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/tx_count.md", "original_file_path": "models/descriptions/tx_count.md", "name": "tx_count", "block_contents": "The number of transactions in the block."}, "flow_models.count_authorizers": {"unique_id": "flow_models.count_authorizers", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/count_authorizers.md", "original_file_path": "models/descriptions/count_authorizers.md", "name": "count_authorizers", "block_contents": "Number of authorizers"}, "flow_models.tx_id": {"unique_id": "flow_models.tx_id", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/tx_id.md", "original_file_path": "models/descriptions/tx_id.md", "name": "tx_id", "block_contents": "ID for the transaction."}, "flow_models.event_index": {"unique_id": "flow_models.event_index", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/event_index.md", "original_file_path": "models/descriptions/event_index.md", "name": "event_index", "block_contents": "The index of the event within the transaction, i.e. in what order the events occurred."}, "flow_models.network": {"unique_id": "flow_models.network", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/network.md", "original_file_path": "models/descriptions/network.md", "name": "network", "block_contents": "The blockchain network the block or transaction occurred on."}, "flow_models.proposer": {"unique_id": "flow_models.proposer", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/proposer.md", "original_file_path": "models/descriptions/proposer.md", "name": "proposer", "block_contents": "Address of the transaction proposer."}, "flow_models.event_contract": {"unique_id": "flow_models.event_contract", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/event_contract.md", "original_file_path": "models/descriptions/event_contract.md", "name": "event_contract", "block_contents": "The contract called for this event. This is equivalent to the Contract column on Flowscan and is a concatenation of the contract's account address and primary name."}, "flow_models.tx_succeeded": {"unique_id": "flow_models.tx_succeeded", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/tx_succeeded.md", "original_file_path": "models/descriptions/tx_succeeded.md", "name": "tx_succeeded", "block_contents": "Transaction status, if it succeeded or failed."}, "flow_models.gas_limit": {"unique_id": "flow_models.gas_limit", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/gas_limit.md", "original_file_path": "models/descriptions/gas_limit.md", "name": "gas_limit", "block_contents": "Upper gas limit attached to the transaction."}, "flow_models.attribute_key": {"unique_id": "flow_models.attribute_key", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/attribute_key.md", "original_file_path": "models/descriptions/attribute_key.md", "name": "attribute_key", "block_contents": "The key of the attribute key-value pair. This is the label while attribute_value is the data."}, "flow_models.label_subtype": {"unique_id": "flow_models.label_subtype", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/label_subtype.md", "original_file_path": "models/descriptions/label_subtype.md", "name": "label_subtype", "block_contents": "The type of address, within the higher order label_type, such as hot wallet, deposit wallet, validator, etc."}, "flow_models.attribute_value": {"unique_id": "flow_models.attribute_value", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/attribute_value.md", "original_file_path": "models/descriptions/attribute_value.md", "name": "attribute_value", "block_contents": "The value of the attribute key-value pair. This is the data that attribute_key labels."}, "flow_models._ingested_at": {"unique_id": "flow_models._ingested_at", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/_ingested_at.md", "original_file_path": "models/descriptions/_ingested_at.md", "name": "_ingested_at", "block_contents": "When the record was ingested by the chainwalker."}, "flow_models.creator": {"unique_id": "flow_models.creator", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/creator.md", "original_file_path": "models/descriptions/creator.md", "name": "creator", "block_contents": "The source of the labeling information for the address."}, "flow_models.event_data": {"unique_id": "flow_models.event_data", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/event_data.md", "original_file_path": "models/descriptions/event_data.md", "name": "event_data", "block_contents": "The raw event data from the event."}, "flow_models.payer": {"unique_id": "flow_models.payer", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/payer.md", "original_file_path": "models/descriptions/payer.md", "name": "payer", "block_contents": "Address of the wallet paying for the transaction."}, "flow_models.decoded_address": {"unique_id": "flow_models.decoded_address", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/decoded_address.md", "original_file_path": "models/descriptions/decoded_address.md", "name": "decoded_address", "block_contents": "The decoded address, if applicable, for the attribute_value."}, "flow_models.attribute_id": {"unique_id": "flow_models.attribute_id", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/attribute_id.md", "original_file_path": "models/descriptions/attribute_id.md", "name": "attribute_id", "block_contents": "ID for the attribute, which is a concatenation of tx_id-event_index-attribute_index."}, "flow_models.id": {"unique_id": "flow_models.id", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/id.md", "original_file_path": "models/descriptions/id.md", "name": "id", "block_contents": "The block hash."}, "flow_models._event_data_type": {"unique_id": "flow_models._event_data_type", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/_event_data_type.md", "original_file_path": "models/descriptions/_event_data_type.md", "name": "_event_data_type", "block_contents": "The type object from event_data."}, "flow_models.contract_name": {"unique_id": "flow_models.contract_name", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/contract_name.md", "original_file_path": "models/descriptions/contract_name.md", "name": "contract_name", "block_contents": "The primary name of the contract, derived from the full contract address."}, "flow_models.address": {"unique_id": "flow_models.address", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/address.md", "original_file_path": "models/descriptions/address.md", "name": "address", "block_contents": "The on-chain address."}, "flow_models.attribute_index": {"unique_id": "flow_models.attribute_index", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/attribute_index.md", "original_file_path": "models/descriptions/attribute_index.md", "name": "attribute_index", "block_contents": "Index of the attribute within the event, corresponds with how the attributes are presented on the explorer."}, "flow_models._event_data_fields": {"unique_id": "flow_models._event_data_fields", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/_event_data_fields.md", "original_file_path": "models/descriptions/_event_data_fields.md", "name": "_event_data_fields", "block_contents": "The fields object from the event_data."}, "flow_models.attribute_value_adj": {"unique_id": "flow_models.attribute_value_adj", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/attribute_value_adj.md", "original_file_path": "models/descriptions/attribute_value_adj.md", "name": "attribute_value_adj", "block_contents": "The adjusted attribute_value where an address from decoded_address is used in place of the encoded binary string, where applicable."}, "flow_models.block_height": {"unique_id": "flow_models.block_height", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/block_height.md", "original_file_path": "models/descriptions/block_height.md", "name": "block_height", "block_contents": "The block height the block was recorded at."}, "flow_models.event_id": {"unique_id": "flow_models.event_id", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/event_id.md", "original_file_path": "models/descriptions/event_id.md", "name": "event_id", "block_contents": "The id for the event, which is a concatenation of tx_id-event_index."}, "flow_models.event_attributes": {"unique_id": "flow_models.event_attributes", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/event_attributes.md", "original_file_path": "models/descriptions/event_attributes.md", "name": "event_attributes", "block_contents": "The data passed to the event, in the form of key-value pairs."}, "flow_models.transaction_result": {"unique_id": "flow_models.transaction_result", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/transaction_result.md", "original_file_path": "models/descriptions/transaction_result.md", "name": "transaction_result", "block_contents": "Outcome of the transaction, including events that were called."}, "flow_models.account_address": {"unique_id": "flow_models.account_address", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/account_address.md", "original_file_path": "models/descriptions/account_address.md", "name": "account_address", "block_contents": "The account address in 0x form that instantiated the contract called in the event. Note, on the Flow blockchain the account and the contract are separate as the account may have created more than one contract, in rare instances, such as the following FLOW address 0x8624b52f9ddcd04a."}, "flow_models.project_name": {"unique_id": "flow_models.project_name", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/project_name.md", "original_file_path": "models/descriptions/project_name.md", "name": "project_name", "block_contents": "The overarching project name, related to the address name. For example, Kraken (vs. Kraken Deposit Wallet for address_names)."}, "flow_models.label_type": {"unique_id": "flow_models.label_type", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/label_type.md", "original_file_path": "models/descriptions/label_type.md", "name": "label_type", "block_contents": "Predominant label categorization, such as CEX, Operator, NFT, etc."}, "flow_models.authorizers": {"unique_id": "flow_models.authorizers", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/authorizers.md", "original_file_path": "models/descriptions/authorizers.md", "name": "authorizers", "block_contents": "Address(es) authorizing the transaction."}, "flow_models.event_type": {"unique_id": "flow_models.event_type", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/event_type.md", "original_file_path": "models/descriptions/event_type.md", "name": "event_type", "block_contents": "The type of method called on the event_contract. This is equivalent to the Type column on Flowscan."}, "flow_models.parent_id": {"unique_id": "flow_models.parent_id", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/parent_id.md", "original_file_path": "models/descriptions/parent_id.md", "name": "parent_id", "block_contents": "The block hash for the parent block."}, "flow_models.chain_id": {"unique_id": "flow_models.chain_id", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/chain_id.md", "original_file_path": "models/descriptions/chain_id.md", "name": "chain_id", "block_contents": "The id for the chain of the network on which this block occurred."}, "flow_models.block_timestamp": {"unique_id": "flow_models.block_timestamp", "package_name": "flow_models", "root_path": "/Users/jackforgash/gh/flow-models", "path": "descriptions/block_timestamp.md", "original_file_path": "models/descriptions/block_timestamp.md", "name": "block_timestamp", "block_contents": "The date and time for when the block was written."}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.1.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.flow_models.core__fact_events": ["model.flow_models.gold__events"], "model.flow_models.core__fact_transactions": ["model.flow_models.gold__transactions"], "model.flow_models.core__fact_blocks": ["model.flow_models.gold__blocks"], "model.flow_models.core__dim_labels": ["model.flow_models.silver__contract_labels"], "model.flow_models.bronze__labels": ["source.flow_models.crosschain.address_labels"], "model.flow_models.bronze__blocks": ["source.flow_models.prod.flow_blocks"], "model.flow_models.bronze__transactions": ["source.flow_models.prod.flow_txs"], "model.flow_models.silver__events": ["model.flow_models.silver__transactions"], "model.flow_models.silver__transactions": ["model.flow_models.bronze__transactions"], "model.flow_models.silver__contract_labels": ["model.flow_models.silver__events"], "model.flow_models.silver__blocks": ["model.flow_models.bronze__blocks"], "model.flow_models.silver__event_attributes": ["model.flow_models.silver__events"], "model.flow_models.silver__labels": ["model.flow_models.bronze__labels"], "model.flow_models.gold__blocks": ["model.flow_models.silver__blocks"], "model.flow_models.gold__events": ["model.flow_models.silver__event_attributes", "model.flow_models.silver__events"], "model.flow_models.gold__transactions": ["model.flow_models.silver__transactions"], "operation.flow_models.flow_models-on-run-start-0": [], "operation.flow_models.flow_models-on-run-start-1": [], "model.re_data.re_data_columns_over_time": ["model.re_data.re_data_columns", "model.re_data.re_data_monitored"], "model.re_data.re_data_base_metrics": ["model.re_data.re_data_columns", "model.re_data.re_data_last_base_metrics_part0", "model.re_data.re_data_last_base_metrics_part0", "model.re_data.re_data_last_base_metrics_part1", "model.re_data.re_data_last_base_metrics_part1", "model.re_data.re_data_last_base_metrics_part2", "model.re_data.re_data_last_base_metrics_part2", "model.re_data.re_data_last_base_metrics_part3", "model.re_data.re_data_last_base_metrics_part3", "model.re_data.re_data_last_base_metrics_thread0", "model.re_data.re_data_last_base_metrics_thread1", "model.re_data.re_data_last_base_metrics_thread2", "model.re_data.re_data_last_base_metrics_thread3", "model.re_data.re_data_monitored", "model.re_data.re_data_run_started_at"], "model.re_data.re_data_last_stats": ["model.re_data.re_data_base_metrics", "model.re_data.re_data_base_metrics", "model.re_data.re_data_base_metrics"], "model.re_data.re_data_last_metrics": ["model.re_data.re_data_base_metrics"], "model.re_data.re_data_metrics": ["model.re_data.re_data_base_metrics"], "model.re_data.re_data_run_started_at": [], "model.re_data.re_data_last_base_metrics_thread0": ["model.re_data.re_data_columns", "model.re_data.re_data_last_base_metrics_part0", "model.re_data.re_data_monitored", "model.re_data.re_data_run_started_at"], "model.re_data.re_data_last_base_metrics_thread1": ["model.re_data.re_data_columns", "model.re_data.re_data_last_base_metrics_part1", "model.re_data.re_data_monitored", "model.re_data.re_data_run_started_at"], "model.re_data.re_data_last_base_metrics_thread3": ["model.re_data.re_data_columns", "model.re_data.re_data_last_base_metrics_part3", "model.re_data.re_data_monitored", "model.re_data.re_data_run_started_at"], "model.re_data.re_data_last_base_metrics_thread2": ["model.re_data.re_data_columns", "model.re_data.re_data_last_base_metrics_part2", "model.re_data.re_data_monitored", "model.re_data.re_data_run_started_at"], "model.re_data.re_data_last_base_metrics_part0": ["model.re_data.re_data_columns"], "model.re_data.re_data_last_base_metrics_part1": ["model.re_data.re_data_columns"], "model.re_data.re_data_last_base_metrics_part3": ["model.re_data.re_data_columns"], "model.re_data.re_data_last_base_metrics_part2": ["model.re_data.re_data_columns"], "model.re_data.re_data_columns": ["model.re_data.re_data_monitored", "model.re_data.re_data_run_started_at"], "model.re_data.re_data_monitored": [], "model.re_data.re_data_z_score": ["model.re_data.re_data_last_metrics", "model.re_data.re_data_last_stats"], "model.re_data.re_data_anomalies": ["model.re_data.re_data_monitored", "model.re_data.re_data_z_score"], "model.re_data.re_data_test_runs": ["model.re_data.re_data_test_history"], "model.re_data.re_data_alerts": ["model.re_data.re_data_anomalies", "model.re_data.re_data_schema_changes", "model.re_data.re_data_test_history"], "model.re_data.re_data_schema_changes": ["model.re_data.re_data_columns_over_time", "model.re_data.re_data_monitored", "model.re_data.re_data_run_started_at"], "model.re_data.re_data_test_history": [], "operation.re_data.re_data-on-run-end-0": [], "test.flow_models.not_null_core__fact_blocks_block_height.69ece9390c": ["model.flow_models.core__fact_blocks"], "test.flow_models.unique_core__fact_blocks_block_height.cf41b05a2d": ["model.flow_models.core__fact_blocks"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_block_height__NUMBER__FLOAT.c551ea53de": ["model.flow_models.core__fact_blocks"], "test.flow_models.not_null_core__fact_blocks_block_timestamp.19853d3758": ["model.flow_models.core__fact_blocks"], "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_block_timestamp__day__1.5ba40a446b": ["model.flow_models.core__fact_blocks"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_block_timestamp__TIMESTAMP_NTZ.d2fe6e451c": ["model.flow_models.core__fact_blocks"], "test.flow_models.not_null_core__fact_blocks_network.2708505a8a": ["model.flow_models.core__fact_blocks"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_network__STRING__VARCHAR.68dc7d044a": ["model.flow_models.core__fact_blocks"], "test.flow_models.not_null_core__fact_blocks_chain_id.dda8c73722": ["model.flow_models.core__fact_blocks"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_chain_id__STRING__VARCHAR.ccd79281c7": ["model.flow_models.core__fact_blocks"], "test.flow_models.not_null_core__fact_blocks_tx_count.168249e174": ["model.flow_models.core__fact_blocks"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_tx_count__NUMBER.7f70f6af70": ["model.flow_models.core__fact_blocks"], "test.flow_models.not_null_core__fact_blocks_id.88f5737541": ["model.flow_models.core__fact_blocks"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_id__STRING__VARCHAR.b957f32491": ["model.flow_models.core__fact_blocks"], "test.flow_models.not_null_core__fact_blocks_parent_id.a9c18dafa8": ["model.flow_models.core__fact_blocks"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_parent_id__STRING__VARCHAR.9494ae2ff5": ["model.flow_models.core__fact_blocks"], "test.flow_models.not_null_core__fact_transactions_tx_id.dd94c1ac9e": ["model.flow_models.core__fact_transactions"], "test.flow_models.unique_core__fact_transactions_tx_id.211ea20522": ["model.flow_models.core__fact_transactions"], "test.flow_models.not_null_core__fact_transactions_block_timestamp.32cc47fbb2": ["model.flow_models.core__fact_transactions"], "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_block_timestamp__day__1.7e1b77d1c2": ["model.flow_models.core__fact_transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_timestamp__TIMESTAMP_NTZ.4c087aa60b": ["model.flow_models.core__fact_transactions"], "test.flow_models.not_null_core__fact_transactions_block_height.b73a6596e7": ["model.flow_models.core__fact_transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_height__NUMBER__FLOAT.5fa2b2e8e3": ["model.flow_models.core__fact_transactions"], "test.flow_models.not_null_core__fact_transactions_chain_id.e687eaeb3e": ["model.flow_models.core__fact_transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_chain_id__STRING__VARCHAR.5f1f4feacd": ["model.flow_models.core__fact_transactions"], "test.flow_models.not_null_core__fact_transactions_tx_index.4b4bf18757": ["model.flow_models.core__fact_transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_index__NUMBER.8612fa3af5": ["model.flow_models.core__fact_transactions"], "test.flow_models.not_null_core__fact_transactions_proposer.990b43a37e": ["model.flow_models.core__fact_transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_proposer__STRING__VARCHAR.3162d546cc": ["model.flow_models.core__fact_transactions"], "test.flow_models.not_null_core__fact_transactions_payer.ca8c699f21": ["model.flow_models.core__fact_transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_payer__STRING__VARCHAR.7f4eda4774": ["model.flow_models.core__fact_transactions"], "test.flow_models.not_null_core__fact_transactions_authorizers.1c6d0dc6dd": ["model.flow_models.core__fact_transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_authorizers__ARRAY.40cd40c72c": ["model.flow_models.core__fact_transactions"], "test.flow_models.not_null_core__fact_transactions_count_authorizers.b2e0d7cb4a": ["model.flow_models.core__fact_transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_count_authorizers__NUMBER.56bac6ce9a": ["model.flow_models.core__fact_transactions"], "test.flow_models.not_null_core__fact_transactions_gas_limit.c3fb97a749": ["model.flow_models.core__fact_transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_gas_limit__NUMBER.86a8eb924d": ["model.flow_models.core__fact_transactions"], "test.flow_models.not_null_core__fact_transactions_transaction_result.6b64c04382": ["model.flow_models.core__fact_transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_transaction_result__VARIANT.24fe91c33c": ["model.flow_models.core__fact_transactions"], "test.flow_models.not_null_core__fact_transactions_tx_succeeded.85fd90691c": ["model.flow_models.core__fact_transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_succeeded__BOOLEAN.0243d3b703": ["model.flow_models.core__fact_transactions"], "test.flow_models.not_null_core__fact_transactions_error_msg.63392f4710": ["model.flow_models.core__fact_transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_error_msg__STRING__VARCHAR.e752ab1a51": ["model.flow_models.core__fact_transactions"], "test.flow_models.dbt_utils_unique_combination_of_columns_core__fact_transactions_tx_id__block_height.3964206ae1": ["model.flow_models.core__fact_transactions"], "test.flow_models.not_null_core__fact_events_tx_id.a75802bdbe": ["model.flow_models.core__fact_events"], "test.flow_models.not_null_core__fact_events_block_timestamp.d98411a5a4": ["model.flow_models.core__fact_events"], "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_events_block_timestamp__day__1.964ce35cb0": ["model.flow_models.core__fact_events"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_block_timestamp__TIMESTAMP_NTZ.6ae335d7ec": ["model.flow_models.core__fact_events"], "test.flow_models.not_null_core__fact_events_block_height.b32a201e7c": ["model.flow_models.core__fact_events"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_block_height__NUMBER__FLOAT.fe6965678e": ["model.flow_models.core__fact_events"], "test.flow_models.not_null_core__fact_events_tx_succeeded.a025fdaade": ["model.flow_models.core__fact_events"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_tx_succeeded__BOOLEAN.45ed5180fb": ["model.flow_models.core__fact_events"], "test.flow_models.not_null_core__fact_events_event_index.6ef75550ae": ["model.flow_models.core__fact_events"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_index__NUMBER.97adfdc32e": ["model.flow_models.core__fact_events"], "test.flow_models.not_null_core__fact_events_event_contract.10b5644238": ["model.flow_models.core__fact_events"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_contract__STRING__VARCHAR.71773095a7": ["model.flow_models.core__fact_events"], "test.flow_models.not_null_core__fact_events_event_type.d865a2b006": ["model.flow_models.core__fact_events"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_type__STRING__VARCHAR.7f1b318eb5": ["model.flow_models.core__fact_events"], "test.flow_models.not_null_core__fact_events_event_data.ed27e5dfa3": ["model.flow_models.core__fact_events"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_data__OBJECT.e938d8505a": ["model.flow_models.core__fact_events"], "test.flow_models.dbt_utils_unique_combination_of_columns_core__fact_events_tx_id__event_index.094fa0d9a0": ["model.flow_models.core__fact_events"], "test.flow_models.not_null_core__dim_labels_event_contract.c70a664b67": ["model.flow_models.core__dim_labels"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_event_contract__STRING__VARCHAR.cd982a2f62": ["model.flow_models.core__dim_labels"], "test.flow_models.not_null_core__dim_labels_contract_name.d1c9ccfd7a": ["model.flow_models.core__dim_labels"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_contract_name__STRING__VARCHAR.37bd52ee24": ["model.flow_models.core__dim_labels"], "test.flow_models.not_null_core__dim_labels_account_address.fc9945d183": ["model.flow_models.core__dim_labels"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_account_address__STRING__VARCHAR.4b53ffd7f1": ["model.flow_models.core__dim_labels"], "test.flow_models.dbt_utils_unique_combination_of_columns_core__dim_labels_event_contract__contract_name.061b59b87d": ["model.flow_models.core__dim_labels"], "test.flow_models.not_null_silver__blocks_block_height.02ee14acf0": ["model.flow_models.silver__blocks"], "test.flow_models.unique_silver__blocks_block_height.478ce02832": ["model.flow_models.silver__blocks"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_height__NUMBER__FLOAT.08d0d3007d": ["model.flow_models.silver__blocks"], "test.flow_models.not_null_silver__blocks_block_timestamp.0920efa41b": ["model.flow_models.silver__blocks"], "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_block_timestamp__day__1.21cac2f295": ["model.flow_models.silver__blocks"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_timestamp__TIMESTAMP_NTZ.a690d9e325": ["model.flow_models.silver__blocks"], "test.flow_models.not_null_silver__blocks_network.2020ad46b9": ["model.flow_models.silver__blocks"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_network__STRING__VARCHAR.26015d603d": ["model.flow_models.silver__blocks"], "test.flow_models.not_null_silver__blocks_chain_id.e394116ffd": ["model.flow_models.silver__blocks"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_chain_id__STRING__VARCHAR.584a39c0cd": ["model.flow_models.silver__blocks"], "test.flow_models.not_null_silver__blocks_tx_count.94a4655c16": ["model.flow_models.silver__blocks"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_tx_count__NUMBER.1cb989a05c": ["model.flow_models.silver__blocks"], "test.flow_models.not_null_silver__blocks_id.b40d544128": ["model.flow_models.silver__blocks"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_id__STRING__VARCHAR.8bb956333b": ["model.flow_models.silver__blocks"], "test.flow_models.not_null_silver__blocks_parent_id.af2d66dc40": ["model.flow_models.silver__blocks"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_parent_id__STRING__VARCHAR.7766b9947a": ["model.flow_models.silver__blocks"], "test.flow_models.not_null_silver__blocks__ingested_at.1c6c52802e": ["model.flow_models.silver__blocks"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__ingested_at__TIMESTAMP_NTZ.09b669eb41": ["model.flow_models.silver__blocks"], "test.flow_models.dbt_utils_unique_combination_of_columns_silver__blocks_block_height.856e4b724d": ["model.flow_models.silver__blocks"], "test.flow_models.not_null_silver__events_event_id.c5f00655c1": ["model.flow_models.silver__events"], "test.flow_models.unique_silver__events_event_id.c34161972a": ["model.flow_models.silver__events"], "test.flow_models.not_null_silver__events_tx_id.2724c3889b": ["model.flow_models.silver__events"], "test.flow_models.not_null_silver__events_block_timestamp.0d672756c9": ["model.flow_models.silver__events"], "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__events_block_timestamp__day__1.e66863d1b6": ["model.flow_models.silver__events"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_block_timestamp__TIMESTAMP_NTZ.b8159b300f": ["model.flow_models.silver__events"], "test.flow_models.not_null_silver__events_block_height.7977589637": ["model.flow_models.silver__events"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_block_height__NUMBER__FLOAT.638b29edb1": ["model.flow_models.silver__events"], "test.flow_models.not_null_silver__events_tx_succeeded.ab918b04f1": ["model.flow_models.silver__events"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_tx_succeeded__BOOLEAN.eeaef620f9": ["model.flow_models.silver__events"], "test.flow_models.not_null_silver__events_event_index.4e05dcc574": ["model.flow_models.silver__events"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_index__NUMBER.bb1ee7bb7a": ["model.flow_models.silver__events"], "test.flow_models.not_null_silver__events_event_contract.d88483871a": ["model.flow_models.silver__events"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_contract__STRING__VARCHAR.ed992b96f4": ["model.flow_models.silver__events"], "test.flow_models.not_null_silver__events_event_type.e87e1cd6bf": ["model.flow_models.silver__events"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_type__STRING__VARCHAR.12fbcff915": ["model.flow_models.silver__events"], "test.flow_models.not_null_silver__events_event_data.b8ca9adb1b": ["model.flow_models.silver__events"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_data__VARIANT.7e8a001808": ["model.flow_models.silver__events"], "test.flow_models.not_null_silver__events__event_data_type.db25419673": ["model.flow_models.silver__events"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events__event_data_type__VARIANT.6a1896af64": ["model.flow_models.silver__events"], "test.flow_models.not_null_silver__events__event_data_fields.32c9e3af8c": ["model.flow_models.silver__events"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events__event_data_fields__VARIANT.8f36b05ba8": ["model.flow_models.silver__events"], "test.flow_models.not_null_silver__events__ingested_at.0281fcdbea": ["model.flow_models.silver__events"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events__ingested_at__TIMESTAMP_NTZ.0bf7d77559": ["model.flow_models.silver__events"], "test.flow_models.dbt_utils_unique_combination_of_columns_silver__events_tx_id__event_index.5975227b3b": ["model.flow_models.silver__events"], "test.flow_models.not_null_silver__transactions_tx_id.e15d9d9f4f": ["model.flow_models.silver__transactions"], "test.flow_models.unique_silver__transactions_tx_id.dbbd06c169": ["model.flow_models.silver__transactions"], "test.flow_models.not_null_silver__transactions_block_timestamp.1554985986": ["model.flow_models.silver__transactions"], "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_block_timestamp__day__1.bdc2ddbf00": ["model.flow_models.silver__transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_block_timestamp__TIMESTAMP_NTZ.f416456b03": ["model.flow_models.silver__transactions"], "test.flow_models.not_null_silver__transactions_block_height.52f8623258": ["model.flow_models.silver__transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_block_height__NUMBER__FLOAT.15ef7838a0": ["model.flow_models.silver__transactions"], "test.flow_models.not_null_silver__transactions_chain_id.e843c29add": ["model.flow_models.silver__transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_chain_id__STRING__VARCHAR.315ac9801c": ["model.flow_models.silver__transactions"], "test.flow_models.not_null_silver__transactions_tx_index.60e196ac6c": ["model.flow_models.silver__transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_tx_index__NUMBER.67298552e6": ["model.flow_models.silver__transactions"], "test.flow_models.not_null_silver__transactions_proposer.e5fd969e80": ["model.flow_models.silver__transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_proposer__STRING__VARCHAR.1db13669d4": ["model.flow_models.silver__transactions"], "test.flow_models.not_null_silver__transactions_payer.af7cfd0161": ["model.flow_models.silver__transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_payer__STRING__VARCHAR.93acfcdcf9": ["model.flow_models.silver__transactions"], "test.flow_models.not_null_silver__transactions_authorizers.10e420e01d": ["model.flow_models.silver__transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_authorizers__ARRAY.5bba01f26d": ["model.flow_models.silver__transactions"], "test.flow_models.not_null_silver__transactions_count_authorizers.5865533a1a": ["model.flow_models.silver__transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_count_authorizers__NUMBER.52b7f94171": ["model.flow_models.silver__transactions"], "test.flow_models.not_null_silver__transactions_gas_limit.3b80819045": ["model.flow_models.silver__transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_gas_limit__NUMBER.e4dc03e938": ["model.flow_models.silver__transactions"], "test.flow_models.not_null_silver__transactions_transaction_result.a6300f1512": ["model.flow_models.silver__transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_transaction_result__VARIANT.58a529e183": ["model.flow_models.silver__transactions"], "test.flow_models.not_null_silver__transactions_tx_succeeded.71f19b6d4a": ["model.flow_models.silver__transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_tx_succeeded__BOOLEAN.b3ac73b814": ["model.flow_models.silver__transactions"], "test.flow_models.not_null_silver__transactions_error_msg.e518b36eb2": ["model.flow_models.silver__transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_error_msg__STRING__VARCHAR.825ab1f029": ["model.flow_models.silver__transactions"], "test.flow_models.not_null_silver__transactions__ingested_at.954d945cd8": ["model.flow_models.silver__transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__ingested_at__TIMESTAMP_NTZ.e7fa39cc53": ["model.flow_models.silver__transactions"], "test.flow_models.dbt_utils_unique_combination_of_columns_silver__transactions_tx_id__block_height.0a9bd5af5a": ["model.flow_models.silver__transactions"], "test.flow_models.not_null_silver__contract_labels_event_contract.7bbcf32a3b": ["model.flow_models.silver__contract_labels"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contract_labels_event_contract__STRING__VARCHAR.1566d40837": ["model.flow_models.silver__contract_labels"], "test.flow_models.not_null_silver__contract_labels_contract_name.282cfdc77e": ["model.flow_models.silver__contract_labels"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contract_labels_contract_name__STRING__VARCHAR.45ed943358": ["model.flow_models.silver__contract_labels"], "test.flow_models.not_null_silver__contract_labels_account_address.8ede8d9df1": ["model.flow_models.silver__contract_labels"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contract_labels_account_address__STRING__VARCHAR.4870d7a714": ["model.flow_models.silver__contract_labels"], "test.flow_models.dbt_utils_unique_combination_of_columns_silver__contract_labels_event_contract__contract_name.5c036b1b29": ["model.flow_models.silver__contract_labels"], "test.flow_models.not_null_silver__event_attributes_attribute_id.3ad9865764": ["model.flow_models.silver__event_attributes"], "test.flow_models.unique_silver__event_attributes_attribute_id.4f30431d19": ["model.flow_models.silver__event_attributes"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_attribute_id__STRING__VARCHAR.705a0716b6": ["model.flow_models.silver__event_attributes"], "test.flow_models.not_null_silver__event_attributes_event_id.47ecc4ec09": ["model.flow_models.silver__event_attributes"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_id__STRING__VARCHAR.c4817805e9": ["model.flow_models.silver__event_attributes"], "test.flow_models.not_null_silver__event_attributes_tx_id.bdfb364abe": ["model.flow_models.silver__event_attributes"], "test.flow_models.not_null_silver__event_attributes_block_timestamp.944b580d9f": ["model.flow_models.silver__event_attributes"], "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__event_attributes_block_timestamp__day__1.e4d1cd2bed": ["model.flow_models.silver__event_attributes"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_block_timestamp__TIMESTAMP_NTZ.04568fce2d": ["model.flow_models.silver__event_attributes"], "test.flow_models.not_null_silver__event_attributes_event_index.fb0efb852a": ["model.flow_models.silver__event_attributes"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_index__NUMBER.d18950f9c0": ["model.flow_models.silver__event_attributes"], "test.flow_models.not_null_silver__event_attributes_attribute_index.2a6ba94c25": ["model.flow_models.silver__event_attributes"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_attribute_index__NUMBER.c6e1c155bb": ["model.flow_models.silver__event_attributes"], "test.flow_models.not_null_silver__event_attributes_event_contract.2fd3336266": ["model.flow_models.silver__event_attributes"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_contract__STRING__VARCHAR.6f7dc2d420": ["model.flow_models.silver__event_attributes"], "test.flow_models.not_null_silver__event_attributes_event_type.d082eb6e92": ["model.flow_models.silver__event_attributes"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_type__STRING__VARCHAR.09e85d8039": ["model.flow_models.silver__event_attributes"], "test.flow_models.not_null_silver__event_attributes_attribute_key.6660426450": ["model.flow_models.silver__event_attributes"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_attribute_key__STRING__VARCHAR.ad47f99c21": ["model.flow_models.silver__event_attributes"], "test.flow_models.not_null_silver__event_attributes__ingested_at.b55be5fe97": ["model.flow_models.silver__event_attributes"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes__ingested_at__TIMESTAMP_NTZ.65e90e3d1f": ["model.flow_models.silver__event_attributes"], "test.flow_models.dbt_utils_unique_combination_of_columns_silver__event_attributes_tx_id__event_index__attribute_index.a118550292": ["model.flow_models.silver__event_attributes"], "test.flow_models.not_null_silver__labels__ingested_at.da68161b4f": ["model.flow_models.silver__labels"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels__ingested_at__TIMESTAMP_NTZ.8c74f58780": ["model.flow_models.silver__labels"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_blockchain__STRING__VARCHAR.5fdfe8c7f8": ["model.flow_models.silver__labels"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_address__STRING__VARCHAR.44f4101476": ["model.flow_models.silver__labels"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_creator__STRING__VARCHAR.588aa5dd1b": ["model.flow_models.silver__labels"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_label_type__STRING__VARCHAR.6353b89b18": ["model.flow_models.silver__labels"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_label_subtype__STRING__VARCHAR.bfa65fbefa": ["model.flow_models.silver__labels"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_address_name__STRING__VARCHAR.1935202fe4": ["model.flow_models.silver__labels"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_project_name__STRING__VARCHAR.4a71a259a7": ["model.flow_models.silver__labels"], "test.flow_models.not_null_gold__events_tx_id.95926804a2": ["model.flow_models.gold__events"], "test.flow_models.not_null_gold__events_block_timestamp.9df6a2e120": ["model.flow_models.gold__events"], "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_gold__events_block_timestamp__day__1.f629955326": ["model.flow_models.gold__events"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_block_timestamp__TIMESTAMP_NTZ.a4866d5211": ["model.flow_models.gold__events"], "test.flow_models.not_null_gold__events_block_height.f9fa45c7dc": ["model.flow_models.gold__events"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_block_height__NUMBER__FLOAT.b679c42581": ["model.flow_models.gold__events"], "test.flow_models.not_null_gold__events_tx_succeeded.a81457fdcf": ["model.flow_models.gold__events"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_tx_succeeded__BOOLEAN.2dac8e9c83": ["model.flow_models.gold__events"], "test.flow_models.not_null_gold__events_event_index.b152284f0b": ["model.flow_models.gold__events"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_index__NUMBER.42fc1cb63c": ["model.flow_models.gold__events"], "test.flow_models.not_null_gold__events_event_contract.7794754732": ["model.flow_models.gold__events"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_contract__STRING__VARCHAR.d6af95460c": ["model.flow_models.gold__events"], "test.flow_models.not_null_gold__events_event_type.f7e447ca7d": ["model.flow_models.gold__events"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_type__STRING__VARCHAR.06e91772b0": ["model.flow_models.gold__events"], "test.flow_models.not_null_gold__events_event_data.c5e8d4c967": ["model.flow_models.gold__events"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_data__OBJECT.44c8a778d8": ["model.flow_models.gold__events"], "test.flow_models.dbt_utils_unique_combination_of_columns_gold__events_tx_id__event_index.04901bf0d5": ["model.flow_models.gold__events"], "test.flow_models.not_null_gold__blocks_block_height.a4ddd42313": ["model.flow_models.gold__blocks"], "test.flow_models.unique_gold__blocks_block_height.7c3e159f31": ["model.flow_models.gold__blocks"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_block_height__NUMBER__FLOAT.b4ad933972": ["model.flow_models.gold__blocks"], "test.flow_models.not_null_gold__blocks_block_timestamp.7b3d20d967": ["model.flow_models.gold__blocks"], "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_gold__blocks_block_timestamp__day__1.34d5f6a1d8": ["model.flow_models.gold__blocks"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_block_timestamp__TIMESTAMP_NTZ.1c34247c2a": ["model.flow_models.gold__blocks"], "test.flow_models.not_null_gold__blocks_network.1290e522fb": ["model.flow_models.gold__blocks"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_network__STRING__VARCHAR.b9a1e8ed08": ["model.flow_models.gold__blocks"], "test.flow_models.not_null_gold__blocks_chain_id.56f62ea8d4": ["model.flow_models.gold__blocks"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_chain_id__STRING__VARCHAR.5c6c59f589": ["model.flow_models.gold__blocks"], "test.flow_models.not_null_gold__blocks_tx_count.0ac41a407f": ["model.flow_models.gold__blocks"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_tx_count__NUMBER.fed411c444": ["model.flow_models.gold__blocks"], "test.flow_models.not_null_gold__blocks_id.6c4c044819": ["model.flow_models.gold__blocks"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_id__STRING__VARCHAR.976d79a911": ["model.flow_models.gold__blocks"], "test.flow_models.not_null_gold__blocks_parent_id.22e66ffa02": ["model.flow_models.gold__blocks"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_parent_id__STRING__VARCHAR.5ade9fdaf7": ["model.flow_models.gold__blocks"], "test.flow_models.sequence_gaps_gold__blocks_block_height.57b7dba0ad": ["model.flow_models.gold__blocks"], "test.flow_models.not_null_gold__transactions_tx_id.cd9fce6e14": ["model.flow_models.gold__transactions"], "test.flow_models.unique_gold__transactions_tx_id.c038e1f494": ["model.flow_models.gold__transactions"], "test.flow_models.tx_gaps_gold__transactions_block_height__tx_id__tx_count.94ac0787a6": ["model.flow_models.gold__transactions", "model.flow_models.silver__blocks"], "test.flow_models.not_null_gold__transactions_block_timestamp.ead04bb43d": ["model.flow_models.gold__transactions"], "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_gold__transactions_block_timestamp__day__1.0f3f99b185": ["model.flow_models.gold__transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_block_timestamp__TIMESTAMP_NTZ.fd99e5a947": ["model.flow_models.gold__transactions"], "test.flow_models.not_null_gold__transactions_block_height.e7ccac5906": ["model.flow_models.gold__transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_block_height__NUMBER__FLOAT.c7c4f87629": ["model.flow_models.gold__transactions"], "test.flow_models.not_null_gold__transactions_chain_id.a150808bdd": ["model.flow_models.gold__transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_chain_id__STRING__VARCHAR.2040f4a1b7": ["model.flow_models.gold__transactions"], "test.flow_models.not_null_gold__transactions_tx_index.78407db79c": ["model.flow_models.gold__transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_tx_index__NUMBER.819f55dfe8": ["model.flow_models.gold__transactions"], "test.flow_models.not_null_gold__transactions_proposer.1b8f46e134": ["model.flow_models.gold__transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_proposer__STRING__VARCHAR.779db46ba2": ["model.flow_models.gold__transactions"], "test.flow_models.not_null_gold__transactions_payer.efa8662752": ["model.flow_models.gold__transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_payer__STRING__VARCHAR.3e55ba3297": ["model.flow_models.gold__transactions"], "test.flow_models.not_null_gold__transactions_authorizers.8dd4ed6073": ["model.flow_models.gold__transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_authorizers__ARRAY.0ec3a9a656": ["model.flow_models.gold__transactions"], "test.flow_models.not_null_gold__transactions_count_authorizers.aaa4409fa2": ["model.flow_models.gold__transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_count_authorizers__NUMBER.cb19f10281": ["model.flow_models.gold__transactions"], "test.flow_models.not_null_gold__transactions_gas_limit.fc492b2dfd": ["model.flow_models.gold__transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_gas_limit__NUMBER.6e317a0dc5": ["model.flow_models.gold__transactions"], "test.flow_models.not_null_gold__transactions_transaction_result.ae3aa5216f": ["model.flow_models.gold__transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_transaction_result__VARIANT.64a0e190da": ["model.flow_models.gold__transactions"], "test.flow_models.not_null_gold__transactions_tx_succeeded.8b7f157e49": ["model.flow_models.gold__transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_tx_succeeded__BOOLEAN.6af1bc39c9": ["model.flow_models.gold__transactions"], "test.flow_models.not_null_gold__transactions_error_msg.22f2de539d": ["model.flow_models.gold__transactions"], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_error_msg__STRING__VARCHAR.181329cdb3": ["model.flow_models.gold__transactions"], "test.flow_models.dbt_utils_unique_combination_of_columns_gold__transactions_tx_id__block_height.de99296ea8": ["model.flow_models.gold__transactions"], "source.flow_models.prod.flow_blocks": [], "source.flow_models.prod.flow_txs": [], "source.flow_models.crosschain.address_labels": []}, "child_map": {"model.flow_models.core__fact_events": ["test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_block_height__NUMBER__FLOAT.fe6965678e", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_block_timestamp__TIMESTAMP_NTZ.6ae335d7ec", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_contract__STRING__VARCHAR.71773095a7", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_data__OBJECT.e938d8505a", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_index__NUMBER.97adfdc32e", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_type__STRING__VARCHAR.7f1b318eb5", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_tx_succeeded__BOOLEAN.45ed5180fb", "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_events_block_timestamp__day__1.964ce35cb0", "test.flow_models.dbt_utils_unique_combination_of_columns_core__fact_events_tx_id__event_index.094fa0d9a0", "test.flow_models.not_null_core__fact_events_block_height.b32a201e7c", "test.flow_models.not_null_core__fact_events_block_timestamp.d98411a5a4", "test.flow_models.not_null_core__fact_events_event_contract.10b5644238", "test.flow_models.not_null_core__fact_events_event_data.ed27e5dfa3", "test.flow_models.not_null_core__fact_events_event_index.6ef75550ae", "test.flow_models.not_null_core__fact_events_event_type.d865a2b006", "test.flow_models.not_null_core__fact_events_tx_id.a75802bdbe", "test.flow_models.not_null_core__fact_events_tx_succeeded.a025fdaade"], "model.flow_models.core__fact_transactions": ["test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_authorizers__ARRAY.40cd40c72c", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_height__NUMBER__FLOAT.5fa2b2e8e3", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_timestamp__TIMESTAMP_NTZ.4c087aa60b", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_chain_id__STRING__VARCHAR.5f1f4feacd", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_count_authorizers__NUMBER.56bac6ce9a", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_error_msg__STRING__VARCHAR.e752ab1a51", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_gas_limit__NUMBER.86a8eb924d", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_payer__STRING__VARCHAR.7f4eda4774", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_proposer__STRING__VARCHAR.3162d546cc", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_transaction_result__VARIANT.24fe91c33c", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_index__NUMBER.8612fa3af5", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_succeeded__BOOLEAN.0243d3b703", "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_block_timestamp__day__1.7e1b77d1c2", "test.flow_models.dbt_utils_unique_combination_of_columns_core__fact_transactions_tx_id__block_height.3964206ae1", "test.flow_models.not_null_core__fact_transactions_authorizers.1c6d0dc6dd", "test.flow_models.not_null_core__fact_transactions_block_height.b73a6596e7", "test.flow_models.not_null_core__fact_transactions_block_timestamp.32cc47fbb2", "test.flow_models.not_null_core__fact_transactions_chain_id.e687eaeb3e", "test.flow_models.not_null_core__fact_transactions_count_authorizers.b2e0d7cb4a", "test.flow_models.not_null_core__fact_transactions_error_msg.63392f4710", "test.flow_models.not_null_core__fact_transactions_gas_limit.c3fb97a749", "test.flow_models.not_null_core__fact_transactions_payer.ca8c699f21", "test.flow_models.not_null_core__fact_transactions_proposer.990b43a37e", "test.flow_models.not_null_core__fact_transactions_transaction_result.6b64c04382", "test.flow_models.not_null_core__fact_transactions_tx_id.dd94c1ac9e", "test.flow_models.not_null_core__fact_transactions_tx_index.4b4bf18757", "test.flow_models.not_null_core__fact_transactions_tx_succeeded.85fd90691c", "test.flow_models.unique_core__fact_transactions_tx_id.211ea20522"], "model.flow_models.core__fact_blocks": ["test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_block_height__NUMBER__FLOAT.c551ea53de", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_block_timestamp__TIMESTAMP_NTZ.d2fe6e451c", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_chain_id__STRING__VARCHAR.ccd79281c7", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_id__STRING__VARCHAR.b957f32491", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_network__STRING__VARCHAR.68dc7d044a", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_parent_id__STRING__VARCHAR.9494ae2ff5", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_tx_count__NUMBER.7f70f6af70", "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_block_timestamp__day__1.5ba40a446b", "test.flow_models.not_null_core__fact_blocks_block_height.69ece9390c", "test.flow_models.not_null_core__fact_blocks_block_timestamp.19853d3758", "test.flow_models.not_null_core__fact_blocks_chain_id.dda8c73722", "test.flow_models.not_null_core__fact_blocks_id.88f5737541", "test.flow_models.not_null_core__fact_blocks_network.2708505a8a", "test.flow_models.not_null_core__fact_blocks_parent_id.a9c18dafa8", "test.flow_models.not_null_core__fact_blocks_tx_count.168249e174", "test.flow_models.unique_core__fact_blocks_block_height.cf41b05a2d"], "model.flow_models.core__dim_labels": ["test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_account_address__STRING__VARCHAR.4b53ffd7f1", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_contract_name__STRING__VARCHAR.37bd52ee24", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_event_contract__STRING__VARCHAR.cd982a2f62", "test.flow_models.dbt_utils_unique_combination_of_columns_core__dim_labels_event_contract__contract_name.061b59b87d", "test.flow_models.not_null_core__dim_labels_account_address.fc9945d183", "test.flow_models.not_null_core__dim_labels_contract_name.d1c9ccfd7a", "test.flow_models.not_null_core__dim_labels_event_contract.c70a664b67"], "model.flow_models.bronze__labels": ["model.flow_models.silver__labels"], "model.flow_models.bronze__blocks": ["model.flow_models.silver__blocks"], "model.flow_models.bronze__transactions": ["model.flow_models.silver__transactions"], "model.flow_models.silver__events": ["model.flow_models.gold__events", "model.flow_models.silver__contract_labels", "model.flow_models.silver__event_attributes", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events__event_data_fields__VARIANT.8f36b05ba8", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events__event_data_type__VARIANT.6a1896af64", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events__ingested_at__TIMESTAMP_NTZ.0bf7d77559", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_block_height__NUMBER__FLOAT.638b29edb1", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_block_timestamp__TIMESTAMP_NTZ.b8159b300f", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_contract__STRING__VARCHAR.ed992b96f4", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_data__VARIANT.7e8a001808", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_index__NUMBER.bb1ee7bb7a", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_type__STRING__VARCHAR.12fbcff915", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_tx_succeeded__BOOLEAN.eeaef620f9", "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__events_block_timestamp__day__1.e66863d1b6", "test.flow_models.dbt_utils_unique_combination_of_columns_silver__events_tx_id__event_index.5975227b3b", "test.flow_models.not_null_silver__events__event_data_fields.32c9e3af8c", "test.flow_models.not_null_silver__events__event_data_type.db25419673", "test.flow_models.not_null_silver__events__ingested_at.0281fcdbea", "test.flow_models.not_null_silver__events_block_height.7977589637", "test.flow_models.not_null_silver__events_block_timestamp.0d672756c9", "test.flow_models.not_null_silver__events_event_contract.d88483871a", "test.flow_models.not_null_silver__events_event_data.b8ca9adb1b", "test.flow_models.not_null_silver__events_event_id.c5f00655c1", "test.flow_models.not_null_silver__events_event_index.4e05dcc574", "test.flow_models.not_null_silver__events_event_type.e87e1cd6bf", "test.flow_models.not_null_silver__events_tx_id.2724c3889b", "test.flow_models.not_null_silver__events_tx_succeeded.ab918b04f1", "test.flow_models.unique_silver__events_event_id.c34161972a"], "model.flow_models.silver__transactions": ["model.flow_models.gold__transactions", "model.flow_models.silver__events", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__ingested_at__TIMESTAMP_NTZ.e7fa39cc53", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_authorizers__ARRAY.5bba01f26d", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_block_height__NUMBER__FLOAT.15ef7838a0", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_block_timestamp__TIMESTAMP_NTZ.f416456b03", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_chain_id__STRING__VARCHAR.315ac9801c", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_count_authorizers__NUMBER.52b7f94171", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_error_msg__STRING__VARCHAR.825ab1f029", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_gas_limit__NUMBER.e4dc03e938", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_payer__STRING__VARCHAR.93acfcdcf9", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_proposer__STRING__VARCHAR.1db13669d4", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_transaction_result__VARIANT.58a529e183", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_tx_index__NUMBER.67298552e6", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_tx_succeeded__BOOLEAN.b3ac73b814", "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_block_timestamp__day__1.bdc2ddbf00", "test.flow_models.dbt_utils_unique_combination_of_columns_silver__transactions_tx_id__block_height.0a9bd5af5a", "test.flow_models.not_null_silver__transactions__ingested_at.954d945cd8", "test.flow_models.not_null_silver__transactions_authorizers.10e420e01d", "test.flow_models.not_null_silver__transactions_block_height.52f8623258", "test.flow_models.not_null_silver__transactions_block_timestamp.1554985986", "test.flow_models.not_null_silver__transactions_chain_id.e843c29add", "test.flow_models.not_null_silver__transactions_count_authorizers.5865533a1a", "test.flow_models.not_null_silver__transactions_error_msg.e518b36eb2", "test.flow_models.not_null_silver__transactions_gas_limit.3b80819045", "test.flow_models.not_null_silver__transactions_payer.af7cfd0161", "test.flow_models.not_null_silver__transactions_proposer.e5fd969e80", "test.flow_models.not_null_silver__transactions_transaction_result.a6300f1512", "test.flow_models.not_null_silver__transactions_tx_id.e15d9d9f4f", "test.flow_models.not_null_silver__transactions_tx_index.60e196ac6c", "test.flow_models.not_null_silver__transactions_tx_succeeded.71f19b6d4a", "test.flow_models.unique_silver__transactions_tx_id.dbbd06c169"], "model.flow_models.silver__contract_labels": ["model.flow_models.core__dim_labels", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contract_labels_account_address__STRING__VARCHAR.4870d7a714", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contract_labels_contract_name__STRING__VARCHAR.45ed943358", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contract_labels_event_contract__STRING__VARCHAR.1566d40837", "test.flow_models.dbt_utils_unique_combination_of_columns_silver__contract_labels_event_contract__contract_name.5c036b1b29", "test.flow_models.not_null_silver__contract_labels_account_address.8ede8d9df1", "test.flow_models.not_null_silver__contract_labels_contract_name.282cfdc77e", "test.flow_models.not_null_silver__contract_labels_event_contract.7bbcf32a3b"], "model.flow_models.silver__blocks": ["model.flow_models.gold__blocks", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__ingested_at__TIMESTAMP_NTZ.09b669eb41", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_height__NUMBER__FLOAT.08d0d3007d", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_timestamp__TIMESTAMP_NTZ.a690d9e325", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_chain_id__STRING__VARCHAR.584a39c0cd", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_id__STRING__VARCHAR.8bb956333b", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_network__STRING__VARCHAR.26015d603d", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_parent_id__STRING__VARCHAR.7766b9947a", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_tx_count__NUMBER.1cb989a05c", "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_block_timestamp__day__1.21cac2f295", "test.flow_models.dbt_utils_unique_combination_of_columns_silver__blocks_block_height.856e4b724d", "test.flow_models.not_null_silver__blocks__ingested_at.1c6c52802e", "test.flow_models.not_null_silver__blocks_block_height.02ee14acf0", "test.flow_models.not_null_silver__blocks_block_timestamp.0920efa41b", "test.flow_models.not_null_silver__blocks_chain_id.e394116ffd", "test.flow_models.not_null_silver__blocks_id.b40d544128", "test.flow_models.not_null_silver__blocks_network.2020ad46b9", "test.flow_models.not_null_silver__blocks_parent_id.af2d66dc40", "test.flow_models.not_null_silver__blocks_tx_count.94a4655c16", "test.flow_models.tx_gaps_gold__transactions_block_height__tx_id__tx_count.94ac0787a6", "test.flow_models.unique_silver__blocks_block_height.478ce02832"], "model.flow_models.silver__event_attributes": ["model.flow_models.gold__events", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes__ingested_at__TIMESTAMP_NTZ.65e90e3d1f", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_attribute_id__STRING__VARCHAR.705a0716b6", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_attribute_index__NUMBER.c6e1c155bb", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_attribute_key__STRING__VARCHAR.ad47f99c21", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_block_timestamp__TIMESTAMP_NTZ.04568fce2d", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_contract__STRING__VARCHAR.6f7dc2d420", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_id__STRING__VARCHAR.c4817805e9", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_index__NUMBER.d18950f9c0", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_type__STRING__VARCHAR.09e85d8039", "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__event_attributes_block_timestamp__day__1.e4d1cd2bed", "test.flow_models.dbt_utils_unique_combination_of_columns_silver__event_attributes_tx_id__event_index__attribute_index.a118550292", "test.flow_models.not_null_silver__event_attributes__ingested_at.b55be5fe97", "test.flow_models.not_null_silver__event_attributes_attribute_id.3ad9865764", "test.flow_models.not_null_silver__event_attributes_attribute_index.2a6ba94c25", "test.flow_models.not_null_silver__event_attributes_attribute_key.6660426450", "test.flow_models.not_null_silver__event_attributes_block_timestamp.944b580d9f", "test.flow_models.not_null_silver__event_attributes_event_contract.2fd3336266", "test.flow_models.not_null_silver__event_attributes_event_id.47ecc4ec09", "test.flow_models.not_null_silver__event_attributes_event_index.fb0efb852a", "test.flow_models.not_null_silver__event_attributes_event_type.d082eb6e92", "test.flow_models.not_null_silver__event_attributes_tx_id.bdfb364abe", "test.flow_models.unique_silver__event_attributes_attribute_id.4f30431d19"], "model.flow_models.silver__labels": ["test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels__ingested_at__TIMESTAMP_NTZ.8c74f58780", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_address__STRING__VARCHAR.44f4101476", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_address_name__STRING__VARCHAR.1935202fe4", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_blockchain__STRING__VARCHAR.5fdfe8c7f8", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_creator__STRING__VARCHAR.588aa5dd1b", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_label_subtype__STRING__VARCHAR.bfa65fbefa", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_label_type__STRING__VARCHAR.6353b89b18", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_project_name__STRING__VARCHAR.4a71a259a7", "test.flow_models.not_null_silver__labels__ingested_at.da68161b4f"], "model.flow_models.gold__blocks": ["model.flow_models.core__fact_blocks", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_block_height__NUMBER__FLOAT.b4ad933972", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_block_timestamp__TIMESTAMP_NTZ.1c34247c2a", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_chain_id__STRING__VARCHAR.5c6c59f589", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_id__STRING__VARCHAR.976d79a911", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_network__STRING__VARCHAR.b9a1e8ed08", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_parent_id__STRING__VARCHAR.5ade9fdaf7", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_tx_count__NUMBER.fed411c444", "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_gold__blocks_block_timestamp__day__1.34d5f6a1d8", "test.flow_models.not_null_gold__blocks_block_height.a4ddd42313", "test.flow_models.not_null_gold__blocks_block_timestamp.7b3d20d967", "test.flow_models.not_null_gold__blocks_chain_id.56f62ea8d4", "test.flow_models.not_null_gold__blocks_id.6c4c044819", "test.flow_models.not_null_gold__blocks_network.1290e522fb", "test.flow_models.not_null_gold__blocks_parent_id.22e66ffa02", "test.flow_models.not_null_gold__blocks_tx_count.0ac41a407f", "test.flow_models.sequence_gaps_gold__blocks_block_height.57b7dba0ad", "test.flow_models.unique_gold__blocks_block_height.7c3e159f31"], "model.flow_models.gold__events": ["model.flow_models.core__fact_events", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_block_height__NUMBER__FLOAT.b679c42581", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_block_timestamp__TIMESTAMP_NTZ.a4866d5211", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_contract__STRING__VARCHAR.d6af95460c", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_data__OBJECT.44c8a778d8", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_index__NUMBER.42fc1cb63c", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_type__STRING__VARCHAR.06e91772b0", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_tx_succeeded__BOOLEAN.2dac8e9c83", "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_gold__events_block_timestamp__day__1.f629955326", "test.flow_models.dbt_utils_unique_combination_of_columns_gold__events_tx_id__event_index.04901bf0d5", "test.flow_models.not_null_gold__events_block_height.f9fa45c7dc", "test.flow_models.not_null_gold__events_block_timestamp.9df6a2e120", "test.flow_models.not_null_gold__events_event_contract.7794754732", "test.flow_models.not_null_gold__events_event_data.c5e8d4c967", "test.flow_models.not_null_gold__events_event_index.b152284f0b", "test.flow_models.not_null_gold__events_event_type.f7e447ca7d", "test.flow_models.not_null_gold__events_tx_id.95926804a2", "test.flow_models.not_null_gold__events_tx_succeeded.a81457fdcf"], "model.flow_models.gold__transactions": ["model.flow_models.core__fact_transactions", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_authorizers__ARRAY.0ec3a9a656", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_block_height__NUMBER__FLOAT.c7c4f87629", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_block_timestamp__TIMESTAMP_NTZ.fd99e5a947", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_chain_id__STRING__VARCHAR.2040f4a1b7", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_count_authorizers__NUMBER.cb19f10281", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_error_msg__STRING__VARCHAR.181329cdb3", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_gas_limit__NUMBER.6e317a0dc5", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_payer__STRING__VARCHAR.3e55ba3297", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_proposer__STRING__VARCHAR.779db46ba2", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_transaction_result__VARIANT.64a0e190da", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_tx_index__NUMBER.819f55dfe8", "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_tx_succeeded__BOOLEAN.6af1bc39c9", "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_gold__transactions_block_timestamp__day__1.0f3f99b185", "test.flow_models.dbt_utils_unique_combination_of_columns_gold__transactions_tx_id__block_height.de99296ea8", "test.flow_models.not_null_gold__transactions_authorizers.8dd4ed6073", "test.flow_models.not_null_gold__transactions_block_height.e7ccac5906", "test.flow_models.not_null_gold__transactions_block_timestamp.ead04bb43d", "test.flow_models.not_null_gold__transactions_chain_id.a150808bdd", "test.flow_models.not_null_gold__transactions_count_authorizers.aaa4409fa2", "test.flow_models.not_null_gold__transactions_error_msg.22f2de539d", "test.flow_models.not_null_gold__transactions_gas_limit.fc492b2dfd", "test.flow_models.not_null_gold__transactions_payer.efa8662752", "test.flow_models.not_null_gold__transactions_proposer.1b8f46e134", "test.flow_models.not_null_gold__transactions_transaction_result.ae3aa5216f", "test.flow_models.not_null_gold__transactions_tx_id.cd9fce6e14", "test.flow_models.not_null_gold__transactions_tx_index.78407db79c", "test.flow_models.not_null_gold__transactions_tx_succeeded.8b7f157e49", "test.flow_models.tx_gaps_gold__transactions_block_height__tx_id__tx_count.94ac0787a6", "test.flow_models.unique_gold__transactions_tx_id.c038e1f494"], "operation.flow_models.flow_models-on-run-start-0": [], "operation.flow_models.flow_models-on-run-start-1": [], "model.re_data.re_data_columns_over_time": ["model.re_data.re_data_schema_changes"], "model.re_data.re_data_base_metrics": ["model.re_data.re_data_last_metrics", "model.re_data.re_data_last_stats", "model.re_data.re_data_last_stats", "model.re_data.re_data_last_stats", "model.re_data.re_data_metrics"], "model.re_data.re_data_last_stats": ["model.re_data.re_data_z_score"], "model.re_data.re_data_last_metrics": ["model.re_data.re_data_z_score"], "model.re_data.re_data_metrics": [], "model.re_data.re_data_run_started_at": ["model.re_data.re_data_base_metrics", "model.re_data.re_data_columns", "model.re_data.re_data_last_base_metrics_thread0", "model.re_data.re_data_last_base_metrics_thread1", "model.re_data.re_data_last_base_metrics_thread2", "model.re_data.re_data_last_base_metrics_thread3", "model.re_data.re_data_schema_changes"], "model.re_data.re_data_last_base_metrics_thread0": ["model.re_data.re_data_base_metrics"], "model.re_data.re_data_last_base_metrics_thread1": ["model.re_data.re_data_base_metrics"], "model.re_data.re_data_last_base_metrics_thread3": ["model.re_data.re_data_base_metrics"], "model.re_data.re_data_last_base_metrics_thread2": ["model.re_data.re_data_base_metrics"], "model.re_data.re_data_last_base_metrics_part0": ["model.re_data.re_data_base_metrics", "model.re_data.re_data_base_metrics", "model.re_data.re_data_last_base_metrics_thread0"], "model.re_data.re_data_last_base_metrics_part1": ["model.re_data.re_data_base_metrics", "model.re_data.re_data_base_metrics", "model.re_data.re_data_last_base_metrics_thread1"], "model.re_data.re_data_last_base_metrics_part3": ["model.re_data.re_data_base_metrics", "model.re_data.re_data_base_metrics", "model.re_data.re_data_last_base_metrics_thread3"], "model.re_data.re_data_last_base_metrics_part2": ["model.re_data.re_data_base_metrics", "model.re_data.re_data_base_metrics", "model.re_data.re_data_last_base_metrics_thread2"], "model.re_data.re_data_columns": ["model.re_data.re_data_base_metrics", "model.re_data.re_data_columns_over_time", "model.re_data.re_data_last_base_metrics_part0", "model.re_data.re_data_last_base_metrics_part1", "model.re_data.re_data_last_base_metrics_part2", "model.re_data.re_data_last_base_metrics_part3", "model.re_data.re_data_last_base_metrics_thread0", "model.re_data.re_data_last_base_metrics_thread1", "model.re_data.re_data_last_base_metrics_thread2", "model.re_data.re_data_last_base_metrics_thread3"], "model.re_data.re_data_monitored": ["model.re_data.re_data_anomalies", "model.re_data.re_data_base_metrics", "model.re_data.re_data_columns", "model.re_data.re_data_columns_over_time", "model.re_data.re_data_last_base_metrics_thread0", "model.re_data.re_data_last_base_metrics_thread1", "model.re_data.re_data_last_base_metrics_thread2", "model.re_data.re_data_last_base_metrics_thread3", "model.re_data.re_data_schema_changes"], "model.re_data.re_data_z_score": ["model.re_data.re_data_anomalies"], "model.re_data.re_data_anomalies": ["model.re_data.re_data_alerts"], "model.re_data.re_data_test_runs": [], "model.re_data.re_data_alerts": [], "model.re_data.re_data_schema_changes": ["model.re_data.re_data_alerts"], "model.re_data.re_data_test_history": ["model.re_data.re_data_alerts", "model.re_data.re_data_test_runs"], "operation.re_data.re_data-on-run-end-0": [], "test.flow_models.not_null_core__fact_blocks_block_height.69ece9390c": [], "test.flow_models.unique_core__fact_blocks_block_height.cf41b05a2d": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_block_height__NUMBER__FLOAT.c551ea53de": [], "test.flow_models.not_null_core__fact_blocks_block_timestamp.19853d3758": [], "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_block_timestamp__day__1.5ba40a446b": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_block_timestamp__TIMESTAMP_NTZ.d2fe6e451c": [], "test.flow_models.not_null_core__fact_blocks_network.2708505a8a": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_network__STRING__VARCHAR.68dc7d044a": [], "test.flow_models.not_null_core__fact_blocks_chain_id.dda8c73722": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_chain_id__STRING__VARCHAR.ccd79281c7": [], "test.flow_models.not_null_core__fact_blocks_tx_count.168249e174": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_tx_count__NUMBER.7f70f6af70": [], "test.flow_models.not_null_core__fact_blocks_id.88f5737541": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_id__STRING__VARCHAR.b957f32491": [], "test.flow_models.not_null_core__fact_blocks_parent_id.a9c18dafa8": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_parent_id__STRING__VARCHAR.9494ae2ff5": [], "test.flow_models.not_null_core__fact_transactions_tx_id.dd94c1ac9e": [], "test.flow_models.unique_core__fact_transactions_tx_id.211ea20522": [], "test.flow_models.not_null_core__fact_transactions_block_timestamp.32cc47fbb2": [], "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_block_timestamp__day__1.7e1b77d1c2": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_timestamp__TIMESTAMP_NTZ.4c087aa60b": [], "test.flow_models.not_null_core__fact_transactions_block_height.b73a6596e7": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_block_height__NUMBER__FLOAT.5fa2b2e8e3": [], "test.flow_models.not_null_core__fact_transactions_chain_id.e687eaeb3e": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_chain_id__STRING__VARCHAR.5f1f4feacd": [], "test.flow_models.not_null_core__fact_transactions_tx_index.4b4bf18757": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_index__NUMBER.8612fa3af5": [], "test.flow_models.not_null_core__fact_transactions_proposer.990b43a37e": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_proposer__STRING__VARCHAR.3162d546cc": [], "test.flow_models.not_null_core__fact_transactions_payer.ca8c699f21": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_payer__STRING__VARCHAR.7f4eda4774": [], "test.flow_models.not_null_core__fact_transactions_authorizers.1c6d0dc6dd": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_authorizers__ARRAY.40cd40c72c": [], "test.flow_models.not_null_core__fact_transactions_count_authorizers.b2e0d7cb4a": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_count_authorizers__NUMBER.56bac6ce9a": [], "test.flow_models.not_null_core__fact_transactions_gas_limit.c3fb97a749": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_gas_limit__NUMBER.86a8eb924d": [], "test.flow_models.not_null_core__fact_transactions_transaction_result.6b64c04382": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_transaction_result__VARIANT.24fe91c33c": [], "test.flow_models.not_null_core__fact_transactions_tx_succeeded.85fd90691c": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_tx_succeeded__BOOLEAN.0243d3b703": [], "test.flow_models.not_null_core__fact_transactions_error_msg.63392f4710": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_error_msg__STRING__VARCHAR.e752ab1a51": [], "test.flow_models.dbt_utils_unique_combination_of_columns_core__fact_transactions_tx_id__block_height.3964206ae1": [], "test.flow_models.not_null_core__fact_events_tx_id.a75802bdbe": [], "test.flow_models.not_null_core__fact_events_block_timestamp.d98411a5a4": [], "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_events_block_timestamp__day__1.964ce35cb0": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_block_timestamp__TIMESTAMP_NTZ.6ae335d7ec": [], "test.flow_models.not_null_core__fact_events_block_height.b32a201e7c": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_block_height__NUMBER__FLOAT.fe6965678e": [], "test.flow_models.not_null_core__fact_events_tx_succeeded.a025fdaade": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_tx_succeeded__BOOLEAN.45ed5180fb": [], "test.flow_models.not_null_core__fact_events_event_index.6ef75550ae": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_index__NUMBER.97adfdc32e": [], "test.flow_models.not_null_core__fact_events_event_contract.10b5644238": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_contract__STRING__VARCHAR.71773095a7": [], "test.flow_models.not_null_core__fact_events_event_type.d865a2b006": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_type__STRING__VARCHAR.7f1b318eb5": [], "test.flow_models.not_null_core__fact_events_event_data.ed27e5dfa3": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_events_event_data__OBJECT.e938d8505a": [], "test.flow_models.dbt_utils_unique_combination_of_columns_core__fact_events_tx_id__event_index.094fa0d9a0": [], "test.flow_models.not_null_core__dim_labels_event_contract.c70a664b67": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_event_contract__STRING__VARCHAR.cd982a2f62": [], "test.flow_models.not_null_core__dim_labels_contract_name.d1c9ccfd7a": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_contract_name__STRING__VARCHAR.37bd52ee24": [], "test.flow_models.not_null_core__dim_labels_account_address.fc9945d183": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_account_address__STRING__VARCHAR.4b53ffd7f1": [], "test.flow_models.dbt_utils_unique_combination_of_columns_core__dim_labels_event_contract__contract_name.061b59b87d": [], "test.flow_models.not_null_silver__blocks_block_height.02ee14acf0": [], "test.flow_models.unique_silver__blocks_block_height.478ce02832": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_height__NUMBER__FLOAT.08d0d3007d": [], "test.flow_models.not_null_silver__blocks_block_timestamp.0920efa41b": [], "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_block_timestamp__day__1.21cac2f295": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_block_timestamp__TIMESTAMP_NTZ.a690d9e325": [], "test.flow_models.not_null_silver__blocks_network.2020ad46b9": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_network__STRING__VARCHAR.26015d603d": [], "test.flow_models.not_null_silver__blocks_chain_id.e394116ffd": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_chain_id__STRING__VARCHAR.584a39c0cd": [], "test.flow_models.not_null_silver__blocks_tx_count.94a4655c16": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_tx_count__NUMBER.1cb989a05c": [], "test.flow_models.not_null_silver__blocks_id.b40d544128": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_id__STRING__VARCHAR.8bb956333b": [], "test.flow_models.not_null_silver__blocks_parent_id.af2d66dc40": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_parent_id__STRING__VARCHAR.7766b9947a": [], "test.flow_models.not_null_silver__blocks__ingested_at.1c6c52802e": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__ingested_at__TIMESTAMP_NTZ.09b669eb41": [], "test.flow_models.dbt_utils_unique_combination_of_columns_silver__blocks_block_height.856e4b724d": [], "test.flow_models.not_null_silver__events_event_id.c5f00655c1": [], "test.flow_models.unique_silver__events_event_id.c34161972a": [], "test.flow_models.not_null_silver__events_tx_id.2724c3889b": [], "test.flow_models.not_null_silver__events_block_timestamp.0d672756c9": [], "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__events_block_timestamp__day__1.e66863d1b6": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_block_timestamp__TIMESTAMP_NTZ.b8159b300f": [], "test.flow_models.not_null_silver__events_block_height.7977589637": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_block_height__NUMBER__FLOAT.638b29edb1": [], "test.flow_models.not_null_silver__events_tx_succeeded.ab918b04f1": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_tx_succeeded__BOOLEAN.eeaef620f9": [], "test.flow_models.not_null_silver__events_event_index.4e05dcc574": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_index__NUMBER.bb1ee7bb7a": [], "test.flow_models.not_null_silver__events_event_contract.d88483871a": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_contract__STRING__VARCHAR.ed992b96f4": [], "test.flow_models.not_null_silver__events_event_type.e87e1cd6bf": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_type__STRING__VARCHAR.12fbcff915": [], "test.flow_models.not_null_silver__events_event_data.b8ca9adb1b": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events_event_data__VARIANT.7e8a001808": [], "test.flow_models.not_null_silver__events__event_data_type.db25419673": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events__event_data_type__VARIANT.6a1896af64": [], "test.flow_models.not_null_silver__events__event_data_fields.32c9e3af8c": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events__event_data_fields__VARIANT.8f36b05ba8": [], "test.flow_models.not_null_silver__events__ingested_at.0281fcdbea": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__events__ingested_at__TIMESTAMP_NTZ.0bf7d77559": [], "test.flow_models.dbt_utils_unique_combination_of_columns_silver__events_tx_id__event_index.5975227b3b": [], "test.flow_models.not_null_silver__transactions_tx_id.e15d9d9f4f": [], "test.flow_models.unique_silver__transactions_tx_id.dbbd06c169": [], "test.flow_models.not_null_silver__transactions_block_timestamp.1554985986": [], "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_block_timestamp__day__1.bdc2ddbf00": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_block_timestamp__TIMESTAMP_NTZ.f416456b03": [], "test.flow_models.not_null_silver__transactions_block_height.52f8623258": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_block_height__NUMBER__FLOAT.15ef7838a0": [], "test.flow_models.not_null_silver__transactions_chain_id.e843c29add": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_chain_id__STRING__VARCHAR.315ac9801c": [], "test.flow_models.not_null_silver__transactions_tx_index.60e196ac6c": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_tx_index__NUMBER.67298552e6": [], "test.flow_models.not_null_silver__transactions_proposer.e5fd969e80": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_proposer__STRING__VARCHAR.1db13669d4": [], "test.flow_models.not_null_silver__transactions_payer.af7cfd0161": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_payer__STRING__VARCHAR.93acfcdcf9": [], "test.flow_models.not_null_silver__transactions_authorizers.10e420e01d": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_authorizers__ARRAY.5bba01f26d": [], "test.flow_models.not_null_silver__transactions_count_authorizers.5865533a1a": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_count_authorizers__NUMBER.52b7f94171": [], "test.flow_models.not_null_silver__transactions_gas_limit.3b80819045": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_gas_limit__NUMBER.e4dc03e938": [], "test.flow_models.not_null_silver__transactions_transaction_result.a6300f1512": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_transaction_result__VARIANT.58a529e183": [], "test.flow_models.not_null_silver__transactions_tx_succeeded.71f19b6d4a": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_tx_succeeded__BOOLEAN.b3ac73b814": [], "test.flow_models.not_null_silver__transactions_error_msg.e518b36eb2": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_error_msg__STRING__VARCHAR.825ab1f029": [], "test.flow_models.not_null_silver__transactions__ingested_at.954d945cd8": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__ingested_at__TIMESTAMP_NTZ.e7fa39cc53": [], "test.flow_models.dbt_utils_unique_combination_of_columns_silver__transactions_tx_id__block_height.0a9bd5af5a": [], "test.flow_models.not_null_silver__contract_labels_event_contract.7bbcf32a3b": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contract_labels_event_contract__STRING__VARCHAR.1566d40837": [], "test.flow_models.not_null_silver__contract_labels_contract_name.282cfdc77e": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contract_labels_contract_name__STRING__VARCHAR.45ed943358": [], "test.flow_models.not_null_silver__contract_labels_account_address.8ede8d9df1": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contract_labels_account_address__STRING__VARCHAR.4870d7a714": [], "test.flow_models.dbt_utils_unique_combination_of_columns_silver__contract_labels_event_contract__contract_name.5c036b1b29": [], "test.flow_models.not_null_silver__event_attributes_attribute_id.3ad9865764": [], "test.flow_models.unique_silver__event_attributes_attribute_id.4f30431d19": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_attribute_id__STRING__VARCHAR.705a0716b6": [], "test.flow_models.not_null_silver__event_attributes_event_id.47ecc4ec09": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_id__STRING__VARCHAR.c4817805e9": [], "test.flow_models.not_null_silver__event_attributes_tx_id.bdfb364abe": [], "test.flow_models.not_null_silver__event_attributes_block_timestamp.944b580d9f": [], "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__event_attributes_block_timestamp__day__1.e4d1cd2bed": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_block_timestamp__TIMESTAMP_NTZ.04568fce2d": [], "test.flow_models.not_null_silver__event_attributes_event_index.fb0efb852a": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_index__NUMBER.d18950f9c0": [], "test.flow_models.not_null_silver__event_attributes_attribute_index.2a6ba94c25": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_attribute_index__NUMBER.c6e1c155bb": [], "test.flow_models.not_null_silver__event_attributes_event_contract.2fd3336266": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_contract__STRING__VARCHAR.6f7dc2d420": [], "test.flow_models.not_null_silver__event_attributes_event_type.d082eb6e92": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_event_type__STRING__VARCHAR.09e85d8039": [], "test.flow_models.not_null_silver__event_attributes_attribute_key.6660426450": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes_attribute_key__STRING__VARCHAR.ad47f99c21": [], "test.flow_models.not_null_silver__event_attributes__ingested_at.b55be5fe97": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__event_attributes__ingested_at__TIMESTAMP_NTZ.65e90e3d1f": [], "test.flow_models.dbt_utils_unique_combination_of_columns_silver__event_attributes_tx_id__event_index__attribute_index.a118550292": [], "test.flow_models.not_null_silver__labels__ingested_at.da68161b4f": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels__ingested_at__TIMESTAMP_NTZ.8c74f58780": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_blockchain__STRING__VARCHAR.5fdfe8c7f8": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_address__STRING__VARCHAR.44f4101476": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_creator__STRING__VARCHAR.588aa5dd1b": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_label_type__STRING__VARCHAR.6353b89b18": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_label_subtype__STRING__VARCHAR.bfa65fbefa": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_address_name__STRING__VARCHAR.1935202fe4": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__labels_project_name__STRING__VARCHAR.4a71a259a7": [], "test.flow_models.not_null_gold__events_tx_id.95926804a2": [], "test.flow_models.not_null_gold__events_block_timestamp.9df6a2e120": [], "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_gold__events_block_timestamp__day__1.f629955326": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_block_timestamp__TIMESTAMP_NTZ.a4866d5211": [], "test.flow_models.not_null_gold__events_block_height.f9fa45c7dc": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_block_height__NUMBER__FLOAT.b679c42581": [], "test.flow_models.not_null_gold__events_tx_succeeded.a81457fdcf": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_tx_succeeded__BOOLEAN.2dac8e9c83": [], "test.flow_models.not_null_gold__events_event_index.b152284f0b": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_index__NUMBER.42fc1cb63c": [], "test.flow_models.not_null_gold__events_event_contract.7794754732": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_contract__STRING__VARCHAR.d6af95460c": [], "test.flow_models.not_null_gold__events_event_type.f7e447ca7d": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_type__STRING__VARCHAR.06e91772b0": [], "test.flow_models.not_null_gold__events_event_data.c5e8d4c967": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__events_event_data__OBJECT.44c8a778d8": [], "test.flow_models.dbt_utils_unique_combination_of_columns_gold__events_tx_id__event_index.04901bf0d5": [], "test.flow_models.not_null_gold__blocks_block_height.a4ddd42313": [], "test.flow_models.unique_gold__blocks_block_height.7c3e159f31": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_block_height__NUMBER__FLOAT.b4ad933972": [], "test.flow_models.not_null_gold__blocks_block_timestamp.7b3d20d967": [], "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_gold__blocks_block_timestamp__day__1.34d5f6a1d8": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_block_timestamp__TIMESTAMP_NTZ.1c34247c2a": [], "test.flow_models.not_null_gold__blocks_network.1290e522fb": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_network__STRING__VARCHAR.b9a1e8ed08": [], "test.flow_models.not_null_gold__blocks_chain_id.56f62ea8d4": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_chain_id__STRING__VARCHAR.5c6c59f589": [], "test.flow_models.not_null_gold__blocks_tx_count.0ac41a407f": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_tx_count__NUMBER.fed411c444": [], "test.flow_models.not_null_gold__blocks_id.6c4c044819": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_id__STRING__VARCHAR.976d79a911": [], "test.flow_models.not_null_gold__blocks_parent_id.22e66ffa02": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__blocks_parent_id__STRING__VARCHAR.5ade9fdaf7": [], "test.flow_models.sequence_gaps_gold__blocks_block_height.57b7dba0ad": [], "test.flow_models.not_null_gold__transactions_tx_id.cd9fce6e14": [], "test.flow_models.unique_gold__transactions_tx_id.c038e1f494": [], "test.flow_models.tx_gaps_gold__transactions_block_height__tx_id__tx_count.94ac0787a6": [], "test.flow_models.not_null_gold__transactions_block_timestamp.ead04bb43d": [], "test.flow_models.dbt_expectations_expect_row_values_to_have_recent_data_gold__transactions_block_timestamp__day__1.0f3f99b185": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_block_timestamp__TIMESTAMP_NTZ.fd99e5a947": [], "test.flow_models.not_null_gold__transactions_block_height.e7ccac5906": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_block_height__NUMBER__FLOAT.c7c4f87629": [], "test.flow_models.not_null_gold__transactions_chain_id.a150808bdd": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_chain_id__STRING__VARCHAR.2040f4a1b7": [], "test.flow_models.not_null_gold__transactions_tx_index.78407db79c": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_tx_index__NUMBER.819f55dfe8": [], "test.flow_models.not_null_gold__transactions_proposer.1b8f46e134": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_proposer__STRING__VARCHAR.779db46ba2": [], "test.flow_models.not_null_gold__transactions_payer.efa8662752": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_payer__STRING__VARCHAR.3e55ba3297": [], "test.flow_models.not_null_gold__transactions_authorizers.8dd4ed6073": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_authorizers__ARRAY.0ec3a9a656": [], "test.flow_models.not_null_gold__transactions_count_authorizers.aaa4409fa2": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_count_authorizers__NUMBER.cb19f10281": [], "test.flow_models.not_null_gold__transactions_gas_limit.fc492b2dfd": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_gas_limit__NUMBER.6e317a0dc5": [], "test.flow_models.not_null_gold__transactions_transaction_result.ae3aa5216f": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_transaction_result__VARIANT.64a0e190da": [], "test.flow_models.not_null_gold__transactions_tx_succeeded.8b7f157e49": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_tx_succeeded__BOOLEAN.6af1bc39c9": [], "test.flow_models.not_null_gold__transactions_error_msg.22f2de539d": [], "test.flow_models.dbt_expectations_expect_column_values_to_be_in_type_list_gold__transactions_error_msg__STRING__VARCHAR.181329cdb3": [], "test.flow_models.dbt_utils_unique_combination_of_columns_gold__transactions_tx_id__block_height.de99296ea8": [], "source.flow_models.prod.flow_blocks": ["model.flow_models.bronze__blocks"], "source.flow_models.prod.flow_txs": ["model.flow_models.bronze__transactions"], "source.flow_models.crosschain.address_labels": ["model.flow_models.bronze__labels"]}}